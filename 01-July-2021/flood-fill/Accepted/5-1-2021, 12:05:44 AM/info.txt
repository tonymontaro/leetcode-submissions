{"id":487211814,"lang":"cpp","time":"2Â months","timestamp":1619823944,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/487211814/","is_pending":"Not Pending","title":"Flood Fill","memory":"14.1 MB","code":"class Solution {\npublic:\n    int seen[50][50];\n    vector<vector<int>> floodFill(vector<vector<int>>& grid, int sr, int sc, int newColor) {\n        int rlen = grid.size(), clen = grid[0].size();\n        memset(seen, 0, sizeof(seen));\n        int color = grid[sr][sc];\n        if (color == newColor) return grid;\n        stack<pair<int, int>> st;\n        st.push({sr, sc});\n        seen[sr][sc] = 1;\n        grid[sr][sc] = newColor;\n        vector<pair<int,int>> dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        while (!st.empty()) {\n            auto node = st.top();\n            st.pop();\n            for (auto [rAdd, cAdd]: dirs) {\n                int r = rAdd + node.first, c = cAdd + node.second;\n                if (r < 0 || r >= rlen || c < 0 || c >= clen || seen[r][c] == 1 || grid[r][c] != color) continue;\n                seen[r][c] = 1;\n                st.push({r, c});\n                grid[r][c] = newColor;\n            }\n        }\n        return grid;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flood-fill"}