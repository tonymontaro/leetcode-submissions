// https://leetcode.com/problems/powx-n

class Solution:
    
    def myPow(self, x: float, n: int) -> float:
        # O(logn) time | O(1) space
        cache = {}
        def power(a, p):
            if p not in cache:
                if p == 0:
                    ans = 1
                elif p == 1:
                    ans = a
                else:
                    ans = power(a, p//2) * power(a, p//2) if p % 2 == 0 else a * power(a, p - 1)
                cache[p] = ans
            return cache[p]
        
        ans = power(x, abs(n))
        return ans if n >= 0 else 1/ans
