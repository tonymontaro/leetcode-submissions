{"id":289631058,"lang":"python3","time":"1 year, 6 months","timestamp":1577672192,"status_display":"Accepted","runtime":"272 ms","url":"/submissions/detail/289631058/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"16.5 MB","code":"class Solution:\n    def buildTree(self, preorder, inorder) -> TreeNode:\n        if len(preorder) < 1: return\n        cord = (0, len(preorder)-1)\n        return self.helper(cord, cord, preorder, inorder)\n    \n    def helper(self, pcord, icord, preorder, inorder):\n        start, end = pcord\n        istart, iend = icord\n        if end - start < 0: return None\n        node = TreeNode(preorder[start])\n        if end - start == 0: return node\n        idx = self.find_node(preorder[start], istart, inorder)\n        pidx = idx + start - istart\n        node.left = self.helper((start+1, pidx), (istart, idx-1), preorder, inorder)\n        node.right = self.helper((pidx+1, end), (idx+1, iend), preorder, inorder)\n        return node\n    \n    def find_node(self, val, start, arr):\n        for i in range(start, len(arr)):\n            if arr[i] == val:\n                return i","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal"}