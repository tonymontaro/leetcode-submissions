{"id":417007971,"lang":"python3","time":"7 months, 3 weeks","timestamp":1604563586,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/417007971/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:\n        n = len(preorder)\n        inorderMap = {num: i for i, num in enumerate(inorder)}\n\n        def traverse(pLow, pHigh, iLow, iHigh):\n            if pLow > pHigh:\n                return None\n            node = TreeNode(preorder[pLow])\n            if pHigh - pLow == 0:\n                return node\n            mid = inorderMap[node.val]\n            pMid = pLow + (mid - iLow)\n            node.left = traverse(pLow + 1, pMid, iLow, mid - 1)\n            node.right = traverse(pMid + 1, iHigh, mid + 1, iHigh)\n            return node\n        \n        return traverse(0, len(preorder)-1, 0, len(preorder)-1)","compare_result":"11111110111110111010000101110111010000111101001100001000010000000011110111010000111101001100001000010000000011110111010000100000111010000000011000010000000010000100000000100001000000000000000000000010001","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal"}