{"id":416689999,"lang":"python3","time":"7 months, 4 weeks","timestamp":1604486244,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/416689999/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:\n        inorderMap = {num: i for i, num in enumerate(inorder)}\n\n        def traverse(low, high):\n            if low > high:\n                return None\n            val = preorder[low]\n            node = TreeNode(val)\n            mid = inorderMap[val]\n            if mid < low:\n                return node\n            node.left = traverse(low + 1, mid)\n            node.right = traverse(mid +1, high)\n            return node\n        \n        return traverse(0, len(preorder)-1)","compare_result":"11111010111110011000000001110011000000011100000000000000000000000001110011000000011100000000000000000000000001110011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal"}