{"id":410760113,"lang":"python3","time":"8 months, 2 weeks","timestamp":1603137424,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/410760113/","is_pending":"Not Pending","title":"Longest Duplicate Substring","memory":"N/A","code":"class Solution:\n    def longestDupSubstring(self, S: str) -> str:\n        # O(nlogn) time | O(n) space\n        arr = [ord(c) - ord('a') + 1 for c in S]\n        numUnique = 26\n        mod = 10**9 + 7\n        \n        lo = 2\n        hi = len(arr) - 1\n        ans = (0, 0)\n        while (lo <= hi):\n            mid = (lo + hi) // 2\n            idx = getDuplicateLastIdx(arr, mid, numUnique, mod)\n            if (idx != -1):\n                ans = (idx, mid)\n                lo = mid + 1\n            else:\n                hi = mid - 1\n        idx, ln = ans\n        return S[idx - ln + 1:idx + 1]\n        \n    \ndef getDuplicateLastIdx(arr, ln, numUnique, mod):\n    # O(n) time using rolling hash (Rabin-Karp)\n    hsh = 0\n    for i in range(ln):\n        hsh = (hsh * numUnique + arr[i]) % mod\n        # print(i, hsh)\n    seen = set()\n    seen.add(hsh)\n    startMult = pow(numUnique, ln - 1, mod)\n    n = len(arr)\n    for i in range(ln, n):\n        remove = arr[i - ln]\n        hsh = (hsh - (startMult*remove % mod) + mod) % mod\n        hsh = (hsh * numUnique + arr[i]) % mod\n        # print(i, hsh)\n        if hsh in seen:\n            return i\n        seen.add(hsh)\n    return -1","compare_result":"1111001010011110","title_slug":"longest-duplicate-substring"}