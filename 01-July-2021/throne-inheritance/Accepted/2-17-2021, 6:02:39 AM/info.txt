{"id":457042627,"lang":"python3","time":"4 months, 2 weeks","timestamp":1613538159,"status_display":"Accepted","runtime":"892 ms","url":"/submissions/detail/457042627/","is_pending":"Not Pending","title":"Throne Inheritance","memory":"74.8 MB","code":"class Node:\n    def __init__(self, name):\n        self.name = name\n        self.children = []\n        self.alive = True\n\nclass ThroneInheritance:\n\n    def __init__(self, kingName: str):\n        self.king = Node(kingName)\n        self.mp = {kingName: self.king}\n\n    def birth(self, parentName: str, childName: str) -> None:\n        node = Node(childName)\n        self.mp[parentName].children.append(node)\n        self.mp[childName] = node\n\n    def death(self, name: str) -> None:\n        self.mp[name].alive = False\n        \n\n    def getInheritanceOrder(self) -> List[str]:\n        ans = []\n        def solve(node):\n            if node.alive:\n                ans.append(node.name)\n            for child in node.children:\n                solve(child)\n        solve(self.king)\n        return ans\n\n\n# Your ThroneInheritance object will be instantiated and called as such:\n# obj = ThroneInheritance(kingName)\n# obj.birth(parentName,childName)\n# obj.death(name)\n# param_3 = obj.getInheritanceOrder()","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"throne-inheritance"}