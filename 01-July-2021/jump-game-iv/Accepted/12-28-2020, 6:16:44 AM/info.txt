{"id":435432272,"lang":"python3","time":"6Â months","timestamp":1609132604,"status_display":"Accepted","runtime":"548 ms","url":"/submissions/detail/435432272/","is_pending":"Not Pending","title":"Jump Game IV","memory":"30.8 MB","code":"from collections import defaultdict, deque\n\nclass Solution:\n    def minJumps(self, arr: List[int]) -> int:\n        # O(n) time and space\n        indices = defaultdict(list)\n        queue = deque()\n        n = len(arr)\n        for i, num in enumerate(arr):\n            indices[num].append(i)\n        \n        seen = {n-1: 0}\n        queue.append(n-1)\n        while queue:\n            idx = queue.popleft()\n            dist = seen[idx]\n            if idx == 0:\n                return dist\n            if idx > 0 and idx - 1 not in seen:\n                queue.append(idx - 1)\n                seen[idx - 1] = dist + 1\n            if idx < n - 1 and idx + 1 not in seen:\n                queue.append(idx + 1)\n                seen[idx + 1] = dist + 1\n            while indices[arr[idx]]:\n                i = indices[arr[idx]].pop()\n                if i not in seen:\n                    seen[i] = dist + 1\n                    queue.append(i)\n        ","compare_result":"1111111111111111111111111111","title_slug":"jump-game-iv"}