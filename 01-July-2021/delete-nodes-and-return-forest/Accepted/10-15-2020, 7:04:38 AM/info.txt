{"id":408947558,"lang":"python3","time":"8 months, 2 weeks","timestamp":1602741878,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/408947558/","is_pending":"Not Pending","title":"Delete Nodes And Return Forest","memory":"14.5 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def delNodes(self, root: TreeNode, to_delete: List[int]) -> List[TreeNode]:\n        self.result = []\n        self.toDelete = set(to_delete)\n        self.deleteNodes(root, False)\n        return self.result\n    \n    def deleteNodes(self, node, isParent):\n        if node is None: return node\n        if node.val not in self.toDelete:\n            if not isParent:\n                self.result.append(node)\n            node.left = self.deleteNodes(node.left, True)\n            node.right = self.deleteNodes(node.right, True)\n            return node\n        else:\n            self.deleteNodes(node.left, False)\n            self.deleteNodes(node.right, False)\n            node.right = None\n            node.left = None\n            return None\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-nodes-and-return-forest"}