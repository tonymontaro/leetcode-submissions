// https://leetcode.com/problems/shortest-unsorted-continuous-subarray

class Solution:
    def findUnsortedSubarray(self, arr) -> int:
        """O(n) time | O(1) space"""
        INF = float('inf')
        min_ = INF
        max_ = 0
        for i in range(1, len(arr)):
            if arr[i] < arr[i-1]:
                min_ = min(min_, i-1)
                max_ = max(max_, i)
        if min_ == INF:
            return 0

        max_num, min_num = -INF, INF
        for i in range(min_, max_+1):
            max_num = max(arr[i], max_num)
            min_num = min(arr[i], min_num)

        for i in range(0, len(arr)):
            if min_num < arr[i]:
                min_ = min(min_, i)
            if max_num > arr[i]:
                max_ = max(max_, i)
                
        return max_ - min_ + 1