{"id":418569959,"lang":"python3","time":"7 months, 3 weeks","timestamp":1604954468,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/418569959/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"18.3 MB","code":"class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        # O(n^3) time | O(n) space\n        self.seen = {}\n        return self.partitionHelper(s)\n    def partitionHelper(self, s):\n        if not s:\n            return [[]]\n        if s not in self.seen:\n            res = []\n            for i in range(len(s)):\n                sub = s[:i + 1]\n                if not isPalindrome(sub):\n                    continue\n                \n                other = self.partitionHelper(s[i + 1:])\n                # print(s, sub, other)\n                for ss in other:\n                    res.append([sub] + ss)\n            self.seen[s] = res\n                \n        return self.seen[s]\ncache = {}\ndef isPalindrome(s):\n    if s in cache:\n        return cache[s]\n    l = 0\n    r = len(s) - 1\n    while l < r:\n        if s[l] != s[r]:\n            cache[s] = False\n            return False\n        l += 1\n        r -= 1\n    cache[s] = True\n    return True","compare_result":"1111111111111111111111","title_slug":"palindrome-partitioning"}