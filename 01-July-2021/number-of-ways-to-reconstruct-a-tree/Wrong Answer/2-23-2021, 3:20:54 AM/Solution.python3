// https://leetcode.com/problems/number-of-ways-to-reconstruct-a-tree

from collections import defaultdict

class Solution:
    def checkWays(self, pairs: List[List[int]]) -> int:
        adj = defaultdict(set)
        for a, b in pairs:
            adj[a].add(b)
            adj[b].add(a)
        
        n = len(adj)
        rooted = False
        parents = 0
        for k in adj.keys():
            ln = len(adj[k])
            if ln == n - 1:
                rooted = True
            if ln > 1:
                parents += 1
        if not rooted:
            return 0

        return 1 if parents == 1 else 2