{"id":459483383,"lang":"python3","time":"4 months, 1 week","timestamp":1614046854,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/459483383/","is_pending":"Not Pending","title":"Number Of Ways To Reconstruct A Tree","memory":"N/A","code":"from collections import defaultdict\n\nclass Solution:\n    def checkWays(self, pairs: List[List[int]]) -> int:\n        adj = defaultdict(set)\n        for a, b in pairs:\n            adj[a].add(b)\n            adj[b].add(a)\n        \n        n = len(adj)\n        rooted = False\n        parents = 0\n        for k in adj.keys():\n            ln = len(adj[k])\n            if ln == n - 1:\n                rooted = True\n            if ln > 1:\n                parents += 1\n        if not rooted:\n            return 0\n\n        return 1 if parents == 1 else 2","compare_result":"111100110101111111110111111110110100000000000111111111110101111000000111100001010","title_slug":"number-of-ways-to-reconstruct-a-tree"}