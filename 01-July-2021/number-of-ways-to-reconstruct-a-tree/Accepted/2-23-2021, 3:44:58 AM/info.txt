{"id":459491733,"lang":"python3","time":"4 months, 1 week","timestamp":1614048298,"status_display":"Accepted","runtime":"3832 ms","url":"/submissions/detail/459491733/","is_pending":"Not Pending","title":"Number Of Ways To Reconstruct A Tree","memory":"43.7 MB","code":"from collections import defaultdict\n\nclass Solution:\n    def checkWays(self, pairs: List[List[int]]) -> int:\n        adj = defaultdict(set)\n        mx = 0\n        for a, b in pairs:\n            adj[a].add(b)\n            adj[b].add(a)\n            mx = max(mx, len(adj[a]), len(adj[b]))\n        n = len(adj)\n        if mx != n - 1:\n            return 0\n        \n        def get():\n            ans = None\n            for k in adj.keys():\n                if ans is None or len(adj[k]) > len(adj[ans]):\n                    ans = k\n            return ans\n        \n        isTwo = False\n        while len(adj) > 1:\n            nxt = get()\n            mx = len(adj[nxt])\n            group = adj[nxt]\n            group.add(nxt)\n            for item in group:\n                if item == nxt:\n                    continue\n                if adj[item].difference(group):\n                    return 0\n                if len(adj[item]) == mx:\n                    isTwo = True\n                adj[item].remove(nxt)\n            adj.pop(nxt)\n        return 2 if isTwo else 1\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-ways-to-reconstruct-a-tree"}