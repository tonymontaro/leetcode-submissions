{"id":448041995,"lang":"python3","time":"5Â months","timestamp":1611660846,"status_display":"Accepted","runtime":"836 ms","url":"/submissions/detail/448041995/","is_pending":"Not Pending","title":"Path With Minimum Effort","memory":"16.4 MB","code":"from heapq import heappush, heappop\n\nclass Solution:\n    def minimumEffortPath(self, grid: List[List[int]]) -> int:\n        rlen, clen = len(grid), len(grid[0])\n        dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        heap = [(0, 0, 0)]\n        seen = {}\n        while heap:\n            dist, row, col = heappop(heap)\n            if row == rlen-1 and col == clen-1:\n                return dist\n            for rAdd, cAdd in dirs:\n                r, c = row + rAdd, col + cAdd\n                if 0 <= r < rlen and 0 <= c < clen:\n                    d = max(dist, abs(grid[row][col] - grid[r][c]))\n                    if (r, c) not in seen or seen[(r, c)] > d:\n                        seen[(r, c)] = d\n                        heappush(heap, (d, r, c))\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-with-minimum-effort"}