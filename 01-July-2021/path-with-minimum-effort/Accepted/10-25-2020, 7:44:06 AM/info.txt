{"id":412889210,"lang":"python3","time":"8 months, 1 week","timestamp":1603608246,"status_display":"Accepted","runtime":"1280 ms","url":"/submissions/detail/412889210/","is_pending":"Not Pending","title":"Path With Minimum Effort","memory":"16.6 MB","code":"from sortedcontainers import SortedSet\nfrom math import inf\n\nclass Solution:\n    def minimumEffortPath(self, grid: List[List[int]]) -> int:\n        # O(nlogn) time | O(n) space\n        rowlen, colen = len(grid), len(grid[0])\n        end = (rowlen - 1, colen - 1)\n        seen = {}\n        path = SortedSet()\n        first = (0, 0, 0)\n        seen[(0, 0)] = 0\n\n        path.add(first)\n        neighbors = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n        while path:\n            # print(path)\n            h, r, c = path.pop(0)\n            val = grid[r][c]\n            if (r, c) == end:\n                return h\n            for rAdd, cAdd in neighbors:\n                row = r + rAdd\n                col = c + cAdd\n                isValid = 0 <= row < rowlen and 0 <= col < colen\n                if isValid:\n                    prevH = inf if (row, col) not in seen else seen[(row, col)]\n                    maxH = max(h, abs(val - grid[row][col]))\n                    if (maxH < prevH):\n                        seen[(row, col)] = maxH\n                        path.add((maxH, row, col))\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-with-minimum-effort"}