{"id":408982199,"lang":"python3","time":"8 months, 2 weeks","timestamp":1602748383,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/408982199/","is_pending":"Not Pending","title":"Find Two Non-overlapping Sub-arrays Each With Target Sum","memory":"N/A","code":"class Solution:\n    def minSumOfLengths(self, arr: List[int], target: int) -> int:\n        seen = {0: -1}\n        valid = []\n        total = 0\n        for (i, num) in enumerate(arr):\n            total += num\n            diff = total - target\n            if (diff in seen):\n                ln = i - seen[diff]\n                valid.append((seen[diff] + 1, i))\n            seen[total] = i\n        if len(valid) < 2:\n            return -1\n        \n        valid.sort(key=lambda x: x[1] - x[0])\n        best = -1\n        for j in range(len(valid)):\n            a, b = valid[j]\n            l1 = b - a + 1\n            for i in range(j + 1, len(valid)):\n                a2, b2 = valid[i]\n                if (b2 < a) or (a2 > b):\n                    val = l1 + b2 - a2 + 1\n                    # print(j, val, valid[j], valid[i])\n                    best = val if best == -1 else min(best, val)\n                    break\n        return best\n            \n        # return sum([a, b]) if (a != -1 and b != -1) else -1","compare_result":"111111111111111111111111111111111111111111111111111111111000","title_slug":"find-two-non-overlapping-sub-arrays-each-with-target-sum"}