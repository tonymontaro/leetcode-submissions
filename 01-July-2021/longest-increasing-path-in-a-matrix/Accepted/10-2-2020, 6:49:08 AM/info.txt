{"id":403403246,"lang":"java","time":"9Â months","timestamp":1601617748,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/403403246/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"39.4 MB","code":"class Solution {\n    int rowlen;\n    int colen;\n    Integer[][] dp;\n    int[][] grid;\n    int[][] adjacentGrids = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    public int longestIncreasingPath(int[][] matrix) {\n        grid = matrix;\n        if (matrix.length == 0) return 0;\n        rowlen = matrix.length;\n        colen = matrix[0].length;\n        dp = new Integer[rowlen + 1][colen + 1];\n        int ans = 0;\n        for (int r = 0; r < rowlen; r++) {\n            for (int c = 0; c < colen; c++) ans = Math.max(ans, calc(r, c));\n        }\n        return ans;\n    }\n    int calc(int r, int c) {\n        if (dp[r][c] == null) {\n            int num = grid[r][c];\n            int ans = 1;\n            for (int[] ag : adjacentGrids) {\n                int rr = r + ag[0];\n                int cc = c + ag[1];\n                if (isInArea(rr, cc) && grid[rr][cc] > num)\n                    ans = Math.max(ans, 1 + calc(rr, cc));\n            }\n            dp[r][c] = ans;\n        }\n        return dp[r][c];\n    }\n    boolean isInArea(int r, int c){\n        if(r<0) return false;\n        if(c<0) return false;\n        if(r>=rowlen) return false;\n        if(c>=colen) return false;\n        return true;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix"}