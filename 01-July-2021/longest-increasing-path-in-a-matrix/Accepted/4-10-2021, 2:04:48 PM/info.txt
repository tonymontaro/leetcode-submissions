{"id":478863465,"lang":"cpp","time":"2 months, 3 weeks","timestamp":1618059888,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/478863465/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"18.9 MB","code":"#define pi pair<int, int>\n#define v vector\n\n\nint cache[200][200];\nint grid[200][200];\n\nbool compare(pi a, pi b) {\n    return grid[a.first][a.second] > grid[b.first][b.second];\n}\n\nclass Solution {\npublic:\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        memset(cache, 0, sizeof(cache));\n        int rlen = matrix.size(), clen = matrix[0].size();\n        v<pi> points;\n        for (int r = 0; r < rlen; r++) {\n            for (int c = 0; c < clen; c++) {\n                points.push_back({r, c});\n                grid[r][c] = matrix[r][c];\n            }\n        }\n        sort(points.begin(), points.end(), compare);\n        v<pi> dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        int ans = 0;\n        for (auto [row, col]: points) {\n            int res = 1;\n            int val = grid[row][col];\n            for (auto [rAdd, cAdd]: dirs) {\n                int r = row + rAdd, c = col + cAdd;\n                if (r < 0 || r >= rlen || c < 0 || c >= clen || val >= grid[r][c]) continue;\n                res = max(res, 1 + cache[r][c]);\n            }\n            cache[row][col] = res;\n            ans = max(ans, res);\n        }\n\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix"}