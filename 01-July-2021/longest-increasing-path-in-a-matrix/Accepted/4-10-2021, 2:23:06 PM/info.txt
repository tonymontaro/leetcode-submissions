{"id":478867874,"lang":"cpp","time":"2 months, 3 weeks","timestamp":1618060986,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/478867874/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"15.8 MB","code":"#define pi pair<int, int>\n#define v vector\n\n\nclass Solution {\npublic:\n    int cache[200][200];\n    int rlen, clen;\n    v<pi> dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        memset(cache, 0, sizeof(cache));\n        rlen = matrix.size(), clen = matrix[0].size();\n        int ans = 0;\n        for (int r = 0; r < rlen; r++) {\n            for (int c = 0; c < clen; ++c) {\n                ans = max(ans, solve(r, c, matrix));\n            }\n        }\n        return ans;\n    }\n    int solve(int row, int col, v<v<int>> &matrix) {\n        if (cache[row][col] != 0) return cache[row][col];\n        int res = 1;\n        int val = matrix[row][col];\n        for (auto [rAdd, cAdd]: dirs) {\n            int r = row + rAdd, c = col + cAdd;\n            if (r < 0 || r >= rlen || c < 0 || c >= clen || val >= matrix[r][c]) continue;\n            res = max(res, 1 + solve(r, c, matrix));\n        }\n        cache[row][col] = res;\n        return res;\n    }\n};\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix"}