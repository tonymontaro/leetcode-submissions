{"id":414165692,"lang":"python3","time":"8Â months","timestamp":1603894751,"status_display":"Accepted","runtime":"556 ms","url":"/submissions/detail/414165692/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"15.8 MB","code":"class Solution:\n    def longestIncreasingPath(self, grid: List[List[int]]) -> int:\n        # O(n*m) time and space\n        if len(grid) == 0 or len(grid[0]) == 0:\n            return 0\n        self.grid = grid\n        self.cache = {}\n        self.neighbors = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        result = 0\n        for r in range(len(self.grid)):\n            for c in range(len(self.grid[0])):\n                result = max(result, self.dfs(r, c))\n        return result\n    def dfs(self, row, col):\n        if (row, col) not in self.cache:\n            val = self.grid[row][col]\n            best = 0\n            for nRow, nCol in self.neighbors:\n                r, c = row + nRow, col + nCol\n                isValid = 0 <= r < len(self.grid) and 0 <= c < len(self.grid[0])\n                isValid = isValid and self.grid[r][c] > val\n                if isValid:\n                    best = max(best, self.dfs(r, c))\n            self.cache[(row, col)] = 1 + best\n        return self.cache[(row, col)]\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix"}