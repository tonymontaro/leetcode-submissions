{"id":509423809,"lang":"cpp","time":"1 week, 6 days","timestamp":1623964480,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/509423809/","is_pending":"Not Pending","title":"Number of Subarrays with Bounded Maximum","memory":"N/A","code":"#define pi pair<int, int>\n\nclass Solution {\npublic:\n    int numSubarrayBoundedMax(vector<int>& nums, int left, int right) {\n        int ans = 0, n = nums.size(), remove = 0;\n        vector<pi> seen;\n        vector<int> l(n);\n        vector<int> r(n);\n        for (int i = 0; i < nums.size(); i++) {\n            int idx = i;\n            while (!seen.empty() && nums[i] >= seen.back().first) {\n                idx = seen.back().second;\n                seen.pop_back();\n            }\n            l[i] = idx;\n            seen.emplace_back(nums[i], idx);\n        }\n        seen.clear();\n        for (int i = n - 1; i >= 0; --i) {\n            int idx = i;\n            int le = i - l[i] + 1;\n            while (!seen.empty() && nums[i] >= nums[seen.back().first]) {\n                int j = seen.back().first;\n                if (nums[i] == nums[j]) remove += le * (r[j] - j + 1);\n                idx = seen.back().second;\n                seen.pop_back();\n            }\n            r[i] = idx;\n            if (left <= nums[i] && nums[i] <= right) ans += (idx - i + 1) * le;\n            seen.emplace_back(i, idx);\n        }\n        return ans - remove;\n    }\n};","compare_result":"1101110111111010111011111000111011101000000","title_slug":"number-of-subarrays-with-bounded-maximum"}