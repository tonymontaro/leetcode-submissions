{"id":509390840,"lang":"cpp","time":"1 week, 6 days","timestamp":1623958253,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/509390840/","is_pending":"Not Pending","title":"Number of Subarrays with Bounded Maximum","memory":"N/A","code":"#define pi pair<int, int>\n\nclass Solution {\npublic:\n    int numSubarrayBoundedMax(vector<int>& nums, int left, int right) {\n        int ans = 0, n = nums.size();\n        vector<pi> seen;\n        for (int i = 0; i < nums.size(); i++) {\n            int idx = i;\n            while (!seen.empty() && nums[i] >= seen.back().first) {\n                idx = seen.back().second;\n                seen.pop_back();\n            }\n            if (left <= nums[i] && nums[i] <= right) ans += i - idx + 1;\n            seen.emplace_back(nums[i], idx);\n        }\n        seen.clear();\n        for (int i = n - 1; i >= 0; --i) {\n            int idx = i;\n            while (!seen.empty() && nums[i] > seen.back().first) {\n                idx = seen.back().second;\n                seen.pop_back();\n            }\n            if (left <= nums[i] && nums[i] <= right) ans += idx - i;\n            seen.emplace_back(nums[i], idx);\n        } \n        return ans;\n    }\n};","compare_result":"1110110000000000000000000000000000000000000","title_slug":"number-of-subarrays-with-bounded-maximum"}