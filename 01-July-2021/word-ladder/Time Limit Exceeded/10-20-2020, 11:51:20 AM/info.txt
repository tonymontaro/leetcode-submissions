{"id":411023984,"lang":"python3","time":"8 months, 1 week","timestamp":1603191080,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/411023984/","is_pending":"Not Pending","title":"Word Ladder","memory":"N/A","code":"from collections import defaultdict, deque\n\nclass Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        # O(n^2) generate graph, O(n) bfs. O(n) space\n        if endWord not in wordList:\n            return 0\n        if beginWord not in wordList:\n            wordList.append(beginWord)\n        adj = defaultdict(list)\n        n = len(wordList)\n        for i in range(n):\n            for j in range(i + 1, n):\n                w1, w2 = wordList[i], wordList[j]\n                if isEdge(w1, w2):\n                    adj[w1].append(w2)\n                    adj[w2].append(w1)\n        \n        seen = set()\n        deq = deque()\n        deq.append((beginWord, 1))\n        seen.add(beginWord)\n        while deq:\n            w, dist = deq.popleft()\n            if w == endWord:\n                return dist\n            for child in adj[w]:\n                if child not in seen:\n                    seen.add(child)\n                    deq.append((child, dist + 1))\n        return 0\n\ndef isEdge(w1, w2):\n    return sum(x == y for x, y in zip(w1, w2)) == (len(w1) - 1)\n        ","compare_result":"1111111111111111111111111111111110000000000","title_slug":"word-ladder"}