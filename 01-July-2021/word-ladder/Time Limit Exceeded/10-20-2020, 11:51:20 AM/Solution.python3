// https://leetcode.com/problems/word-ladder

from collections import defaultdict, deque

class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        # O(n^2) generate graph, O(n) bfs. O(n) space
        if endWord not in wordList:
            return 0
        if beginWord not in wordList:
            wordList.append(beginWord)
        adj = defaultdict(list)
        n = len(wordList)
        for i in range(n):
            for j in range(i + 1, n):
                w1, w2 = wordList[i], wordList[j]
                if isEdge(w1, w2):
                    adj[w1].append(w2)
                    adj[w2].append(w1)
        
        seen = set()
        deq = deque()
        deq.append((beginWord, 1))
        seen.add(beginWord)
        while deq:
            w, dist = deq.popleft()
            if w == endWord:
                return dist
            for child in adj[w]:
                if child not in seen:
                    seen.add(child)
                    deq.append((child, dist + 1))
        return 0

def isEdge(w1, w2):
    return sum(x == y for x, y in zip(w1, w2)) == (len(w1) - 1)
        