// https://leetcode.com/problems/word-ladder

from collections import defaultdict, deque
from string import ascii_lowercase

class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        #O(n * w) bfs. O(n) space
        if endWord not in wordList:
            return 0
        if beginWord not in wordList:
            wordList.append(beginWord)
        wordList = set(wordList)
        
        def getChildren(w):
            words = []
            res = []
            for i in range(len(w)):
                od = w[i]
                prefix = w[:i]
                suffix = w[i + 1:]
                for c in ascii_lowercase:
                    if od != c:
                        words.append(prefix + c + suffix)
            for word in words:
                if word in wordList:
                    res.append(word)
            # print(w, res, words)
            return res
        
        seen = set()
        deq = deque()
        deq.append((beginWord, 1))
        seen.add(beginWord)
        while deq:
            w, dist = deq.popleft()
            if w == endWord:
                return dist
            for child in getChildren(w):
                if child not in seen:
                    seen.add(child)
                    deq.append((child, dist + 1))
        return 0

        