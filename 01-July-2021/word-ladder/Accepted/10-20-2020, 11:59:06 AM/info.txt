{"id":411025465,"lang":"python3","time":"8 months, 1 week","timestamp":1603191546,"status_display":"Accepted","runtime":"584 ms","url":"/submissions/detail/411025465/","is_pending":"Not Pending","title":"Word Ladder","memory":"15 MB","code":"from collections import defaultdict, deque\nfrom string import ascii_lowercase\n\nclass Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        #O(n * w) bfs. O(n) space\n        if endWord not in wordList:\n            return 0\n        if beginWord not in wordList:\n            wordList.append(beginWord)\n        wordList = set(wordList)\n        \n        def getChildren(w):\n            words = []\n            res = []\n            for i in range(len(w)):\n                od = w[i]\n                for c in ascii_lowercase:\n                    if od != c:\n                        words.append(w[:i] + c + w[i + 1:])\n            for word in words:\n                if word in wordList:\n                    res.append(word)\n            # print(w, res, words)\n            return res\n        \n        seen = set()\n        deq = deque()\n        deq.append((beginWord, 1))\n        seen.add(beginWord)\n        while deq:\n            w, dist = deq.popleft()\n            if w == endWord:\n                return dist\n            for child in getChildren(w):\n                if child not in seen:\n                    seen.add(child)\n                    deq.append((child, dist + 1))\n        return 0\n\n        ","compare_result":"1111111111111111111111111111111111111111111","title_slug":"word-ladder"}