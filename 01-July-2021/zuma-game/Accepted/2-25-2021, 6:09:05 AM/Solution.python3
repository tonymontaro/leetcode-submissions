// https://leetcode.com/problems/zuma-game

from math import inf
from collections import Counter
from functools import lru_cache

class Solution:
    def findMinStep(self, board: str, hand: str) -> int:
        
        def process(arr):
            res = []
            for x in arr:
                if res and res[-1][0] == x[0]:
                    res[-1][1] += x[1]
                else:
                    res.append(list(x))
                if res[-1][1] >= 3:
                    res.pop()
            return res

        @lru_cache(None)
        def solve(s, hand):
            # print(s)
            arr = []
            left = 0
            for i in range(1, len(s)):
                if s[i] != s[i-1]:
                    if i - left < 3:
                        arr.append([s[left], i - left])
                    left = i
            if len(s) - left < 3:
                arr.append([s[left], len(s) - left])
            arr = process(arr)
            if not arr:
                return 0
        
            ss = "".join([x[0] * x[1] for x in arr])
            ans = inf
            seen = {}
            n = len(s)
            for i, c in enumerate(hand):
                if c in seen:
                    continue
                seen[c] = 1
                h = hand[:i] + hand[i+1:]
                for j in range(n):
                    ns = s[:j] + c + s[j:]
                    ans = min(ans, 1 + solve(ns, h))
            return ans
        
        rs = solve(board, hand)
        return rs if rs != inf else -1