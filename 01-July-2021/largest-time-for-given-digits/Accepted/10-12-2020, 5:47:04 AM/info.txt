{"id":407639098,"lang":"java","time":"8 months, 3 weeks","timestamp":1602478024,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/407639098/","is_pending":"Not Pending","title":"Largest Time for Given Digits","memory":"36.9 MB","code":"class Solution {\n    public String largestTimeFromDigits(int[] arr) {\n        Integer best = null;\n        Integer A = null;\n        Integer B = null;\n        int last = 23 * 60 + 59;\n        for (int i = 0; i < 4; i++) {\n            for (int j = 0; j < 4; j++) {\n                if (j == i) continue;\n                for (int k = 0; k < 4; k++) {\n                    if (k == i || k == j) continue;\n                    for (int l = 0; l < 4; l++) {\n                        if (l == i || l == j || l == k) continue;\n                        int a = arr[i] * 10 + arr[j];\n                        int b = arr[k] * 10 + arr[l];\n                        if (a >= 24 || b >= 60) continue;\n                        int time = 60 * (a) + (b);\n                        if (time <= last && (best == null || time > best)) {\n                            best = time;\n                            A = a;\n                            B = b;\n                        }\n                    }\n                }\n            }\n        }\n        if (best == null) return \"\";\n\n        return String.format(\"%02d:%02d\", A, B);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-time-for-given-digits"}