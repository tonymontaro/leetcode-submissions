{"id":412151704,"lang":"python3","time":"8Â months, 1Â week","timestamp":1603431505,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/412151704/","is_pending":"Not Pending","title":"Largest Number","memory":"N/A","code":"from functools import cmp_to_key\n\nclass Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        def compare(a, b):\n            n = min(len(a), len(b))\n            for i in range(1, n):\n                if a[i] > b[i]:\n                    return -1\n                if a[i] < b[i]:\n                    return 1\n            if len(a) == len(b):\n                return 0\n            \n            smaller = a if len(a) == n else b\n            bigger = a if len(a) != n else b\n            ans = \"\"\n            if bigger[n] > smaller[1]:\n                ans = \"b\"\n            elif smaller[1] > bigger[n]:\n                ans = \"s\"\n            else:\n                for i in range(1, n):\n                    if smaller[i] > bigger[i + 1]:\n                        ans = \"b\"\n                        break\n                    if smaller[i] < bigger[i + 1]:\n                        ans = \"s\"\n                        break\n            \n            # print(a, b, ans)\n            if ans == \"s\":\n                return -1 if len(a) == n else 1\n            elif ans == \"b\":\n                return 1 if len(a) == n else -1\n            return 0\n        \n        arr = []\n        for num in nums:\n            if num == 0:\n                arr.append([0, 0])\n                continue\n            rs = []\n            prv = num\n            while num > 0:\n                rs.append(num % 10)\n                num //= 10\n            rs.append(prv)\n            arr.append(rs[::-1])\n        # print(arr)\n        ans = sorted(arr, key=cmp_to_key(compare))\n        # print(ans)\n        return \"\".join(str(a[0]) for a in ans)\n","compare_result":"11111111111111111111111111111111111111111111111111010110011111111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-number"}