{"id":453571517,"lang":"python3","time":"4 months, 3 weeks","timestamp":1612776105,"status_display":"Accepted","runtime":"116 ms","url":"/submissions/detail/453571517/","is_pending":"Not Pending","title":"Coin Path","memory":"14.7 MB","code":"from math import inf\n\nclass Solution:\n    def cheapestJump(self, arr: List[int], k: int) -> List[int]:\n        if not arr or arr[-1] == -1 or arr[0] == -1:\n            return []\n        \n        n = len(arr)\n        dp = [[inf, -2] for _ in range(n)]\n        dp[-1] = [arr[n - 1], -1]\n        for i in range(n-2, -1, -1):\n            if arr[i] == -1:\n                continue\n            \n            best = [inf, -2]\n            for j in range(i+1, min(i + k + 1, n)):\n                if arr[j] == -1:\n                    continue\n                if dp[j][0] < best[0]:\n                    best = [dp[j][0], j]\n            if best[1] == -2:\n                return []\n\n            dp[i] = [best[0] + arr[i], best[1]]\n\n        ans = [1]\n        while dp[ans[-1]-1][1] != -1:\n            ans.append(dp[ans[-1]-1][1] + 1)\n        return ans\n        \n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"coin-path"}