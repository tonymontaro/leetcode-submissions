// https://leetcode.com/problems/coin-path

from math import inf

class Solution:
    def cheapestJump(self, arr: List[int], k: int) -> List[int]:
        if not arr or arr[-1] == -1 or arr[0] == -1:
            return []
        
        n = len(arr)
        dp = [[inf, -2] for _ in range(n)]
        dp[-1] = [arr[n - 1], -1]
        for i in range(n-2, -1, -1):
            if arr[i] == -1:
                continue
            
            best = [inf, -2]
            for j in range(i+1, min(i + k + 1, n)):
                if arr[j] == -1:
                    continue
                if dp[j][0] < best[0]:
                    best = [dp[j][0], j]
            if best[1] == -2:
                return []

            dp[i] = [best[0] + arr[i], best[1]]

        ans = [1]
        while dp[ans[-1]-1][1] != -1:
            ans.append(dp[ans[-1]-1][1] + 1)
        return ans
        
        