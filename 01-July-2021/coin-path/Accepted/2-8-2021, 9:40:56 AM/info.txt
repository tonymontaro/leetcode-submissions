{"id":453561478,"lang":"python3","time":"4 months, 3 weeks","timestamp":1612773656,"status_display":"Accepted","runtime":"168 ms","url":"/submissions/detail/453561478/","is_pending":"Not Pending","title":"Coin Path","memory":"15.1 MB","code":"from math import inf\n\nclass Solution:\n    def cheapestJump(self, arr: List[int], k: int) -> List[int]:\n        if not arr or arr[-1] == -1 or arr[0] == -1:\n            return []\n        dp = [(arr[0], [1])]\n        n = len(arr)\n        for i in range(1, n):\n            if arr[i] == -1:\n                dp.append((inf, -1))\n                continue\n            best = [inf, []]\n            for j in range(max(0, i - k), i):\n                if dp[j][0] == inf:\n                    continue\n                if dp[j][0] < best[0]:\n                    best[1] = dp[j][1] + [i + 1]\n                    best[0] = dp[j][0]\n                elif dp[j][0] == best[0] and dp[j][1] + [i + 1] < best[1]:\n                    best[1] = dp[j][1] + [i + 1]\n\n            if best[1] == []:\n                return []\n            dp.append((best[0] + arr[i], best[1]))\n\n        return dp[-1][1]\n\n                    ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"coin-path"}