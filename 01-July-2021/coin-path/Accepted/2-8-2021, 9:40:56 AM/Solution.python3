// https://leetcode.com/problems/coin-path

from math import inf

class Solution:
    def cheapestJump(self, arr: List[int], k: int) -> List[int]:
        if not arr or arr[-1] == -1 or arr[0] == -1:
            return []
        dp = [(arr[0], [1])]
        n = len(arr)
        for i in range(1, n):
            if arr[i] == -1:
                dp.append((inf, -1))
                continue
            best = [inf, []]
            for j in range(max(0, i - k), i):
                if dp[j][0] == inf:
                    continue
                if dp[j][0] < best[0]:
                    best[1] = dp[j][1] + [i + 1]
                    best[0] = dp[j][0]
                elif dp[j][0] == best[0] and dp[j][1] + [i + 1] < best[1]:
                    best[1] = dp[j][1] + [i + 1]

            if best[1] == []:
                return []
            dp.append((best[0] + arr[i], best[1]))

        return dp[-1][1]

                    