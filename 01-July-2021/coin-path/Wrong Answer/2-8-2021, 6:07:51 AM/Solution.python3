// https://leetcode.com/problems/coin-path

from math import inf

class Solution:
    def cheapestJump(self, arr: List[int], k: int) -> List[int]:
        if arr[-1] == -1 or arr[0] == -1:
            return []
        dp = [(arr[0], -1)]
        n = len(arr)
        for i in range(1, n):
            if arr[i] == -1:
                dp.append((inf, -1))
                continue
            best = (inf, -1, -2)
            for j in range(max(0, i - k), i):
                if dp[j][0] != inf and (dp[j][0] < best[0] or (dp[j][0] == best[0] and dp[j][1] < best[2])):
                    best = (dp[j][0], j, dp[j][1])
            if best[1] == -1:
                return []
            dp.append((best[0] + arr[i], best[1]))
        ans = []
        prev = n - 1
        while dp[prev][1] != -1:
            ans.append(prev + 1)
            prev = dp[prev][1]
        ans.append(1)
        return ans[::-1]

                    