{"id":453493744,"lang":"python3","time":"4 months, 3 weeks","timestamp":1612760871,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/453493744/","is_pending":"Not Pending","title":"Coin Path","memory":"N/A","code":"from math import inf\n\nclass Solution:\n    def cheapestJump(self, arr: List[int], k: int) -> List[int]:\n        if arr[-1] == -1 or arr[0] == -1:\n            return []\n        dp = [(arr[0], -1)]\n        n = len(arr)\n        for i in range(1, n):\n            if arr[i] == -1:\n                dp.append((inf, -1))\n                continue\n            best = (inf, -1, -2)\n            for j in range(max(0, i - k), i):\n                if dp[j][0] != inf and (dp[j][0] < best[0] or (dp[j][0] == best[0] and dp[j][1] < best[2])):\n                    best = (dp[j][0], j, dp[j][1])\n            if best[1] == -1:\n                return []\n            dp.append((best[0] + arr[i], best[1]))\n        ans = []\n        prev = n - 1\n        while dp[prev][1] != -1:\n            ans.append(prev + 1)\n            prev = dp[prev][1]\n        ans.append(1)\n        return ans[::-1]\n\n                    ","compare_result":"1101000111101111111110111110111111111010101110110111111111111001100101011111010111111010101010011101110111110001111101011011100111110111111111101111011100111111111101111110111110111111111011111111101111111110111111100000001000","title_slug":"coin-path"}