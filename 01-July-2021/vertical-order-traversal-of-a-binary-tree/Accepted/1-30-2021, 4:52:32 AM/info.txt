{"id":449562064,"lang":"python3","time":"5Â months","timestamp":1611978752,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/449562064/","is_pending":"Not Pending","title":"Vertical Order Traversal of a Binary Tree","memory":"14.6 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import defaultdict as dd\n\nclass Solution:\n    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:\n        cols = dd(list)\n\n        def dfs(node, depth, col):\n            if node is None:\n                return\n            cols[col].append((depth, node.val))\n            dfs(node.left, depth+1, col-1)\n            dfs(node.right, depth+1, col+1)\n        \n        dfs(root, 0, 0)\n        keys = sorted(cols.keys())\n        ans = []\n        for k in keys:\n            ans.append([x[1] for x in sorted(cols[k])])\n        return ans","compare_result":"11111111111111111111111111111111","title_slug":"vertical-order-traversal-of-a-binary-tree"}