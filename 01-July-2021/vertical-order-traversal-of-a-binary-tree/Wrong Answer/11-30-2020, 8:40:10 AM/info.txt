{"id":425656605,"lang":"python3","time":"7Â months","timestamp":1606722010,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/425656605/","is_pending":"Not Pending","title":"Vertical Order Traversal of a Binary Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import defaultdict\n\nclass Solution:\n    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:\n        verticals = defaultdict(list)\n\n        def traverse(node, loc):\n            if not node:\n                return \n            \n            verticals[loc].append(node.val)\n            traverse(node.left, loc - 1)\n            traverse(node.right, loc + 1)\n        \n        traverse(root, 0)\n        keys = sorted(verticals.keys())\n        return [verticals[k] for k in keys]","compare_result":"111111111011000000000000000000","title_slug":"vertical-order-traversal-of-a-binary-tree"}