{"id":473511980,"lang":"cpp","time":"3Â months","timestamp":1616952065,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/473511980/","is_pending":"Not Pending","title":"Freedom Trail","memory":"7.6 MB","code":"#define v vector\n\nclass Solution {\npublic:\n    int findRotateSteps(string ring, string key) {\n        map<char, v<int>> chs;\n        int n = ring.size();\n        for (int i = 0; i < ring.size(); i++) chs[ring[i]].push_back(i);\n        priority_queue<pair<int, pair<int, int>>, v<pair<int, pair<int, int>>>, greater<>> pq; // dist, key[idx]\n        int seen[100][100];\n        for (int i = 0; i < 100; i++)\n            for (int j = 0; j < 100; j++) seen[i][j] = INT_MAX;\n\n        for (int idx: chs[key[0]]) {\n            int dist = min(idx, n - idx) + 1;\n            pq.push({dist, {idx, 0}});\n            seen[idx][0] = dist;\n        }\n        while (!pq.empty()) {\n            auto node = pq.top();\n            pq.pop();\n            int dist = node.first, ridx = node.second.first, kidx = node.second.second;\n\n            if (kidx == key.size() - 1) return dist;\n            for (int idx: chs[key[kidx + 1]]) {\n\n                int nextDist = 1 + dist + min(abs(idx - ridx), min(ridx + n - idx, n - ridx + idx));\n                if (nextDist < seen[idx][kidx + 1]) {\n                    seen[idx][kidx + 1] = nextDist;\n                    pq.push({nextDist, {idx, kidx + 1}});\n                }\n            }\n        }\n        return 0;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"freedom-trail"}