{"id":414100710,"lang":"python3","time":"8Â months","timestamp":1603874389,"status_display":"Accepted","runtime":"68 ms","url":"/submissions/detail/414100710/","is_pending":"Not Pending","title":"Count Complete Tree Nodes","memory":"21.3 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def countNodes(self, root: TreeNode) -> int:\n        # O(d*long(2^d)) -> O(d^2) time and O(1) space (minus recursive stack)\n        if not root:\n            return 0\n\n        def getDepth(node):\n            depth = 0\n            while node.left:\n                depth += 1\n                node = node.left\n            return depth\n\n        def isValidNode(node, mid, total):\n            if total == 1:\n                return node is not None\n            half = total // 2\n            if mid <= half:\n                return isValidNode(node.left, mid, half)\n            return isValidNode(node.right, mid - half, half)\n\n        d = getDepth(root)\n        total = 2**d\n        lo = 1\n        hi = total\n        valid = 1\n        while lo <= hi:\n            mid = (lo + hi) // 2\n            if isValidNode(root, mid, total):\n                valid = mid\n                lo = mid + 1\n            else:\n                hi = mid - 1\n        result = 0\n        for i in range(d):\n            result += 2**i\n\n        return result + valid\n        \n        \n    ","compare_result":"111111111111111111","title_slug":"count-complete-tree-nodes"}