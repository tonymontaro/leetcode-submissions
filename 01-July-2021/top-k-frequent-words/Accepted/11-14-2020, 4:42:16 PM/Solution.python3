// https://leetcode.com/problems/top-k-frequent-words

from collections import Counter

class Node:
    def __init__(self, word, cnt):
        self.word = word
        self.cnt = cnt
    
    def __eq__(self, other):
        return self.word == other.word and self.cnt == other.cnt
    
    def __gt__(self, other):
        if self.cnt == other.cnt:
            return self.word < other.word
        return self.cnt > other.cnt

import heapq

class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        # O(nlogk) time | O(k) space
        count = Counter(words)
        heap = []
        for word, cnt in count.items():
            node = Node(word, cnt)
            if len(heap) < k:
                heapq.heappush(heap, node)
            else:
                heapq.heappushpop(heap, node)

        result = []
        while heap:
            result.append(heapq.heappop(heap).word)
        return result[::-1]