{"id":413743731,"lang":"python3","time":"8Â months","timestamp":1603800060,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/413743731/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"17 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: ListNode) -> ListNode:\n        # O(n) time  |  O(1) space\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if fast == slow:\n                break\n        if not fast or not fast.next:\n            return None\n        slow = head\n        while slow != fast:\n            slow = slow.next\n            fast = fast.next\n        return slow","compare_result":"1111111111111111","title_slug":"linked-list-cycle-ii"}