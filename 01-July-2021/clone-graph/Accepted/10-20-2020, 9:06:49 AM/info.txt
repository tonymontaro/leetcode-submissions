{"id":410990653,"lang":"python3","time":"8 months, 1 week","timestamp":1603181209,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/410990653/","is_pending":"Not Pending","title":"Clone Graph","memory":"14.3 MB","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\"\"\"\n\nclass Solution:\n    def cloneGraph(self, node: 'Node') -> 'Node':\n        if not node: return node\n        nodes = {}\n        nodes[node.val] = root = Node(node.val)\n        \n        stack = [node]\n        while stack:\n            oldNode = stack.pop()\n            node = nodes[oldNode.val]\n            for childNode in oldNode.neighbors:\n                child = childNode.val\n                if child not in nodes:\n                    nodes[child] = Node(child)\n                    stack.append(childNode)\n                node.neighbors.append(nodes[child])\n        return root\n            \n        ","compare_result":"1111111111111111111111","title_slug":"clone-graph"}