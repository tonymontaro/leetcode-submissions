{"id":414627911,"lang":"python3","time":"8Â months","timestamp":1603997617,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/414627911/","is_pending":"Not Pending","title":"Encode N-ary Tree to Binary Tree","memory":"N/A","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\"\"\"\nfrom collections import deque\n\nclass Codec:\n    # Encodes an n-ary tree to a binary tree.\n    def encode(self, root: 'Node') -> TreeNode:\n        head = TreeNode(root.val)\n        head.parent = None\n        addLeftRight = deque([(head, root)])\n        children = deque()\n        while addLeftRight:\n            node, original = addLeftRight.popleft()\n            for child in original.children:\n                childNode = TreeNode(child.val)\n                childNode.parent = node\n                children.append((childNode, child))\n            if children:\n                childNode, child = children.popleft()\n                node.left = childNode\n                addLeftRight.append((childNode, child))\n            if children:\n                childNode, child = children.popleft()\n                node.right = childNode\n                addLeftRight.append((childNode, child))\n        # print(head.left.parent)\n        return head\n\t\n\t# Decodes your binary tree to an n-ary tree.\n    def decode(self, data: TreeNode) -> 'Node':\n        nodes = {}\n        queue = deque([data])\n        while queue:\n            node = queue.popleft()\n            newNode = Node(node.val, [])\n            nodes[node] = newNode\n            if node.parent:\n                nodes[node.parent].children.append(newNode)\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        return nodes[data]\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.decode(codec.encode(root))","compare_result":"1100000000000000000000000000000000000","title_slug":"encode-n-ary-tree-to-binary-tree"}