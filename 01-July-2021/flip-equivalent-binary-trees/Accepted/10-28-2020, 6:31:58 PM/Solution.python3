// https://leetcode.com/problems/flip-equivalent-binary-trees

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def flipEquiv(self, node1: TreeNode, node2: TreeNode) -> bool:
        # O(n) time | O(h) space | h -> height of tree
        if (node1 is None or node2 is None): return node1 == node2
        if (node1.val != node2.val): return False
        if node1.left:
            shouldFlip = node2.left is None or node2.left.val != node1.left.val
        else:
            shouldFlip = node2.left is not None
        if shouldFlip:
            flip(node1)
        return self.flipEquiv(node1.left, node2.left) and self.flipEquiv(node1.right, node2.right)
        
        
        
def flip(node):
    node.left, node.right = node.right, node.left
