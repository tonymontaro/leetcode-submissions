{"id":414220292,"lang":"python3","time":"8Â months","timestamp":1603906318,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/414220292/","is_pending":"Not Pending","title":"Flip Equivalent Binary Trees","memory":"14.2 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def flipEquiv(self, node1: TreeNode, node2: TreeNode) -> bool:\n        # O(n) time | O(h) space | h -> height of tree\n        if (node1 is None or node2 is None): return node1 == node2\n        if (node1.val != node2.val): return False\n        if node1.left:\n            shouldFlip = node2.left is None or node2.left.val != node1.left.val\n        else:\n            shouldFlip = node2.left is not None\n        if shouldFlip:\n            flip(node1)\n        return self.flipEquiv(node1.left, node2.left) and self.flipEquiv(node1.right, node2.right)\n        \n        \n        \ndef flip(node):\n    node.left, node.right = node.right, node.left\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flip-equivalent-binary-trees"}