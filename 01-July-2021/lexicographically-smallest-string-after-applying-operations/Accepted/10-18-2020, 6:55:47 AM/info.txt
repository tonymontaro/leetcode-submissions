{"id":410134017,"lang":"python3","time":"8Â months, 2Â weeks","timestamp":1603000547,"status_display":"Accepted","runtime":"4716 ms","url":"/submissions/detail/410134017/","is_pending":"Not Pending","title":"Lexicographically Smallest String After Applying Operations","memory":"39.8 MB","code":"class Solution:\n    def findLexSmallestString(self, s: str, a: int, b: int) -> str:\n        self.seen = set()\n        self.ans = None\n        self.stored = \"\"\n        self.dfs([int(i) for i in s], a, b)\n        return self.stored\n    def dfs(self, arr, a, b):\n        rep = getRep(arr)\n        if rep in self.seen: return\n        num = getNum(arr)\n        # print(rep, num)\n        if self.ans is None or num < self.ans:\n            self.ans = num\n            self.stored = rep\n        self.seen.add(rep)\n        rotated = rotate(list(arr), b)\n        added = add(list(arr), a)\n        # print(rep, getRep(added), getRep(rotated))\n        self.dfs(added, a, b)\n        self.dfs(rotate(list(arr), b), a, b)\n\n            \ndef getRep(nums):\n    return \"\".join([str(i) for i in nums])\ndef getNum(arr):\n    ans = 0\n    for num in arr:\n        ans = ans * 10 + num\n    return ans\n\ndef add(arr, a):\n    for i in range(1, len(arr), 2):\n        arr[i] = (arr[i] + a) % 10\n    return arr\ndef rotate(nums, k: int) -> None:\n    n = len(nums)\n    k = k % n\n    reverse(nums, 0, n - 1)\n    reverse(nums, 0, k - 1)\n    reverse(nums, k, n - 1)\n    return nums\n        \ndef reverse(arr, start, end):\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"lexicographically-smallest-string-after-applying-operations"}