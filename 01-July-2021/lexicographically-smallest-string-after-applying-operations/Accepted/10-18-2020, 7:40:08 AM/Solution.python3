// https://leetcode.com/problems/lexicographically-smallest-string-after-applying-operations

class Solution:
    def findLexSmallestString(self, s: str, a: int, b: int) -> str:
        b = b % len(s)
        stack = [s]
        seen = {s}
        ans = int(s)
        repAns = s
        while stack:
            rep = stack.pop()
            num = int(rep)
            if num < ans:
                ans = num
                repAns = rep
            added = add(rep, a)
            if added not in seen:
                seen.add(added)
                stack.append(added)
            rotated = rep[-b:] + rep[:-b]
            if rotated not in seen:
                seen.add(rotated)
                stack.append(rotated)
        return repAns

def add(s, a):
    arr = [int(i) for i in s]
    for i in range(1, len(arr), 2):
        arr[i] = (arr[i] + a) % 10
    return "".join(map(str, arr))
