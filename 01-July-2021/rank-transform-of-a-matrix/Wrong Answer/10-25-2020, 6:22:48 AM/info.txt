{"id":412866788,"lang":"java","time":"8 months, 1 week","timestamp":1603603368,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/412866788/","is_pending":"Not Pending","title":"Rank Transform of a Matrix","memory":"N/A","code":"class Solution {\n    HashMap<Integer, TreeSet<Tuple>> rows;\n    HashMap<Integer, TreeSet<Tuple>> cols;\n    boolean[][] seen;\n    public int[][] matrixRankTransform(int[][] matrix) {\n//        out.println(matrix);\n        int rowlen = matrix.length, colen = matrix[0].length;\n        seen = new boolean[rowlen][colen];\n        HashMap<Integer, int[]> lastRow = new HashMap<>();\n        HashMap<Integer, int[]> lastCol = new HashMap<>();\n\n        rows = new HashMap<>();\n        cols = new HashMap<>();\n\n        TreeSet<Tuple> set = new TreeSet<>();\n        for (int c = 0; c < colen; c++) cols.put(c, new TreeSet<>());\n        for (int r = 0; r < rowlen; r++) {\n            rows.put(r, new TreeSet<>());\n            for (int c = 0; c < colen; c++) {\n                Tuple tuple = new Tuple(matrix[r][c], r, c);\n                rows.get(r).add(tuple);\n                cols.get(c).add(tuple);\n                set.add(tuple);\n            }\n        }\n\n        while (!set.isEmpty()) {\n            Tuple smallest = set.pollFirst();\n            int val = smallest.a;\n            int r = smallest.b;\n            int c = smallest.c;\n            if (seen[r][c]) continue;\n            List<Tuple> current = new ArrayList<>();\n            current.add(smallest);\n\n            add(smallest, smallest.b, current, rows);\n            add(smallest, smallest.c, current, cols);\n            int rank = -Integer.MAX_VALUE;\n            for (Tuple t : current) {\n                r = t.b; c = t.c;\n                seen[r][c] = true;\n                int[] row = !lastRow.containsKey(r) ? new int[]{val, 1} : lastRow.get(r);\n                int[] col = !lastCol.containsKey(c) ? new int[]{val, 1} : lastCol.get(c);\n                int rowVal = row[0] == val ? row[1] : row[1] + 1;\n                int colVal = col[0] == val ? col[1] : col[1] + 1;\n                int rank2 = Math.max(rowVal, colVal);\n                rank = Math.max(rank, rank2);\n\n            }\n            for (Tuple t : current) {\n                r = t.b; c = t.c;\n                matrix[r][c] = rank;\n                lastRow.put(r, new int[]{val, rank});\n                lastCol.put(c, new int[]{val, rank});\n            }\n        }\n        return matrix;\n    }\n\n    void add(Tuple smallest, int r, List<Tuple> current, HashMap<Integer, TreeSet<Tuple>> rows) {\n        while (!rows.get(r).isEmpty() && rows.get(r).first().a <= smallest.a) {\n            Tuple item = rows.get(r).pollFirst();\n            if (item.a == smallest.a)\n                current.add(item);\n        }\n    }\n    \n    \n    static class Tuple implements Comparable<Tuple> {\n        int a;\n        int b;\n        int c;\n        public Tuple(int a, int b) {\n            this.a = a;\n            this.b = b;\n            this.c = 0;\n        }\n        public Tuple(int a, int b, int c) {\n            this.a = a;\n            this.b = b;\n            this.c = c;\n        }\n        public int getA() { return a; }\n        public int getB() { return b; }\n        public int getC() { return c; }\n        public int compareTo(Tuple other) {\n            if (this.a == other.a) {\n                if (this.b == other.b) return Long.compare(this.c, other.c);\n                return Long.compare(this.b, other.b);\n            }\n            return Long.compare(this.a, other.a);\n        }\n        @Override\n        public int hashCode() { return Arrays.deepHashCode(new Integer[]{a, b, c}); }\n        @Override\n        public boolean equals(Object o) {\n            if (!(o instanceof Tuple)) return false;\n            Tuple pairo = (Tuple) o;\n            return (this.a == pairo.a && this.b == pairo.b && this.c == pairo.c);\n        }\n        @Override\n        public String toString() { return String.format(\"(%d %d %d)  \", this.a, this.b, this.c); }\n    }\n}","compare_result":"11111111111111111100010000000000000011","title_slug":"rank-transform-of-a-matrix"}