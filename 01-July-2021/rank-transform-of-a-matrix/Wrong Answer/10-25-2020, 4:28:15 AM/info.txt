{"id":412826419,"lang":"java","time":"8 months, 1 week","timestamp":1603596495,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/412826419/","is_pending":"Not Pending","title":"Rank Transform of a Matrix","memory":"N/A","code":"class Solution {\n    public int[][] matrixRankTransform(int[][] matrix) {\n        int rowlen = matrix.length, colen = matrix[0].length;\n//        int[][] ans = new int[rowlen][colen];\n        HashMap<Integer, int[]> lastRow = new HashMap<>();\n        HashMap<Integer, int[]> lastCol = new HashMap<>();\n\n        HashMap<Integer, HashMap<Integer, Integer>> ansRow = new HashMap<>();\n        HashMap<Integer, HashMap<Integer, Integer>> ansCol = new HashMap<>();\n\n        TreeSet<Tuple> cells = new TreeSet<>();\n        for (int r = 0; r < rowlen; r++) {\n            ansRow.put(r, new HashMap<>());\n            for (int c = 0; c < colen; c++) {\n                cells.add(new Tuple(matrix[r][c], r, c));\n            }\n        }\n        for (int c = 0; c < colen; c++) ansCol.put(c, new HashMap<>());\n        while (!cells.isEmpty()) {\n            Tuple smallest = cells.pollFirst();\n            int val = smallest.a;\n            int r = smallest.b;\n            int c = smallest.c;\n            int[] row = !lastRow.containsKey(r) ? new int[]{val, 1} : lastRow.get(r);\n            int[] col = !lastCol.containsKey(c) ? new int[]{val, 1} : lastCol.get(c);\n            int rowVal = row[0] == val ? row[1] : row[1] + 1;\n            int colVal = col[0] == val ? col[1] : col[1] + 1;\n//            out.pp(val, r, c, Arrays.toString(row), Arrays.toString(col));\n            int rank = Math.max(rowVal, colVal);\n            ansRow.get(r).put(val, rank);\n            ansCol.get(c).put(val, rank);\n            lastRow.put(r, new int[]{val, rank});\n            lastCol.put(c, new int[]{val, rank});\n        }\n        for (int r = 0; r < rowlen; r++) {\n            for (int c = 0; c < colen; c++) {\n                int val = matrix[r][c];\n                int rank = Math.max(ansCol.get(c).get(val), ansRow.get(r).get(val));\n                matrix[r][c] = rank;\n            }\n        }\n\n        return matrix;\n    }\n    static class Tuple implements Comparable<Tuple> {\n        int a;\n        int b;\n        int c;\n        public Tuple(int a, int b) {\n            this.a = a;\n            this.b = b;\n            this.c = 0;\n        }\n        public Tuple(int a, int b, int c) {\n            this.a = a;\n            this.b = b;\n            this.c = c;\n        }\n        public int getA() { return a; }\n        public int getB() { return b; }\n        public int getC() { return c; }\n        public int compareTo(Tuple other) {\n            if (this.a == other.a) {\n                if (this.b == other.b) return Long.compare(this.c, other.c);\n                return Long.compare(this.b, other.b);\n            }\n            return Long.compare(this.a, other.a);\n        }\n        @Override\n        public int hashCode() { return Arrays.deepHashCode(new Integer[]{a, b, c}); }\n        @Override\n        public boolean equals(Object o) {\n            if (!(o instanceof Tuple)) return false;\n            Tuple pairo = (Tuple) o;\n            return (this.a == pairo.a && this.b == pairo.b && this.c == pairo.c);\n        }\n        @Override\n        public String toString() { return String.format(\"(%d %d %d)  \", this.a, this.b, this.c); }\n    }\n}","compare_result":"11111111111101100100000000000000000001","title_slug":"rank-transform-of-a-matrix"}