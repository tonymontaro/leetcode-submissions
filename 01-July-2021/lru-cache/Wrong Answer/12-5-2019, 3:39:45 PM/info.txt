{"id":283923167,"lang":"python3","time":"1 year, 6 months","timestamp":1575556785,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/283923167/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"class LinkedListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n        self.prev = None\n\nclass LRUCache:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.num_items = 0\n        self.head = None\n        self.tail = None\n        self.items = {}\n    \n    def is_head(self, node):\n        return node == self.head\n    \n    def is_tail(self, node):\n        return node == self.tail\n    \n    def set_head(self, node):\n        if self.head is None:\n            self.head = self.tail = node\n        else:\n            node.next = self.head\n            self.head.prev = node\n            self.head = node\n        self.num_items += 1\n        return node\n    \n    def remove_tail(self):\n        node = self.tail\n        if self.head == self.tail:\n            self.head = self.tail = None\n        else:\n            self.tail = self.tail.prev\n            self.tail.next = None\n        self.num_items -= 1\n        return node\n    \n    def remove_node(self, node):\n        if self.is_tail(node):\n            self.remove_tail()\n        else:\n            node.prev.next = node.next\n            node.next.prev = node.prev\n            node.next = node.prev = None\n            self.num_items -= 1\n            return node\n        \n    def put(self, number, value):\n        \"\"\"O(1) time\"\"\"\n        if number in self.items:\n            node = self.items[number]['node']\n            if node != self.head:\n                self.remove_node(node)\n        else:\n            node = LinkedListNode(number)\n            self.items[number] = {'node': node, 'val': value}\n        if node != self.head:\n            self.set_head(node)\n        \n        if self.num_items > self.capacity:\n            node = self.remove_tail()\n            del self.items[node.val]\n            \n    def get(self, number):\n        \"\"\"O(1) time\"\"\"\n        if number in self.items:\n            node = self.items[number]['node']\n            if node != self.head:\n                self.remove_node(node)\n                self.set_head(node)\n            return self.items[number]['val']\n        else:\n            return -1\n","compare_result":"111110100110000000","title_slug":"lru-cache"}