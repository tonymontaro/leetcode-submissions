{"id":419074303,"lang":"python3","time":"7 months, 3 weeks","timestamp":1605072446,"status_display":"Accepted","runtime":"180 ms","url":"/submissions/detail/419074303/","is_pending":"Not Pending","title":"LRU Cache","memory":"23.2 MB","code":"from collections import OrderedDict\n\nclass LRUCache:\n\n    def __init__(self, capacity: int):\n        self.limit = capacity\n        self.cache = OrderedDict()\n\n    def get(self, key: int) -> int:\n        if key not in self.cache:\n            return -1\n        self.cache.move_to_end(key)\n        return self.cache[key]\n\n    def put(self, key: int, value: int) -> None:\n        if len(self.cache) == self.limit and key not in self.cache:\n            self.cache.popitem(last=False)\n        self.cache[key] = value\n        self.cache.move_to_end(key)\n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)","compare_result":"111111111111111111","title_slug":"lru-cache"}