{"id":415149660,"lang":"python3","time":"8Â months","timestamp":1604129635,"status_display":"Accepted","runtime":"216 ms","url":"/submissions/detail/415149660/","is_pending":"Not Pending","title":"LRU Cache","memory":"23.5 MB","code":"class Node:\n    def __init__(self, key, val):\n        self.key = key\n        self.val = val\n        self.next = None\n        self.prev = None\n\nclass LRUCache:\n\n    def __init__(self, capacity: int):\n        # O(capacity) space\n        self.items = {}\n        self.head = self.tail = None\n        self.capacity = capacity\n    \n    def remove(self, key, node):\n        # O(1) time\n        self.items.pop(key)\n\n        if not node.prev:\n            self.head = node.next\n        else:\n            node.prev.next = node.next\n        \n        if not node.next:\n            self.tail = node.prev\n        else:\n            node.next.prev = node.prev\n        node.next = None\n        node.prev = None\n\n    def get(self, key: int) -> int:\n        # O(1) time\n        if key not in self.items:\n            return -1\n        return self._get(key)\n        \n    def _get(self, key):\n        # O(1) time\n        node = self.items[key]\n        self.remove(key, node)\n        self._put(key, node.val, node)\n        return node.val\n\n    def _put(self, key, val, node=None):\n        # O(1) time\n        if node is None:\n            node = Node(key, val)\n        self.items[key] = node\n        \n        if self.head:\n            self.head.prev = node\n            node.next = self.head\n        self.head = node\n        if not self.tail:\n            self.tail = node\n\n    def put(self, key: int, val: int) -> None:\n        # O(1) time\n        if key not in self.items:\n            if self.capacity == 0:\n                self.remove(self.tail.key, self.tail)\n            else:\n                self.capacity -= 1\n        if key in self.items:\n            self.remove(key, self.items[key])\n        self._put(key, val)\n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)","compare_result":"111111111111111111","title_slug":"lru-cache"}