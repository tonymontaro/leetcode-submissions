{"id":411399862,"lang":"python3","time":"8 months, 1 week","timestamp":1603269981,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/411399862/","is_pending":"Not Pending","title":"Fraction to Recurring Decimal","memory":"15.3 MB","code":"class Solution:\n    def fractionToDecimal(self, numerator: int, denominator: int) -> str:\n        # O(n)\n        seen = {}\n        def decimal(num, div, arr):\n            if num in seen:\n                start = seen[num]\n                word = f\"({''.join(arr[start:])})\"\n                arr = arr[:start]\n                arr.append(word)\n                return arr\n            dividend, mod = divmod(num, div)\n            seen[num] = len(arr)\n            arr.append(str(dividend))\n            if mod == 0:\n                return arr\n            return decimal(mod * 10, div, arr)\n\n        arr = []\n        if numerator * denominator < 0:\n            arr.append(\"-\")\n        numerator, denominator = abs(numerator), abs(denominator)\n        div, mod = divmod(numerator, denominator)\n        arr.append(str(div))\n        if mod != 0:\n            arr.append(\".\")\n            arr = decimal(mod * 10, denominator, arr)\n        return \"\".join(arr)","compare_result":"11111111111111111111111111111111111111","title_slug":"fraction-to-recurring-decimal"}