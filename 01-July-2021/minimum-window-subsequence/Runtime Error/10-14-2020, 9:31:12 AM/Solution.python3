// https://leetcode.com/problems/minimum-window-subsequence

from collections import deque, defaultdict

class Solution:
    def minWindow(self, text: str, word: str) -> str:
        # O(n * nn)
        if (word == ""): return ""
        indices = defaultdict(int)
        ans = ""
        n = len(word)
        nn = len(text)
        locs = [0] * (n + 1)
        locs[0] = -1

        while (locs[1] < nn):
            for i in range(1, n + 1):
                if (i > 1 and locs[i] > locs[i - 1]): break;
                ch = word[i - 1]
                while (locs[i] <= locs[i - 1] or text[locs[i]] != ch):
                    if (locs[i] + 1 >= nn): return ans
                    locs[i] = max(locs[i] + 1, locs[i - 1] + 1)
            a, b = locs[1], locs[n]
            locs[0] = a
            if (ans == "" or b - a + 1 < len(ans)):
                ans = text[a:b+1]
            
        return ans