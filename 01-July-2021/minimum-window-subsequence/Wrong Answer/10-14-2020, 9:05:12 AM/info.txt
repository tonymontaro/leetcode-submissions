{"id":408570115,"lang":"python3","time":"8 months, 2 weeks","timestamp":1602662712,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/408570115/","is_pending":"Not Pending","title":"Minimum Window Subsequence","memory":"N/A","code":"from collections import deque, defaultdict\n\nclass Solution:\n    def minWindow(self, text: str, word: str) -> str:\n        indices = defaultdict(deque)\n        for i, ch in enumerate(text):\n            indices[ch].append(i)\n        ans = \"\"\n        n = len(word)\n        locs = [0] * (n)\n\n        while (len(indices[word[0]]) > 0):\n            firstDeq = indices[word[0]]\n            locs[0] = firstDeq.popleft()\n            for i in range(1, n):\n                if (locs[i] > locs[i - 1]): break;\n                ch = word[i]\n                while (locs[i] < locs[i - 1]):\n                    if (len(indices[ch]) <= 0):\n                        return ans\n                    locs[i] = indices[ch].popleft()\n            a, b = locs[0], locs[n - 1]\n            if (ans == \"\" or b - a + 1 < len(ans)):\n                ans = text[a:b+1]\n            \n        return ans","compare_result":"11111111111101111111010111010001010011011000000000000000000","title_slug":"minimum-window-subsequence"}