// https://leetcode.com/problems/minimum-window-subsequence

from collections import deque, defaultdict

class Solution:
    def minWindow(self, text: str, word: str) -> str:
        indices = defaultdict(deque)
        for i, ch in enumerate(text):
            indices[ch].append(i)
        ans = ""
        n = len(word)
        locs = [0] * (n)

        while (len(indices[word[0]]) > 0):
            firstDeq = indices[word[0]]
            locs[0] = firstDeq.popleft()
            for i in range(1, n):
                if (locs[i] > locs[i - 1]): break;
                ch = word[i]
                while (locs[i] <= locs[i - 1]):
                    if (len(indices[ch]) <= 0):
                        return ans
                    locs[i] = indices[ch].popleft()
            a, b = locs[0], locs[n - 1]
            if (ans == "" or b - a + 1 < len(ans)):
                ans = text[a:b+1]
            
        return ans