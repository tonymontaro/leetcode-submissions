{"id":408580540,"lang":"python3","time":"8 months, 2 weeks","timestamp":1602665236,"status_display":"Accepted","runtime":"148 ms","url":"/submissions/detail/408580540/","is_pending":"Not Pending","title":"Minimum Window Subsequence","memory":"14.5 MB","code":"class Solution:\n    def minWindow(self, text: str, word: str) -> str:\n        # O(n * nn)\n        if (word == \"\"): return \"\"\n        n = len(word)\n        nn = len(text)\n        best = (0, 0)\n        start = 0\n        while (start < nn):\n            a = text.find(word[0], start)\n            if (a == -1): return text[best[0]:best[1]]\n            end = a\n            for i in range(1, n):\n                end = text.find(word[i], end + 1)\n                if (end == -1): return text[best[0]:best[1]]\n            b = end\n            print(a, b)\n            start = a + 1\n            if (best == (0, 0) or b - a + 1 < best[1] - best[0]):\n                best = (a, b + 1)\n            \n        return text[best[0]:best[1]]","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-window-subsequence"}