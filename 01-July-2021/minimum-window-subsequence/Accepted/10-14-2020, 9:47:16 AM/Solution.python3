// https://leetcode.com/problems/minimum-window-subsequence

class Solution:
    def minWindow(self, text: str, word: str) -> str:
        # O(n * nn)
        if (word == ""): return ""
        n = len(word)
        nn = len(text)
        best = (0, 0)
        start = 0
        while (start < nn):
            a = text.find(word[0], start)
            if (a == -1): return text[best[0]:best[1]]
            end = a
            for i in range(1, n):
                end = text.find(word[i], end + 1)
                if (end == -1): return text[best[0]:best[1]]
            b = end
            print(a, b)
            start = a + 1
            if (best == (0, 0) or b - a + 1 < best[1] - best[0]):
                best = (a, b + 1)
            
        return text[best[0]:best[1]]