{"id":408577177,"lang":"python3","time":"8 months, 2 weeks","timestamp":1602664391,"status_display":"Accepted","runtime":"612 ms","url":"/submissions/detail/408577177/","is_pending":"Not Pending","title":"Minimum Window Subsequence","memory":"14.1 MB","code":"from collections import deque, defaultdict\n\nclass Solution:\n    def minWindow(self, text: str, word: str) -> str:\n        # O(n * nn)\n        if (word == \"\"): return \"\"\n        indices = defaultdict(int)\n        ans = \"\"\n        n = len(word)\n        nn = len(text)\n        locs = [0] * (n + 1)\n        locs[0] = -1\n\n        while (locs[1] < nn):\n            for i in range(1, n + 1):\n                if (i > 1 and locs[i] > locs[i - 1]): break;\n                ch = word[i - 1]\n                while (locs[i] <= locs[i - 1] or text[locs[i]] != ch):\n                    if (locs[i] + 1 >= nn or locs[i - 1] + 1 >= nn): return ans\n                    locs[i] = max(locs[i] + 1, locs[i - 1] + 1)\n            a, b = locs[1], locs[n]\n            locs[0] = a\n            if (ans == \"\" or b - a + 1 < len(ans)):\n                ans = text[a:b+1]\n            \n        return ans","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-window-subsequence"}