{"id":437613216,"lang":"python3","time":"5 months, 4 weeks","timestamp":1609612220,"status_display":"Accepted","runtime":"3616 ms","url":"/submissions/detail/437613216/","is_pending":"Not Pending","title":"String Compression II","memory":"288.4 MB","code":"import copy\nfrom math import inf\n\nclass Solution:\n    def getLengthOfOptimalCompression(self, s: str, k: int) -> int:\n        cache = {}\n        def solve(idx, rem, prev, prevCount):\n            if idx >= len(s):\n                return 0\n\n            rep = f'{idx}-{rem}-{prev}-{prevCount}'\n            if rep in cache:\n                return cache[rep]\n\n            # skip\n            ans = inf\n            if rem > 0:\n                ans = solve(idx+1, rem-1, prev, prevCount)\n\n            # include\n            if s[idx] == prev:\n                incr = 1 if (prevCount in [1, 9, 99]) else 0\n                ans = min(ans, incr + solve(idx+1, rem, prev, prevCount + 1))\n            else:\n                ans = min(ans, 1 + solve(idx+1, rem, s[idx], 1))\n            \n            cache[rep] = ans\n            return ans\n        \n        return solve(0, k, '', 0)\n                \n            ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"string-compression-ii"}