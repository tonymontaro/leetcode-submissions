{"id":437609052,"lang":"python3","time":"5 months, 4 weeks","timestamp":1609611496,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/437609052/","is_pending":"Not Pending","title":"String Compression II","memory":"N/A","code":"import copy\nfrom math import inf\n\nclass Solution:\n    def getLengthOfOptimalCompression(self, s: str, k: int) -> int:\n        cache = {}\n        def solve(idx, rem, prev, prevCount, score):\n            rep = f'{idx}-{rem}-{prev}-{prevCount}'\n            if idx >= len(s):\n                return score\n\n            if rep in cache:\n                return cache[rep]\n            # skip\n            ans = inf\n            if rem > 0:\n                ans = solve(idx+1, rem-1, prev, prevCount, score)\n\n            # include\n            if s[idx] == prev:\n                incr = 1 if (prevCount in [9, 99] or prevCount == 1) else 0\n                ans = min(ans, solve(idx+1, rem, prev, prevCount + 1, score + incr))\n            else:\n                ans = min(ans, solve(idx+1, rem, s[idx], 1, score + 1))\n            \n            cache[rep] = ans\n            return ans\n        \n        return solve(0, k, '', 0, 0)\n                \n            ","compare_result":"01111101101110111111101111111111111111111110111110110000101010111100100000001111001110011000000100001000100000010011000000000000000000","title_slug":"string-compression-ii"}