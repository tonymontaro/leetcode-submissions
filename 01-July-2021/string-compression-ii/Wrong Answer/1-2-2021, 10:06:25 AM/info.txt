{"id":437468281,"lang":"python3","time":"5 months, 4 weeks","timestamp":1609578385,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/437468281/","is_pending":"Not Pending","title":"String Compression II","memory":"N/A","code":"import copy\n\nclass Solution:\n    def getLengthOfOptimalCompression(self, s: str, k: int) -> int:\n        if k == len(s):\n            return 0\n        cmpr = []\n        prev = s[0]\n        count = 1\n        for i in range(1, len(s)):\n            if s[i] != prev:\n                cmpr.append([prev, count])\n                prev = s[i]\n                count = 1\n            else:\n                count += 1\n        cmpr.append([prev, count])\n        \n        def getRep(cmpr):\n            return ''.join(map(lambda x: x[0] + (\"\" if x[1] == 1 else str(x[1])),cmpr))\n        if k == 0:\n            return len(getRep(cmpr))\n        \n\n        seen = {}\n        def solve(cmpr, rem):\n            rep = getRep(cmpr)\n            if rep in seen:\n                return seen[rep]\n\n            ans = len(rep)\n            for i, (cha, num) in enumerate(cmpr):\n                if num <= rem:\n                    cmpr2 = [list(x) for j, x in enumerate(cmpr) if j != i]\n                    final = [cmpr2[0]]\n                    for j in range(1, len(cmpr2)):\n                        if cmpr2[j][0] == cmpr2[j-1][0]:\n                            final[-1][1] += cmpr2[j][1]\n                        else:\n                            final.append(cmpr2[j])\n                    ans = min(ans, solve(final, rem - num))\n            seen[rep] = ans\n            return ans\n                    \n                    \n        return solve(cmpr, k)\n","compare_result":"11111111110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"string-compression-ii"}