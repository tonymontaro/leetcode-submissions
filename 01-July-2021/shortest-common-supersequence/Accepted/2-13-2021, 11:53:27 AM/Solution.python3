// https://leetcode.com/problems/shortest-common-supersequence

class Solution:
    def shortestCommonSupersequence(self, s1: str, s2: str) -> str:
        n, m = len(s1), len(s2)
        grid = [[0] * (m + 1) for _ in range(n + 1)]
        grid[0] = list(range(m + 1))
        
        for r in range(1, n + 1):
            grid[r][0] = 1 + grid[r-1][0]
            for c in range(1, m + 1):
                if s1[r-1] == s2[c-1]:
                    grid[r][c] = 1 + grid[r-1][c-1]
                else:
                    grid[r][c] = 1 + min(grid[r-1][c], grid[r][c-1])
        
        ans = []
        r, c = n, m
        while r > 0 or c > 0:
            if r > 0 and c > 0 and s1[r-1] == s2[c-1]:
                ans.append(s1[r-1])
                r -= 1
                c -= 1
            elif r == 0 or (r > 0 and c > 0 and grid[r][c-1] < grid[r-1][c]):
                ans.append(s2[c-1])
                c -= 1
            else:
                ans.append(s1[r-1])
                r -= 1
        return "".join(ans)[::-1]