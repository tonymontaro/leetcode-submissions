{"id":437459357,"lang":"python3","time":"5 months, 4 weeks","timestamp":1609576429,"status_display":"Accepted","runtime":"412 ms","url":"/submissions/detail/437459357/","is_pending":"Not Pending","title":"Number of Good Leaf Nodes Pairs","memory":"17.1 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Node:\n    def __init__(self, idx):\n        self.children = []\n        self.idx = idx\n        self.isLeave = False\n    def __repr__(self):\n        return f'({self.idx}, {self.isLeave})'\n\nclass Solution:\n    def countPairs(self, root: TreeNode, distance: int) -> int:\n        self.i = 0\n        leaveNodes = []\n        def dfs(node, p):\n            if not node:\n                return\n            nn = Node(self.i)\n            self.i += 1\n            if p:\n                nn.children.append(p)\n                p.children.append(nn)\n            if not node.left and not node.right:\n                nn.isLeave = True\n                leaveNodes.append(nn)\n            else:\n                dfs(node.left, nn)\n                dfs(node.right, nn)\n            return nn\n        root = dfs(root, None)\n        # print(leaveNodes)\n        \n        self.pairs = 0\n        def find(node, dist, visited):\n            visited[node.idx] = True\n            if dist > distance:\n                return\n            if node.isLeave and dist <= distance and dist != 0:\n                self.pairs += 1\n            for child in node.children:\n                if child.idx not in visited:\n                    find(child, dist + 1, visited)\n        \n        for node in leaveNodes:\n            find(node, 0, {})\n        return self.pairs // 2\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-good-leaf-nodes-pairs"}