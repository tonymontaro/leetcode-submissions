{"id":420814151,"lang":"python3","time":"7Â months, 2Â weeks","timestamp":1605514118,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/420814151/","is_pending":"Not Pending","title":"Permutations II","memory":"14.5 MB","code":"from collections import Counter\n\nclass Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        # O(unique ^ n) time\n        n = len(nums)\n        result = []\n        \n        def backtrack(counts, arr):\n            if len(arr) >= n:\n                result.append(list(arr))\n                return\n            \n            for num in counts:\n                if counts[num] > 0:\n                    counts[num] -= 1\n                    arr.append(num)\n                    backtrack(counts, arr)\n                    arr.pop()\n                    counts[num] += 1\n\n        counts = Counter(nums)\n        backtrack(counts, [])\n        return result\n","compare_result":"111111111111111111111111111111111","title_slug":"permutations-ii"}