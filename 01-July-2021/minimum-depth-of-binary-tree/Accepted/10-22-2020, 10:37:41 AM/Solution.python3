// https://leetcode.com/problems/minimum-depth-of-binary-tree

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from math import inf

class Solution:
    def minDepth(self, node: TreeNode) -> int:
        if not node: return 0
        return self.dfs(node, 0)

    def dfs(self, node, depth):
        if not node.left and not node.right:
            return depth + 1
        elif node.right and node.left:
            return min(self.dfs(node.left, depth + 1), self.dfs(node.right, depth + 1))
        elif not node.right:
            return self.dfs(node.left, depth + 1)
        else:
            return self.dfs(node.right, depth + 1)