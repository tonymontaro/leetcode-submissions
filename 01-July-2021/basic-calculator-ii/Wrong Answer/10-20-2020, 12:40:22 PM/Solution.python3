// https://leetcode.com/problems/basic-calculator-ii

class Solution:
    def calculate(self, s: str) -> int:
        # O(n) time and space
        funcs = {
            "/": lambda x, y: x // y,
            "+": lambda x, y: x + y,
            "-": lambda x, y: x - y,
            "*": lambda x, y: x * y,
        }
        signs = {"+", "-", "*", "/"}
        def operate(arr, sign):
            res = []
            idx = 0
            while idx < len(arr):
                if arr[idx] == sign:
                    prev = res.pop()
                    ans = funcs[sign](prev, arr[idx + 1])
                    res.append(ans)
                    idx = idx + 2
                else:
                    res.append(arr[idx])
                    idx += 1
            return res
            
        exp = []
        
        prev = 0
        for i in range(len(s)):
            if s[i] in signs:
                exp.append(int(s[prev:i].strip()))
                exp.append(s[i])
                prev = i + 1
        exp.append(int(s[prev:].strip()))
        arr = operate(exp, "/")
        arr = operate(arr, "*")
        arr = operate(arr, "-")
        arr = operate(arr, "+")
        
        return arr[0]


