// https://leetcode.com/problems/basic-calculator-ii

class Solution:
    def calculate(self, s: str) -> int:
        # O(n) time and space
        funcs = {
            "/": lambda x, y: (x//abs(x)) * (abs(x) // y),
            "*": lambda x, y: x * y,
        }
        signs = {"+", "-", "*", "/"}
        def operate(arr):
            res = []
            idx = 0
            while idx < len(arr):
                if arr[idx] in signs:
                    nxt = arr[idx + 1]
                    if arr[idx] in ["*", "/"]:
                        prev = res.pop()
                        ans = funcs[arr[idx]](prev, nxt)
                        res.append(ans)
                    elif arr[idx] == "-":
                        res.append(-nxt)
                    else:
                        res.append(nxt)
                    idx = idx + 2
                else:
                    res.append(arr[idx])
                    idx += 1
            return res
            
        exp = []
        
        prev = 0
        for i in range(len(s)):
            if s[i] in signs:
                exp.append(int(s[prev:i].strip()))
                exp.append(s[i])
                prev = i + 1
        exp.append(int(s[prev:].strip()))
        arr = operate(exp)
        # print(arr)
        return sum(arr)


