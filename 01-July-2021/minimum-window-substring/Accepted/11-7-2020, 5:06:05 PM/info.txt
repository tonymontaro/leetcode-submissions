{"id":417759831,"lang":"python3","time":"7 months, 3 weeks","timestamp":1604765165,"status_display":"Accepted","runtime":"108 ms","url":"/submissions/detail/417759831/","is_pending":"Not Pending","title":"Minimum Window Substring","memory":"14.7 MB","code":"from collections import defaultdict, Counter\nfrom math import inf\n\nclass Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        # O(n) time and O(1) space\n        if not t or not s: return \"\"\n\n        seen = defaultdict(int)\n        unique = Counter(t)\n        rem = len(unique)\n        ans = (0, 0, inf)\n        left = 0\n        \n        for i, c in enumerate(s):\n            if c in unique and seen[c] == unique[c] - 1:\n                rem -= 1\n            seen[c] += 1\n            \n            if rem == 0:\n                c = s[left]\n                while left < i and (c not in unique or seen[c] > unique[c]):\n                    seen[c] -= 1\n                    left += 1\n                    c = s[left]\n                size = i + 1 - left\n                if size < ans[2]:\n                    ans = (left, i + 1, size)\n\n        return s[ans[0]: ans[1]]","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-window-substring"}