{"id":461613881,"lang":"python3","time":"4Â months","timestamp":1614496349,"status_display":"Accepted","runtime":"1928 ms","url":"/submissions/detail/461613881/","is_pending":"Not Pending","title":"Car Fleet II","memory":"58.3 MB","code":"from math import inf\n\nclass Solution:\n    def getCollisionTimes(self, cars: List[List[int]]) -> List[float]:\n        \n        def getCollisionTime(dist1, speed1, dist2, speed2):\n            if speed1 <= speed2:\n                return inf\n            relativeSpeed = speed1 - speed2\n            return (dist2 - dist1) / relativeSpeed\n        \n        stack = [] # dist, speed, collisionTime\n        ans = []\n        for d, s in cars[::-1]:\n            while stack and (\n                s <= stack[-1][1]\n                or getCollisionTime(d, s, stack[-1][0], stack[-1][1]) > stack[-1][2]\n            ):\n                stack.pop()\n            if stack:\n                collisionTime = getCollisionTime(d, s, stack[-1][0], stack[-1][1])\n                stack.append((d, s, collisionTime))\n                ans.append(collisionTime)\n            else:\n                stack.append((d, s, inf))\n                ans.append(-1)\n        return ans[::-1]\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"car-fleet-ii"}