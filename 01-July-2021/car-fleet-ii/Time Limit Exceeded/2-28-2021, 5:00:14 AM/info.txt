{"id":461547322,"lang":"python3","time":"4Â months","timestamp":1614484814,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/461547322/","is_pending":"Not Pending","title":"Car Fleet II","memory":"N/A","code":"from math import inf\nfrom functools import lru_cache\nclass Solution:\n    def getCollisionTimes(self, cars: List[List[int]]) -> List[float]:\n        diff = 10**(-6)\n        @lru_cache(None)\n        def solve(d1, s1, d2, s2):\n            if s2 >= s1:\n                return -1\n            lo = 0\n            hi = 10**9\n            valid = hi\n            while (hi - lo) > diff:\n                midTime = (hi + lo) / 2\n                a = d1 + (s1 * midTime)\n                b = d2 + (s2 * midTime)\n                if a >= b:\n                    hi = midTime\n                    valid = midTime\n                else:\n                    lo = midTime\n            return valid\n        \n        n = len(cars)\n        ans = [-1] * n\n        stack = []\n        mn = inf\n        for i in range(n - 1, -1, -1):\n            d1, s1 = cars[i]\n            \n            if stack and mn < s1:\n                while s1 <= stack[-1][1]:\n                    stack.pop()\n\n                aa = solve(d1, s1, stack[-1][0], stack[-1][1])\n\n                bb = aa\n                \n                while len(stack) > 1:\n                    bb = solve(d1, s1, stack[-2][0], stack[-2][1])\n\n                    if bb == -1:\n                        break\n                    if bb < aa:\n                        stack.pop()\n                        aa = bb\n                    else:\n                        break\n\n                ans[i] = aa\n            stack.append((d1, s1))\n            mn = min(mn, s1)\n        return ans\n            ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"car-fleet-ii"}