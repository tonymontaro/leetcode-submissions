{"id":277808657,"lang":"python","time":"1 year, 7 months","timestamp":1573449274,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/277808657/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    \"\"\"O(N*D) time | O(N) space | D -> depth of new tree\"\"\"\n    def bstFromPreorder(self, arr):\n        root = TreeNode(arr[0])\n        preorder(0, arr, root)\n        return root\n\ndef preorder(i, arr, root):\n    if i < len(arr):\n        if i > 0:\n            set_node(arr[i], root)\n        preorder(2*i+1, arr, root)\n        preorder(2*i+2, arr, root)\n\ndef set_node(val, root):\n    node = root\n    while node:\n        if node.val > val:\n            if not node.left:\n                node.left = TreeNode(val)\n                return root\n            else:\n                node = node.left\n        else:\n            if not node.right:\n                node.right = TreeNode(val)\n                return root\n            else:\n                node = node.right\n        ","compare_result":"11111111100100011000000100000010100011011001011000010000100000000010000000010000000000000000000000000000000000","title_slug":"construct-binary-search-tree-from-preorder-traversal"}