// https://leetcode.com/problems/recover-binary-search-tree

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from math import inf

class Solution:
    def recoverTree(self, root: TreeNode) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        def traverse(node, high, low):
            if not node:
                return

            if node.val > high.val:
                node.val, high.val = high.val, node.val
            elif node.val < low.val:
                node.val, low.val = low.val, node.val
            else:
                traverse(node.left, node, low)
                traverse(node.right, high, node)
        
        traverse(root, TreeNode(inf), TreeNode(-inf))
        return root
        