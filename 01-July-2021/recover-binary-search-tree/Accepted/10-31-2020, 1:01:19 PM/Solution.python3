// https://leetcode.com/problems/recover-binary-search-tree

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def recoverTree(self, root: TreeNode) -> None:
        """
        Do not return anything, modify root in-place instead.
        O(n) time | O(1) space
        """
        self.outOfOrder = None
        self.prev = None
        self.low = None
        def inOrder(node):
            if node is None:
                return
            inOrder(node.left)
            if self.low is not None:
                self.low = min(self.low, node, key=lambda x: x.val)
            elif self.prev is not None and self.prev.val > node.val:
                self.low = node
                self.outOfOrder = self.prev
            self.prev = node
            inOrder(node.right)
                    
        inOrder(root)
        self.outOfOrder.val, self.low.val = self.low.val, self.outOfOrder.val