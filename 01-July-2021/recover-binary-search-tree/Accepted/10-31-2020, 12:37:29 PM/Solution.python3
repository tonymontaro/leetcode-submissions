// https://leetcode.com/problems/recover-binary-search-tree

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from math import inf

class Solution:
    def recoverTree(self, root: TreeNode) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        def inOrder(node, arr):
            if not node:
                return
            inOrder(node.left, arr)
            arr.append(node)
            inOrder(node.right, arr)
        
        arr = []
        inOrder(root, arr)
        n = len(arr)
        for i in range(n - 1):
            if arr[i].val > arr[i + 1].val:
                low = arr[i + 1]
                for j in range(i + 1, n):
                    low = min(low, arr[j], key=lambda x: x.val)
                arr[i].val, low.val = low.val, arr[i].val
                break
        return root
        