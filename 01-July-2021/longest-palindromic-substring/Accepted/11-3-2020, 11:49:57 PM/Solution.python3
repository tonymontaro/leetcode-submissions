// https://leetcode.com/problems/longest-palindromic-substring

class Solution:
    def longestPalindrome(self, s: str) -> str:
        # O(n^2) time | O(1) space
        n = len(s)

        def getPalindromeRange(l, r):
            while l >= 0 and r < n and s[l] == s[r]:
                l -= 1
                r += 1
            return (l + 1, r - 1)

        ans = (0, 0)
        for i in range(n):
            oneMid = getPalindromeRange(i, i)
            if oneMid[1] - oneMid[0] > ans[1] - ans[0]:
                ans = oneMid
            if i < n - 1 and s[i] == s[i + 1]:
                twoMid = getPalindromeRange(i, i+1)
                if twoMid[1] - twoMid[0] > ans[1] - ans[0]:
                    ans = twoMid
        return s[ans[0]:ans[1]+1]