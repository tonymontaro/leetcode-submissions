{"id":400583695,"lang":"java","time":"9 months, 1 week","timestamp":1601045463,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/400583695/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"39.2 MB","code":"class Solution {\n    public String longestPalindrome(String s) {\n        // O(n) time\n        Manacher manacher = new Manacher(s);\n        return manacher.longestPalindromicSubstring();\n    }\n}\n\nclass Manacher {\n    public int[]  p;  // p[i] = length of longest palindromic substring of t, centered at i\n    public String s;  // original string\n    public char[] t;  // transformed string\n\n    public Manacher(String s) {\n        this.s = s;\n        preprocess();\n        p = new int[t.length];\n\n        int center = 0, right = 0;\n        for (int i = 1; i < t.length-1; i++) {\n            int mirror = 2*center - i;\n\n            if (right > i)\n                p[i] = Math.min(right - i, p[mirror]);\n\n            // attempt to expand palindrome centered at i\n            while (t[i + (1 + p[i])] == t[i - (1 + p[i])])\n                p[i]++;\n\n            // if palindrome centered at i expands past right,\n            // adjust center based on expanded palindrome.\n            if (i + p[i] > right) {\n                center = i;\n                right = i + p[i];\n            }\n        }\n\n    }\n\n    // Transform s into t.\n    // For example, if s = \"abba\", then t = \"$#a#b#b#a#@\"\n    // the # are interleaved to avoid even/odd-length palindromes uniformly\n    // $ and @ are prepended and appended to each end to avoid bounds checking\n    private void preprocess() {\n        t = new char[s.length()*2 + 3];\n        t[0] = '$';\n        t[s.length()*2 + 2] = '@';\n        for (int i = 0; i < s.length(); i++) {\n            t[2*i + 1] = '#';\n            t[2*i + 2] = s.charAt(i);\n        }\n        t[s.length()*2 + 1] = '#';\n    }\n\n    // longest palindromic substring\n    public String longestPalindromicSubstring() {\n        int length = 0;   // length of longest palindromic substring\n        int center = 0;   // center of longest palindromic substring\n        for (int i = 1; i < p.length-1; i++) {\n            if (p[i] > length) {\n                length = p[i];\n                center = i;\n            }\n        }\n        return s.substring((center - 1 - length) / 2, (center - 1 + length) / 2);\n    }\n\n    // longest palindromic substring centered at index i/2\n    public String longestPalindromicSubstring(int i) {\n        int length = p[i + 2];\n        int center = i + 2;\n        return s.substring((center - 1 - length) / 2, (center - 1 + length) / 2);\n    }\n\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-substring"}