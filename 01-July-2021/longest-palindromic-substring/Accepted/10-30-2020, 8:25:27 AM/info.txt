{"id":414836756,"lang":"python3","time":"8Â months","timestamp":1604042727,"status_display":"Accepted","runtime":"816 ms","url":"/submissions/detail/414836756/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"14.2 MB","code":"class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        # O(n^2) time | O(1) space\n        n = len(s)\n\n        def getPalindromeRange(l, r):\n            while l >= 0 and r < n and s[l] == s[r]:\n                l -= 1\n                r += 1\n            return (l + 1, r - 1)\n\n        ans = (0, 0)\n        for i in range(n):\n            oneMid = getPalindromeRange(i, i)\n            if oneMid[1] - oneMid[0] > ans[1] - ans[0]:\n                ans = oneMid\n            if i < n - 1 and s[i] == s[i + 1]:\n                twoMid = getPalindromeRange(i, i+1)\n                if twoMid[1] - twoMid[0] > ans[1] - ans[0]:\n                    ans = twoMid\n        return s[ans[0]:ans[1]+1]","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-substring"}