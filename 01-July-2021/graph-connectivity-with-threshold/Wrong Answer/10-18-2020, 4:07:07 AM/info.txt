{"id":410065938,"lang":"java","time":"8 months, 2 weeks","timestamp":1602990427,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/410065938/","is_pending":"Not Pending","title":"Graph Connectivity With Threshold","memory":"N/A","code":"class Solution {\n    public List<Boolean> areConnected(int n, int threshold, int[][] queries) {\n        UnionFind union = new UnionFind(n);\n        for (int[] q: queries){\n            if (gcd(q[0], q[1]) > threshold) {\n                union.unify(q[0] - 1, q[1] - 1);\n//                out.println(q);\n            }\n\n        }\n\n        List<Boolean> ans = new ArrayList<>();\n        for (int[] q: queries){\n            if (union.connected(q[0] - 1, q[1] - 1))\n                ans.add(true);\n            else\n                ans.add(false);\n        }\n        return ans;\n    }\n    \n        class UnionFind {\n\n        private final int size;\n        private int groups;\n        private final int[] sizes;\n        private final int[] parents;\n\n        public int getSize() {\n            return size;\n        }\n\n        public int getGroups() {\n            return groups;\n        }\n\n        public int getSize(int p) {\n            return sizes[find(p)];\n        }\n\n        public UnionFind(int n) {\n            // zero indexed\n            this.size = this.groups = n;\n            sizes = new int[n];\n            parents = new int[n];\n\n            for (int i = 0; i < n; i++) {\n                parents[i] = i;\n                sizes[i] = 1;\n            }\n        }\n\n        public int find(int p) {\n            int root = p;\n            while (root != parents[root]) root = parents[root];\n\n            while (p != root) {\n                int temp = parents[p];\n                parents[p] = root;\n                p = temp;\n            }\n            return root;\n        }\n\n        public boolean connected(int p, int q) {\n            return find(p) == find(q);\n        }\n\n        public void unify(int p, int q) {\n            int root1 = find(p);\n            int root2 = find(q);\n            if (root1 == root2) return;\n\n            if (sizes[root1] < sizes[root2]) {\n                parents[root1] = root2;\n                sizes[root2] += sizes[root1];\n            } else {\n                parents[root2] = root1;\n                sizes[root1] += sizes[root2];\n            }\n            groups--;\n        }\n\n    }\n    private static long gcd(long m, long n) {\n        if(n == 0) return m;\n        return gcd(n, m % n);\n    }\n}","compare_result":"111111111111101111111111111011111101111111111110101111101111111110","title_slug":"graph-connectivity-with-threshold"}