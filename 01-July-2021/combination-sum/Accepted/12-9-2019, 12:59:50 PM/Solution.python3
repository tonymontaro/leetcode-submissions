// https://leetcode.com/problems/combination-sum

from collections import defaultdict, Counter

class Solution(object):
    def combinationSum(self, coins, t):
        coins.sort()
        result = []
        dfs(t, coins, [], result, defaultdict(list))
        return result

def dfs(t, coins, path, result, cache):
    counts = Counter(path)
    if counts in cache[len(path)]:
        return
    cache[len(path)].append(counts)
    if t == 0 and path:
        result.append(path)
        return
    for coin in coins:
        if coin <= t:
            dfs(t-coin, coins, path + [coin], result, cache)
        else:
            break