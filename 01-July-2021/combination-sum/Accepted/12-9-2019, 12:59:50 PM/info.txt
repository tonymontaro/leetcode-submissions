{"id":284781366,"lang":"python3","time":"1 year, 6 months","timestamp":1575892790,"status_display":"Accepted","runtime":"568 ms","url":"/submissions/detail/284781366/","is_pending":"Not Pending","title":"Combination Sum","memory":"13.6 MB","code":"from collections import defaultdict, Counter\n\nclass Solution(object):\n    def combinationSum(self, coins, t):\n        coins.sort()\n        result = []\n        dfs(t, coins, [], result, defaultdict(list))\n        return result\n\ndef dfs(t, coins, path, result, cache):\n    counts = Counter(path)\n    if counts in cache[len(path)]:\n        return\n    cache[len(path)].append(counts)\n    if t == 0 and path:\n        result.append(path)\n        return\n    for coin in coins:\n        if coin <= t:\n            dfs(t-coin, coins, path + [coin], result, cache)\n        else:\n            break","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum"}