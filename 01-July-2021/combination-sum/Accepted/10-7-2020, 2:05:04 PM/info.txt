{"id":405696401,"lang":"java","time":"8 months, 3 weeks","timestamp":1602075904,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/405696401/","is_pending":"Not Pending","title":"Combination Sum","memory":"39.2 MB","code":"class Solution {\n\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        List<List<Integer>>[] dp = new ArrayList[target + 1];\n        dp[0] = new ArrayList<>();\n        dp[0].add(new ArrayList<>());\n        sort(candidates);\n        for (int k : candidates) {\n            for (int i = k; i < target + 1; i++) {\n                if (dp[i - k] == null) continue;\n                if (dp[i] == null) dp[i] = new ArrayList<>();\n                List<List<Integer>> prev = dp[i - k];\n                for (List<Integer> pr : prev) {\n                    List<Integer> cr = new ArrayList<>(pr);\n                    cr.add(k);\n                    dp[i].add(cr);\n                }\n            }\n        }\n\n        return dp[target] == null ? new ArrayList<>() : dp[target];\n    }\n    static final Random random = new Random();\n    static void sort(int[] a) {\n        int n = a.length;// shuffle, then sort\n        for (int i = 0; i < n; i++) {\n            int oi = random.nextInt(n), temp = a[oi];\n            a[oi] = a[i];\n            a[i] = temp;\n        }\n        Arrays.sort(a);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum"}