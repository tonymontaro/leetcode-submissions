{"id":408651081,"lang":"python3","time":"8 months, 2 weeks","timestamp":1602684897,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/408651081/","is_pending":"Not Pending","title":"Encode String with Shortest Length","memory":"N/A","code":"class Solution:\n    def encode(self, s: str) -> str:\n        prev = len(s) + 1\n        # while (len(s) < prev):\n        #     self.dp = {}\n        #     prev = len(s)\n        #     s = self.shorten(0, s)\n        #     print(s, prev)\n        self.dp = {}\n        return self.shorten(s)\n        return s\n    def shorten(self, seq):\n        if (len(seq) <= 4): return seq\n        if (seq in self.dp): return self.dp[seq]\n\n        n = len(seq)\n        best = seq\n        half = (n + 1) // 2\n        for i in range(1, half + 1):\n            part = seq[:i]\n            count = 1\n            s = i\n            while (s < n):\n                if (seq[s:s+i] != part): break\n                count += 1\n                s += i\n            flatPart = f\"{count}[{part}]\"\n            # if count == 2:\n            #     print(seq, flatPart, len(part) * count, len(flatPart), s, seq[s:])\n            if (len(part) * count <= len(flatPart)): flatPart = part * count\n            else:\n                flatPart = self.shorten(part)\n                flatPart = f\"{count}[{flatPart}]\"\n            res = f\"{flatPart}{self.shorten(seq[s:])}\"\n            if (len(res) < len(best)): best = res\n\n        self.dp[seq] = best\n        return best\n        \n            ","compare_result":"1111111111111111111111111111111110101111","title_slug":"encode-string-with-shortest-length"}