{"id":417930515,"lang":"python3","time":"7 months, 3 weeks","timestamp":1604804910,"status_display":"Accepted","runtime":"116 ms","url":"/submissions/detail/417930515/","is_pending":"Not Pending","title":"Minimum Deletions to Make Character Frequencies Unique","memory":"14.7 MB","code":"from collections import Counter, deque\n\nclass Solution:\n    def minDeletions(self, s: str) -> int:\n        vals = Counter(s).values()\n        cnt = Counter(vals)\n        mx = max(cnt.keys())\n\n        seen = {}\n        for val in cnt:\n            if val not in seen:\n                seen[val] = True\n                cnt[val] -= 1\n        \n        ans = 0\n        remaining = sorted([[k, c] for k, c in cnt.items() if c > 0])\n        \n        deq = deque(remaining)\n        # print(seen)\n        # print(deq)\n        for i in range(mx, 0, -1):\n            if not deq:\n                return ans\n            if i in seen or i > deq[-1][0]:\n                continue\n\n            k, c = deq[-1]\n            ans += k - i\n            if c == 1:\n                deq.pop()\n            else:\n                deq[-1][1] -= 1\n        # print(ans, deq)\n        while deq:\n            k, c = deq.popleft()\n            ans += k * c\n        return ans\n                \n            ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-deletions-to-make-character-frequencies-unique"}