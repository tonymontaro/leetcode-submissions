{"id":417927397,"lang":"python3","time":"7 months, 3 weeks","timestamp":1604804500,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/417927397/","is_pending":"Not Pending","title":"Minimum Deletions to Make Character Frequencies Unique","memory":"N/A","code":"from collections import Counter, deque\n\nclass Solution:\n    def minDeletions(self, s: str) -> int:\n        vals = Counter(s).values()\n        cnt = Counter(vals)\n        mx = max(cnt.keys())\n\n        seen = {}\n        for val in cnt:\n            if val not in seen:\n                seen[val] = True\n                cnt[val] -= 1\n        \n        ans = 0\n        remaining = sorted([[k, c] for k, c in cnt.items() if c > 0])\n        \n        deq = deque(remaining)\n        # print(deq)\n        for i in range(1, mx + 2):\n            if i in seen:\n                continue\n            \n            while deq and deq[0][0] < i:\n                k, c = deq.popleft()\n                ans += k * c\n            if not deq:\n                return ans\n            k, c = deq[0]\n            ans += k - i\n            if c == 1:\n                deq.popleft()\n            else:\n                deq[0][1] -= 1\n        return ans\n                \n            ","compare_result":"1110111111110001111111111111111111010111111111111111111100000110010000010000000000000000000001000000100","title_slug":"minimum-deletions-to-make-character-frequencies-unique"}