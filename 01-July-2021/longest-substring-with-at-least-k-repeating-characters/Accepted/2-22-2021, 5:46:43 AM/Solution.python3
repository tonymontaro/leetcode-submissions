// https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters

from collections import defaultdict

class Solution:
    def longestSubstring(self, s: str, k: int) -> int:
        mx = len(set(s))
        
        def check(limit):
            ans = 0
            left = 0
            count = 0
            cnt = defaultdict(int)
            valid = 0
            for i, cha in enumerate(s):
                if cnt[cha] == 0:
                    count += 1
                while count > limit:
                    c = s[left]
                    if cnt[c] == k:
                        valid -= 1
                    cnt[c] -= 1
                    if cnt[c] == 0:
                        count -= 1
                    left += 1
                cnt[cha] += 1
                if cnt[cha] == k:
                    valid += 1
                if valid == count:
                    ans = max(ans, i - left + 1)
            return ans
        
        res = 0
        for i in range(1, mx + 1):
            res = max(res, check(i))
        return res
            