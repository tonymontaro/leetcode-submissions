{"id":411448104,"lang":"python3","time":"8 months, 1 week","timestamp":1603284577,"status_display":"Accepted","runtime":"112 ms","url":"/submissions/detail/411448104/","is_pending":"Not Pending","title":"Longest Substring with At Least K Repeating Characters","memory":"14.3 MB","code":"from collections import defaultdict\n\nclass Solution:\n    def longestSubstring(self, s: str, k: int) -> int:\n        # O(n * unique) -> O(n) time | O(unique) -> O(1) space\n        if not s:\n            return 0\n        uniqueLn = len(set(s))\n\n\n        def longest(unique):\n            inWindow = set()\n            best = 0\n            count = defaultdict(int)\n            last = 0\n            for i in range(len(s)):\n                c = s[i]\n                inWindow.add(c)\n                count[c] += 1\n                while len(inWindow) > unique:\n                    prev = s[last]\n                    last += 1\n                    count[prev] -= 1\n                    if count[prev] == 0:\n                        inWindow.remove(prev)\n                for c in inWindow:\n                    if count[c] < k:\n                        break\n                else:\n                    best = max(best, i - last + 1)\n            return best\n        \n\n        ans = 0\n        for i in range(1, uniqueLn + 1):\n            ans = max(ans, longest(i))\n        return ans\n                \n        ","compare_result":"1111111111111111111111111111","title_slug":"longest-substring-with-at-least-k-repeating-characters"}