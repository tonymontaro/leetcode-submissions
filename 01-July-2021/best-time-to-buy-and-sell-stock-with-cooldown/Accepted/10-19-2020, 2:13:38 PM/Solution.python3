// https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        # O(n) time and space
        n = len(prices)
        if n <= 0: return 0
        dp = [0] * n
        dp[0] = 0
        deal = -prices[0]
        for i in range(1, n):
            price = prices[i]
            dp[i] = max(dp[i - 1], price + deal)
            if i >= 2:
                deal = max(deal, dp[i - 2] - price)
            else:
                deal = max(deal, -price)
        return dp[-1]