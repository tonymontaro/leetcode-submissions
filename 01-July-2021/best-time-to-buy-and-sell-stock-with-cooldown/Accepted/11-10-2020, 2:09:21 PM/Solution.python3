// https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        # O(n) time and space
        if not prices:
            return 0
        
        n = len(prices)
        deal = -prices[0]
        dp = [0] * n
        # print(deal, dp[0])
        for i in range(1, n):
            dp[i] = max(dp[i - 1], prices[i] + deal)
            currentDeal = -prices[i]
            if i - 2 >= 0:
                currentDeal += dp[i - 2]
            deal = max(deal, currentDeal)
            # print(deal, dp[i])
        return dp[-1]