{"id":453037217,"lang":"python3","time":"4 months, 3 weeks","timestamp":1612670139,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/453037217/","is_pending":"Not Pending","title":"Closest Subsequence Sum","memory":"N/A","code":"from math import inf\n\nclass Solution:\n    def minAbsDifference(self, nums: List[int], goal: int) -> int:\n        cache = {}\n        n = len(nums)\n        nums.sort()\n        self.ans = math.inf\n\n        self.cnt = 0\n        def solve(idx, last, total, arr):\n            if idx >= last:\n                arr.add(total)\n                return\n            solve(idx + 1, last, total, arr)\n            solve(idx + 1, last, total + nums[idx], arr)\n        \n        half = n // 2\n        aa = set()\n        bb = set()\n        solve(0, half, 0, aa)\n        solve(half, n, 0, bb)\n        aa = sorted(aa)\n        bb = sorted(bb)\n        # print(sorted(bb))\n        ans = inf\n        for num in aa:\n            diff = goal - num\n            inc = len(bb) - 1\n            idx = 0\n            g = abs(diff - bb[idx])\n            while inc > 0 and idx + inc < len(bb):\n                b = abs(diff - bb[idx + inc])\n                if b < g:\n                    g = b\n                    idx = idx + inc\n                else:\n                    inc = inc // 2\n            # print(num, idx)\n            ans = min(ans, abs(goal - (num + bb[idx])))\n            \n        \n        return ans","compare_result":"111111111110110111111111101111111111111111111111000100111101111111111","title_slug":"closest-subsequence-sum"}