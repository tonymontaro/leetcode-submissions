{"id":448812170,"lang":"python3","time":"5Â months","timestamp":1611811081,"status_display":"Accepted","runtime":"4612 ms","url":"/submissions/detail/448812170/","is_pending":"Not Pending","title":"Sum of Subarray Minimums","memory":"68.4 MB","code":"from math import inf\n\nclass Solution:\n    def sumSubarrayMins(self, arr: List[int]) -> int:\n        mod = 10**9 + 7\n        n = len(arr)\n        sg = SegmentTree(0, n-1, arr)\n        self.ans = 0\n        def solve(l, r):\n            if l > r:\n                return\n            num, idx = sg.rangeSum(l, r)\n            ln = r - l + 1\n            total = 1\n            left = idx - l\n            right = r - idx\n            total += (left + right)\n            total += left * right\n            self.ans = (self.ans + total * num) % mod\n            # print(l, r, num, total)\n            solve(l, idx - 1)\n            solve(idx + 1, r)\n        solve(0, n-1)\n        return self.ans\n\n        \nclass SegmentTree:\n    def __init__(self, left, right, arr):\n        self.left = left\n        self.right = right\n        self.sum = (inf, -1)\n\n        if left == right:\n            self.sum = (arr[left], left)\n        else:\n            mid = (left + right) // 2\n            self.leftChild = SegmentTree(left, mid, arr)\n            self.rightChild = SegmentTree(mid + 1, right, arr)\n            self.reCalculate()\n\n    def reCalculate(self):\n        if self.left != self.right:\n            self.sum = min(self.leftChild.sum, self.rightChild.sum)\n    \n    def rangeSum(self, left, right):\n        if left > self.right or right < self.left:\n            return (inf, -1)\n        if self.left >= left and self.right <= right:\n            return self.sum\n        return min(self.leftChild.rangeSum(left, right), self.rightChild.rangeSum(left, right))\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-of-subarray-minimums"}