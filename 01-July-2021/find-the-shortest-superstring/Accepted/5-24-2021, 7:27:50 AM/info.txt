{"id":497477403,"lang":"cpp","time":"1 month, 1 week","timestamp":1621837670,"status_display":"Accepted","runtime":"992 ms","url":"/submissions/detail/497477403/","is_pending":"Not Pending","title":"Find the Shortest Superstring","memory":"138.5 MB","code":"#define ll long long\n#define umap unordered_map\n#define uset unordered_set\n#define pii pair<int, pair<int, int>>\n#define pi pair<int, int>\n#define v vector\n\n\n\nclass Solution {\npublic:\n    umap<string, umap<string, int>> mp;\n    string shortestSuperstring(vector<string>& words) {\n        for (auto& w1: words) {\n            for (auto& w2: words) overlap(w1, w2);\n        }\n        int n = words.size();\n        int dp[1 << n][n];\n        int parent[1 << n][n];\n        memset(dp, 0, sizeof(dp));\n        memset(parent, -1, sizeof(parent));\n\n        for (int mask = 0; mask < (1 << n); mask++) {\n            for (int bit = 0; bit < n; bit++) {\n                int pmask = (1 << bit) ^ mask;\n                if (((1 << bit) & mask) == 0 || pmask == 0) continue;\n                for (int lastSetElement = 0; lastSetElement < n; lastSetElement++) {\n                    if (((1 << lastSetElement) & pmask) == 0) continue;\n                    int val = dp[pmask][lastSetElement] + overlap(words[lastSetElement], words[bit]);\n                    if (val >= dp[mask][bit]) {\n                        dp[mask][bit] = val;\n                        parent[mask][bit] = lastSetElement;\n                    }\n                }\n            }\n        }\n        vector<int> best;\n        int mask = (1 << n) - 1;\n        int node = 0;\n        for (int i = 0; i < n; i++) if (dp[mask][i] > dp[mask][node]) node = i;\n\n        best.push_back(node);\n        while (mask != 0) {\n            int p = parent[mask][node];\n            if (p == -1) break;\n            mask = (1 << node) ^ mask;\n            node = p;\n            best.push_back(node);\n        }\n        reverse(best.begin(), best.end());\n        string ans = words[best[0]];\n        for (int i = 1; i < n; i++) {\n            int offset = overlap(words[best[i - 1]], words[best[i]]);\n            ans += words[best[i]].substr(offset);\n        }\n        return ans;\n    }\n    int overlap(string a, string b) {\n        if (mp.find(a) != mp.end() && mp[a].find(b) != mp[a].end()) return mp[a][b];\n        for (int i = 0; i < a.size(); i++) {\n            int j = i, z = 0;\n            while (j < a.size() && a[j] == b[z]){\n                j++; z++;\n            }\n            if (j == a.size()) {\n                mp[a][b] = z;\n                return z;\n            }\n        }\n        mp[a][b] = 0;\n        return 0;\n    }\n    int countBit(int num){\n        int ans = 0;\n        while (num > 0) {\n            ans = ans + (num & 1);\n            num >>= 1;\n        }\n        return ans;\n    }\n};\n\n\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-shortest-superstring"}