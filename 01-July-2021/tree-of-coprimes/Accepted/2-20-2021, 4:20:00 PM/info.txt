{"id":458387338,"lang":"python3","time":"4 months, 1 week","timestamp":1613834400,"status_display":"Accepted","runtime":"4264 ms","url":"/submissions/detail/458387338/","is_pending":"Not Pending","title":"Tree of Coprimes","memory":"119.1 MB","code":"from math import gcd, inf\nfrom collections import defaultdict\n\nclass Solution:\n    def getCoprimes(self, nums: List[int], edges: List[List[int]]) -> List[int]:\n        visited = {}\n        n = len(nums)\n        result = [0] * n\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        def solve(node, depth, seen):\n            visited[node] = 1\n            val = nums[node]\n            ans = -1\n            d = inf\n            for k in seen.keys():\n                if len(seen[k]) == 0:\n                    continue\n                if gcd(val, k) == 1 and (depth - seen[k][-1][1]) < d:\n                    d = depth - seen[k][-1][1]\n                    ans = seen[k][-1][0]\n            seen[val].append((node, depth))\n            result[node] = ans\n            for child in adj[node]:\n                if child in visited:\n                    continue\n                solve(child, depth + 1, seen)\n            seen[val].pop()\n        seen = defaultdict(list)\n        solve(0, 0, seen)\n        return result\n","compare_result":"111111111111111111111111111111111111","title_slug":"tree-of-coprimes"}