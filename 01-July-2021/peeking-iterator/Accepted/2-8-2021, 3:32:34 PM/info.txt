{"id":453634620,"lang":"python3","time":"4 months, 3 weeks","timestamp":1612794754,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/453634620/","is_pending":"Not Pending","title":"Peeking Iterator","memory":"14.7 MB","code":"# Below is the interface for Iterator, which is already defined for you.\n#\n# class Iterator:\n#     def __init__(self, nums):\n#         \"\"\"\n#         Initializes an iterator object to the beginning of a list.\n#         :type nums: List[int]\n#         \"\"\"\n#\n#     def hasNext(self):\n#         \"\"\"\n#         Returns true if the iteration has more elements.\n#         :rtype: bool\n#         \"\"\"\n#\n#     def next(self):\n#         \"\"\"\n#         Returns the next element in the iteration.\n#         :rtype: int\n#         \"\"\"\n\nclass PeekingIterator:\n    def __init__(self, iterator):\n        \"\"\"\n        Initialize your data structure here.\n        :type iterator: Iterator\n        \"\"\"\n        self.it = iterator\n        self.res = None\n        self.next()\n        \n\n    def peek(self):\n        \"\"\"\n        Returns the next element in the iteration without advancing the iterator.\n        :rtype: int\n        \"\"\"\n        return self.res\n        \n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        val = self.res\n        if self.it.hasNext():\n            self.res = self.it.next()\n        else:\n            self.res = None\n        return val\n        \n\n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        return self.res != None\n        \n\n# Your PeekingIterator object will be instantiated and called as such:\n# iter = PeekingIterator(Iterator(nums))\n# while iter.hasNext():\n#     val = iter.peek()   # Get the next element but not advance the iterator.\n#     iter.next()         # Should return the same value as [val].","compare_result":"1111111111111","title_slug":"peeking-iterator"}