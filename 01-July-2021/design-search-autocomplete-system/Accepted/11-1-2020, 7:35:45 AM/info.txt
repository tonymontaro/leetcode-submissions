{"id":415495065,"lang":"python3","time":"8Â months","timestamp":1604212545,"status_display":"Accepted","runtime":"460 ms","url":"/submissions/detail/415495065/","is_pending":"Not Pending","title":"Design Search Autocomplete System","memory":"18.3 MB","code":"from collections import defaultdict\n\nclass Node:\n    def __init__(self, word, count):\n        self.word = word\n        self.count = count\n        \n    def __gt__(self, other):\n        if self.count == other.count:\n            return self.word < other.word\n        return self.count > other.count\n    def __eq__(self, other):\n        return self is other\n    def __repr__(self):\n        return self.word + \" \" + str(self.count)\n\nclass AutocompleteSystem:\n\n    def __init__(self, sentences: List[str], times: List[int]):\n        self.trie = {}\n        self.nodes = {}\n        self.node = self.trie\n        self.seen = []\n        for word, cnt in zip(sentences, times):\n            self.nodes[word] = Node(word, 0)\n            self.add(word, cnt)\n\n    \n    def add(self, word, count):\n        node = self.trie\n        wordNode = self.nodes[word]\n        wordNode.count += count\n\n        for cha in word:\n            if cha not in node:\n                node[cha] = {\"#\": []}\n            arr = node[cha][\"#\"]\n            if len(arr) < 3 or wordNode in arr or wordNode > min(arr):\n                if wordNode not in arr:\n                    if len(arr) >= 3 and wordNode > min(arr):\n                        arr.pop()\n                    arr.append(wordNode)\n                arr.sort(reverse=True)\n            node = node[cha]\n\n    def input(self, c: str) -> List[str]:\n        if c == \"#\":\n            if self.seen:\n                word = \"\".join(self.seen)\n                if word not in self.nodes:\n                    self.nodes[word] = Node(word, 0)\n                self.add(word, 1)\n                self.seen = []\n                self.node = self.trie\n            return []\n        if c not in self.node:\n            self.node[c] = {\"#\": []}\n        self.seen.append(c)\n        result = [node.word for node in self.node[c][\"#\"]]\n        self.node = self.node[c]\n        return result\n\n\n# Your AutocompleteSystem object will be instantiated and called as such:\n# obj = AutocompleteSystem(sentences, times)\n# param_1 = obj.input(c)","compare_result":"1111111111111111111111111111111111111111111","title_slug":"design-search-autocomplete-system"}