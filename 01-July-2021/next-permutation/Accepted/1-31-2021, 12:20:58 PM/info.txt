{"id":450108022,"lang":"python3","time":"5Â months","timestamp":1612092058,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/450108022/","is_pending":"Not Pending","title":"Next Permutation","memory":"14.3 MB","code":"class Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        next_permutation(nums)\n        \ndef next_permutation(a):\n    \"\"\"Generate the lexicographically next permutation inplace.\n\n    https://en.wikipedia.org/wiki/Permutation#Generation_in_lexicographic_order\n    Return false if there is no next permutation.\n    \"\"\"\n    # Find the largest index i such that a[i] < a[i + 1]. If no such\n    # index exists, the permutation is the last permutation\n    for i in reversed(range(len(a) - 1)):\n        if a[i] < a[i + 1]:\n            break  # found\n    else:  # no break: not found\n        a[:] = a[::-1]\n        return False  # no next permutation\n\n    # Find the largest index j greater than i such that a[i] < a[j]\n    j = next(j for j in reversed(range(i + 1, len(a))) if a[i] < a[j])\n\n    # Swap the value of a[i] with that of a[j]\n    a[i], a[j] = a[j], a[i]\n\n    # Reverse sequence from a[i + 1] up to and including the final element a[n]\n    a[i + 1:] = reversed(a[i + 1:])\n    return True","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"next-permutation"}