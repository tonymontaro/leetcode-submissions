{"id":448360724,"lang":"python3","time":"5Â months","timestamp":1611723093,"status_display":"Accepted","runtime":"668 ms","url":"/submissions/detail/448360724/","is_pending":"Not Pending","title":"Minimum Knight Moves","memory":"55.4 MB","code":"from collections import deque\n\nclass Solution:\n    cseen = {(0, 0): 0}\n    queue = deque([(0, 0, 0)])\n\n    def minKnightMoves(self, endX: int, endY: int) -> int:\n        dirs = [(-2, 1), (-1, 2), (1, 2), (2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1)]\n        seen = self.cseen\n        deq = self.queue\n        \n        if (endX, endY) in seen:\n            return seen[(endX, endY)]\n        \n        while deq:\n            x, y, dist = deq.popleft()\n            if (x, y) == (endX, endY):\n                return dist\n            for addX, addY in dirs:\n                xx, yy = x + addX, y + addY\n                if (xx, yy) not in seen:\n                    seen[(xx, yy)] = dist + 1\n                    deq.append((xx, yy, dist + 1))\n        \n","compare_result":"11111111111111111111111111111111111111111","title_slug":"minimum-knight-moves"}