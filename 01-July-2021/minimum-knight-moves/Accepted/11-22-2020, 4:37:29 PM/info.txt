{"id":422981330,"lang":"python3","time":"7 months, 1 week","timestamp":1606059449,"status_display":"Accepted","runtime":"5896 ms","url":"/submissions/detail/422981330/","is_pending":"Not Pending","title":"Minimum Knight Moves","memory":"70.1 MB","code":"from collections import deque\n\nclass Solution:\n    def minKnightMoves(self, x: int, y: int) -> int:\n        seen = {}\n        queue = deque()\n        queue.append((x, y, 0))\n        seen[(x, y)] = True\n        neighbors = [(-2, 1), (-1, 2), (1, 2), (2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1)]\n        \n        while queue:\n            oldX, oldY, move = queue.popleft()\n            \n            if (oldX, oldY) == (0, 0):\n                return move\n            \n            for xAdd, yAdd in neighbors:\n                x, y = oldX + xAdd, oldY + yAdd\n                if (x, y) not in seen:\n                    seen[(x, y)] = True\n                    queue.append((x, y, move + 1))\n        return 0\n                    \n        ","compare_result":"11111111111111111111111111111111111111","title_slug":"minimum-knight-moves"}