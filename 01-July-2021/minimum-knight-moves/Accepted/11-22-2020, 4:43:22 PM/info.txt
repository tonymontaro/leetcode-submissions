{"id":422982514,"lang":"python3","time":"7 months, 1 week","timestamp":1606059802,"status_display":"Accepted","runtime":"716 ms","url":"/submissions/detail/422982514/","is_pending":"Not Pending","title":"Minimum Knight Moves","memory":"55.6 MB","code":"from collections import deque\n\nclass Solution:\n    seen = {(0, 0): 0}\n    queue = deque([(0, 0, 0)])\n\n    def minKnightMoves(self, startX: int, startY: int) -> int:\n        if (startX, startY) in self.seen:\n            return self.seen[(startX, startY)]\n        neighbors = [(-2, 1), (-1, 2), (1, 2), (2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1)]\n\n        while self.queue:\n            oldX, oldY, move = self.queue.popleft()\n            \n            if (oldX, oldY) == (startX, startY):\n                return move\n            \n            for xAdd, yAdd in neighbors:\n                x, y = oldX + xAdd, oldY + yAdd\n                if (x, y) not in self.seen:\n                    self.seen[(x, y)] = move + 1\n                    self.queue.append((x, y, move + 1))\n        return 0\n","compare_result":"11111111111111111111111111111111111111","title_slug":"minimum-knight-moves"}