{"id":418842948,"lang":"python3","time":"7 months, 3 weeks","timestamp":1605020318,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/418842948/","is_pending":"Not Pending","title":"Word Break II","memory":"16.4 MB","code":"class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        if not s or not wordDict:\n            return []\n        trie = {}\n        def add(word):\n            node = trie\n            for cha in word:\n                if cha not in node:\n                    node[cha] = {}\n                node = node[cha]\n            node[\"*\"] = 1\n        for word in wordDict:\n            add(word)\n        \n        n = len(s)\n        cache = {}\n        def search(idx, node):\n            if idx in cache:\n                return cache[idx]\n            if idx >= n:\n                return [[]]\n            \n            chars = []\n            res = []\n            for i in range(idx, n):\n                if s[i] not in node:\n                    break\n                chars.append(s[i])\n                node = node[s[i]]\n                if \"*\" in node:\n                    w = \"\".join(chars)\n                    other = search(i + 1, trie)\n                    for otherArr in other:\n                        res.append([w] + otherArr)\n                    # print(w, other)\n            cache[idx] = res\n            return res\n        \n        search(0, trie)\n        # print(cache)\n        return [\" \".join(arr) for arr in cache[0]]\n                ","compare_result":"111111111111111111111111111111111111","title_slug":"word-break-ii"}