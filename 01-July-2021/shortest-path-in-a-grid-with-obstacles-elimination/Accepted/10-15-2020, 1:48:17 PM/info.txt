{"id":409043129,"lang":"python3","time":"8 months, 2 weeks","timestamp":1602766097,"status_display":"Accepted","runtime":"212 ms","url":"/submissions/detail/409043129/","is_pending":"Not Pending","title":"Shortest Path in a Grid with Obstacles Elimination","memory":"14.2 MB","code":"from collections import deque\n\nclass Solution:\n    def shortestPath(self, grid: List[List[int]], originalK: int) -> int:\n        # bfs: O(n*m*k) time | O(n*m) space\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        visited = {}\n        deq = deque()\n        rowlen = len(grid)\n        colen = len(grid[0])\n        deq.append((0, 0, 0, originalK))\n        c = 0\n        while deq:\n            if c > 200: break\n            c += 1\n            row, col, dist, k = deq.popleft()\n            if (row == rowlen - 1 and col == colen - 1): return dist\n            k = k if grid[row][col] == 0 else k - 1\n            if (k < 0): continue\n            for d in directions:\n                r, c = row + d[0], col + d[1]\n                isValid = r >= 0 and c >= 0 and r < rowlen and c < colen and ((r, c) not in visited or visited[(r,c)] < k)\n                if isValid:\n                    visited[(r, c)] = k\n                    deq.append((r, c, dist + 1, k))\n            \n        return -1\n        \n        \n        \n        ","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-a-grid-with-obstacles-elimination"}