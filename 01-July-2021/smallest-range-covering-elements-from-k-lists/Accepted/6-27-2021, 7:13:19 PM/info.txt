{"id":514046176,"lang":"cpp","time":"3 days, 12 hours","timestamp":1624817599,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/514046176/","is_pending":"Not Pending","title":"Smallest Range Covering Elements from K Lists","memory":"14.7 MB","code":"#define pi pair<ll, ll>\n#define pii pair<ll, pi>\n#define v vector\n#define ll long long\n\n\nclass Solution {\npublic:\n    vector<int> smallestRange(vector<vector<int>>& nums) {\n        int mx = -1e6;\n        priority_queue<pii, v<pii>, greater<>> pq;\n        for (int i = 0; i < nums.size(); i++) {\n            mx = max(mx, nums[i][0]);\n            pq.push({nums[i][0], {i, 0}});\n        }\n        int mn = pq.top().first;\n        v<int> ans = {mx, mn};\n        while (true) {\n            auto last = pq.top();\n            pq.pop();\n            int aidx = last.second.first;\n            int idx = last.second.second;\n            if (idx == nums[aidx].size() - 1) break;\n            int val = nums[aidx][idx + 1];\n            mx = max(mx, val);\n            pq.push({val, {aidx, idx + 1}});\n            mn = pq.top().first;\n            if (mx - mn < ans[0] - ans[1]) ans = {mx, mn};\n        }\n        return {ans[1], ans[0]};\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-range-covering-elements-from-k-lists"}