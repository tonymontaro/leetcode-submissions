// https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from collections import defaultdict

class Solution:
    def pseudoPalindromicPaths (self, root: TreeNode) -> int:
        self.res = 0
        
        def dfs(node, seen):
            if node is None:
                return
            
            seen[node.val] += 1
            if node.left is None and node.right is None:
                ones = 0
                for v in seen.values():
                    ones += v % 2 == 1
                if ones <= 1:
                    self.res += 1
            
            dfs(node.right, seen)
            dfs(node.left, seen)
            seen[node.val] -= 1
        
        dfs(root, defaultdict(int))
        return self.res
        