{"id":402989973,"lang":"java","time":"9Â months","timestamp":1601531129,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/402989973/","is_pending":"Not Pending","title":"Largest Values From Labels","memory":"N/A","code":"class Solution {\n    public int largestValsFromLabels(int[] values, int[] labels, int num_wanted, int use_limit) {\n        HashMap<Integer, Item> items = new HashMap<>();\n        int n = labels.length;\n        for (int i = 0; i < n; i++) {\n            int label = labels[i];\n            if (!items.containsKey(label)) items.put(label, new Item(label, use_limit));\n            items.get(label).add(values[i]);\n        }\n        TreeSet<Item> set = new TreeSet<>();\n        for (Item item: items.values()) set.add(item);\n        int total = 0;\n        while (!set.isEmpty() && num_wanted > 0) {\n            Item last = set.pollLast();\n            if (last.isValid())\n                total += last.get();\n            if (last.isValid())\n                set.add(last);\n            num_wanted--;\n        }\n\n        return total;\n    }\n\n    class Item implements Comparable<Item> {\n        public int label;\n        public int limit;\n        TreeSet<Integer> elements;\n\n        public Item(int label, int limit) {\n            this.label = label;\n            this.limit = limit;\n            this.elements = new TreeSet<>();\n        }\n\n        public void add(int num) {\n            elements.add(num);\n        }\n\n        public Integer get() {\n            limit--;\n            return elements.pollLast();\n        }\n\n        public boolean isValid() {\n            return limit > 0 && !elements.isEmpty();\n        }\n\n        public int getTop() {\n            if (elements.isEmpty()) return Integer.MIN_VALUE;\n            return elements.last();\n        }\n\n        @Override\n        public int compareTo(Item o) {\n            if (this.getTop() == o.getTop())\n                return Integer.compare(this.label, o.label);\n            return Integer.compare(this.getTop(), o.getTop());\n        }\n\n        @Override\n        public String toString() {\n            return label + \": \" + getTop();\n        }\n    }\n\n}","compare_result":"111111111111110111001101111101111111111110110111111111111111111110111111111111101","title_slug":"largest-values-from-labels"}