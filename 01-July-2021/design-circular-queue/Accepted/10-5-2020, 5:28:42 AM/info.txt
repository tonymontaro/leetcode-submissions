{"id":404674075,"lang":"java","time":"8 months, 4 weeks","timestamp":1601872122,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/404674075/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"40 MB","code":"class MyCircularQueue {\n    int capacity;\n    int n;\n    Node head;\n    Node tail;\n\n    /**\n     * Initialize your data structure here. Set the size of the queue to be k.\n     */\n    public MyCircularQueue(int k) {\n        capacity = k;\n        n = 0;\n    }\n\n    /**\n     * Insert an element into the circular queue. Return true if the operation is successful.\n     */\n    public boolean enQueue(int value) {\n        if (n == capacity) return false;\n        Node node = new Node(value);\n        if (n == 0) {\n            head = node;\n        } else {\n            tail.next = node;\n        }\n        tail = node;\n        n++;\n        return true;\n    }\n\n    /** Delete an element from the circular queue. Return true if the operation is successful. */\n    public boolean deQueue() {\n        if (n == 0) return false;\n        Node node = head.next;\n        head.next = null;\n        head = node;\n        n--;\n        if (n == 0)\n            tail = null;\n        return true;\n    }\n\n    /** Get the front item from the queue. */\n    public int Front() {\n        if (n==0) return -1;\n        return head.val;\n    }\n\n    /** Get the last item from the queue. */\n    public int Rear() {\n        if (n == 0) return -1;\n        return tail.val;\n    }\n\n    /** Checks whether the circular queue is empty or not. */\n    public boolean isEmpty() {\n        return n == 0;\n    }\n\n    /** Checks whether the circular queue is full or not. */\n    public boolean isFull() {\n        return n == capacity;\n    }\n\n    class Node {\n        int val;\n        public Node next;\n\n        Node(int val) {\n            this.val = val;\n        }\n    }\n}\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue obj = new MyCircularQueue(k);\n * boolean param_1 = obj.enQueue(value);\n * boolean param_2 = obj.deQueue();\n * int param_3 = obj.Front();\n * int param_4 = obj.Rear();\n * boolean param_5 = obj.isEmpty();\n * boolean param_6 = obj.isFull();\n */","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"design-circular-queue"}