// https://leetcode.com/problems/minimum-number-of-refueling-stops

class Solution:
    def minRefuelStops(self, target: int, startFuel: int, stations: List[List[int]]) -> int:
        # dp[i] => furthest you can travel using i stations
        # O(n^2) time | O(n) space where n => len(stations)
        if startFuel >= target:
            return 0
        n = len(stations)
        dp = [-1] * (n + 1)
        dp[0] = startFuel
        for i, (dist, fuel) in enumerate(stations):
            i += 1
            
            if dp[i - 1] < dist:
                return -1
            for j in range(i, 0, -1):
                if dp[j - 1] < dist:
                    break
                dp[j] = max(dp[j], fuel + dp[j - 1])
        
            if dp[i] >= target:
                return i
        return -1
            
        