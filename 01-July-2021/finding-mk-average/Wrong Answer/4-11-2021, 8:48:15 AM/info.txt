{"id":479214569,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1618127295,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/479214569/","is_pending":"Not Pending","title":"Finding MK Average","memory":"N/A","code":"\n#define ll long long\n#define umap unordered_map\n#define uset unordered_set\n#define pii pair<int, pair<int, int>>\n#define pi pair<int, int>\n#define v vector\n\n\nclass MinHeap {\npublic:\n    priority_queue<pi, v<pi>> pq;\n    priority_queue<pi, v<pi>, greater<>> pall;\n    int seen[100001];\n    ll total = 0;\n    int k, m;\n    int cnt = 0;\n    void init(int kk, int mm) {\n        k = kk, m = mm;\n        memset(seen, 0, sizeof(seen));\n    }\n    void add(int num, int idx) {\n        if (cnt >= k) {\n            if (pq.top().first > num)\n                poptop();\n            else {\n                pall.push({num, idx});\n                return;\n            }\n        }\n        cnt++;\n        pq.push({num, idx});\n        seen[idx] = 1;\n        total += num;\n    }\n    void poptop() {\n        auto x = pq.top();\n        seen[x.second] = 0;\n        total -= x.first;\n        pall.push(x);\n        pq.pop();\n        while (seen[pq.top().second] == -1)\n            pq.pop();\n        while (!pall.empty() && seen[pall.top().second] == -1)\n            pall.pop();\n    }\n    void remove(int num, int idx) {\n        int prev = seen[idx];\n        seen[idx] = -1;\n        while (!pall.empty() && seen[pall.top().second] == -1)\n            pall.pop();\n        if (prev == 1) {\n            total -= num;\n            auto nxt = pall.top();\n            seen[nxt.second] = 1;\n            pall.pop();\n            pq.push(nxt);\n            total += nxt.first;\n        }\n        while (seen[pq.top().second] == -1)\n            pq.pop();\n    }\n};\n\nclass MaxHeap {\npublic:\n    priority_queue<pi, v<pi>, greater<>> pq;\n    priority_queue<pi, v<pi>> pall;\n    int seen[100001];\n    ll total = 0;\n    int k, m;\n    int cnt = 0;\n    void init(int kk, int mm) {\n        k = kk, m = mm;\n        memset(seen, 0, sizeof(seen));\n    }\n    void add(int num, int idx) {\n        if (cnt >= k) {\n            if (pq.top().first < num)\n                poptop();\n            else {\n                pall.push({num, idx});\n                return;\n            }\n        }\n        cnt++;\n        pq.push({num, idx});\n        seen[idx] = 1;\n        total += num;\n    }\n    void poptop() {\n        auto x = pq.top();\n        seen[x.second] = 0;\n        total -= x.first;\n        pall.push(x);\n        pq.pop();\n        while (seen[pq.top().second] == -1)\n            pq.pop();\n        while (!pall.empty() && seen[pall.top().second] == -1)\n            pall.pop();\n    }\n    void remove(int num, int idx) {\n        int prev = seen[idx];\n        seen[idx] = -1;\n        while (!pall.empty() && seen[pall.top().second] == -1)\n            pall.pop();\n        if (prev == 1) {\n            total -= num;\n            auto nxt = pall.top();\n            seen[nxt.second] = 1;\n            pall.pop();\n            pq.push(nxt);\n            total += nxt.first;\n        }\n        while (seen[pq.top().second] == -1)\n            pq.pop();\n    }\n};\n\n\n\nclass MKAverage {\npublic:\n    MinHeap mnh;\n    MaxHeap mxh;\n    int idx = 0;\n    v<pi> items;\n    int m, k;\n    ll total = 0;\n    MKAverage(int mm, int kk) {\n        m = mm, k = kk;\n        mnh.init(k, m);\n        mxh.init(k, m);\n    }\n\n    void addElement(int num) {\n        items.push_back({num, idx});\n        if (idx >= m) {\n            auto x = items[idx-m];\n            mnh.remove(x.first, x.second);\n            mxh.remove(x.first, x.second);\n            total -= x.first;\n        }\n        total += num;\n        mnh.add(num, idx);\n        mxh.add(num, idx);\n        idx++;\n    }\n\n    int calculateMKAverage() {\n        if (idx < m) return -1;\n        return total - mnh.total - mxh.total;\n    }\n};\n","compare_result":"1000000000000000000000000000000","title_slug":"finding-mk-average"}