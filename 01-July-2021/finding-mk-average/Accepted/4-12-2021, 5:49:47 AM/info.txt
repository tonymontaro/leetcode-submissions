{"id":479582605,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1618202987,"status_display":"Accepted","runtime":"432 ms","url":"/submissions/detail/479582605/","is_pending":"Not Pending","title":"Finding MK Average","memory":"156.5 MB","code":"#define ll long long\n#define umap unordered_map\n#define uset unordered_set\n#define pii pair<int, pair<int, int>>\n#define pi pair<int, int>\n#define v vector\n\n\n\n\nclass MKAverage {\npublic:\n    int m, k, midSize;\n    int idx = 0;\n    ll total = 0;\n    v<int> arr;\n    multiset<int> left, mid, right;\n    MKAverage(int m, int k) : m(m), k(k), midSize(m - 2 * k) {\n        arr = v<int>(m);\n    }\n    void remove(int num){\n        auto found = left.find(num);\n        if (found != left.end()) {\n            left.erase(found);\n        } else {\n            found = mid.find(num);\n            if (found != mid.end()) {\n                total -= num;\n                mid.erase(found);\n            } else {\n                found = right.find(num);\n                right.erase(num);\n            }\n        }\n        rebalance();\n    }\n    void add(int num) {\n        left.insert(num);\n        if (idx >= m)\n            rebalance();\n    }\n    void rebalance() {\n        while (left.size() < k) {\n            auto lowestMid = mid.begin();\n            left.insert(*lowestMid);\n            total -= *lowestMid;\n            mid.erase(lowestMid);\n        }\n        while (left.size() > k) {\n            auto highestLeft = --left.end();\n            total += *highestLeft;\n            mid.insert(*highestLeft);\n            left.erase(highestLeft);\n        }\n        while (mid.size() < midSize) {\n            auto lowestRight = right.begin();\n            total += *lowestRight;\n            mid.insert(*lowestRight);\n            right.erase(lowestRight);\n        }\n        while (mid.size() > midSize) {\n            auto highestMid = --mid.end();\n            right.insert(*highestMid);\n            total -= *highestMid;\n            mid.erase(highestMid);\n        }\n    }\n\n    void addElement(int num) {\n        if (idx >= m) {\n            remove(arr[idx % m]);\n        }\n        arr[idx % m] = num;\n        idx++;\n        add(num);\n        \n    }\n\n    int calculateMKAverage() {\n        if (idx < m) return -1;\n        return total / midSize;\n    }\n};","compare_result":"1111111111111111111111111111111","title_slug":"finding-mk-average"}