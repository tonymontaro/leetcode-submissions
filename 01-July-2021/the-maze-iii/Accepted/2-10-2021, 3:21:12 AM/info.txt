{"id":454252566,"lang":"python3","time":"4 months, 3 weeks","timestamp":1612923672,"status_display":"Accepted","runtime":"1264 ms","url":"/submissions/detail/454252566/","is_pending":"Not Pending","title":"The Maze III","memory":"14.8 MB","code":"from collections import defaultdict\n\nclass Solution:\n    def findShortestWay(self, grid: List[List[int]], ball: List[int], hole: List[int]) -> str:\n        hole = tuple(hole)\n        rlen, clen = len(grid), len(grid[0])\n        a, b = ball\n        seen = {(a, b): 0}\n        result = defaultdict(list)\n        dirs = [(0, 1, 'r'), (0, -1, 'l'), (1, 0, 'd'), (-1, 0, 'u')]\n        \n        def backtrack(row, col, arr, dist):\n            if (row, col) in seen and dist > seen[(row, col)]:\n                return\n            seen[(row, col)] = dist\n            \n            for rAdd, cAdd, direct in dirs:\n                r, c = row, col\n                d = 0\n                arr.append(direct)\n                while 0 <= r < rlen and 0 <= c < clen and grid[r][c] == 0:\n                    if (r, c) == hole:\n                        result[dist + d].append(''.join(arr))\n                        arr.pop()\n                        return\n                    r, c = r + rAdd, c + cAdd\n                    d += 1\n                if d == 1:\n                    arr.pop()\n                    continue\n                r, c = r - rAdd, c - cAdd\n                backtrack(r, c, arr, dist + d - 1)\n                arr.pop()\n        \n        backtrack(a, b, [], 0)\n        keys = result.keys()\n        return min(result[min(keys)]) if keys else 'impossible'\n                ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"the-maze-iii"}