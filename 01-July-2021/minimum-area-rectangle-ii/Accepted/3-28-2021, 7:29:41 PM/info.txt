{"id":473536849,"lang":"cpp","time":"3Â months","timestamp":1616956181,"status_display":"Accepted","runtime":"192 ms","url":"/submissions/detail/473536849/","is_pending":"Not Pending","title":"Minimum Area Rectangle II","memory":"9.3 MB","code":"#define ll long long\n#define umap unordered_map\n#define uset unordered_set\n#define pii pair<int, pair<int, int>>\n#define v vector\n\n\n\nclass Solution {\npublic:\n    double minAreaFreeRect(vector<vector<int>>& points) {\n        int n = points.size();\n        double ans = INT_MAX;\n        set<pair<int, int>> seen;\n        for (auto x: points) seen.insert({x[0], x[1]});\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (j == i) continue;\n                for (int k = 0; k < n; k++) {\n                    if (k == i || k == j) continue;\n                    double ij = distance(points[i], points[j]);\n                    double jk = distance(points[j], points[k]);\n                    if (ij + jk != distance(points[i], points[k])) continue;\n                    int x = points[i][0] + points[k][0] - points[j][0];\n                    int y = points[i][1] + points[k][1] - points[j][1];\n                    if (seen.find({x, y}) == seen.end()) continue;\n\n                    double res = sqrt(ij) * sqrt(jk);\n                    ans = min(ans, res);\n                }\n            }\n        }\n        return (ans == INT_MAX) ? 0 : ans;\n    }\n    double distance(v<int> &p1, v<int> &p2) {\n        double x = p1[0] - p2[0];\n        double y = p1[1] - p2[1];\n        return (x * x) + (y * y);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-area-rectangle-ii"}