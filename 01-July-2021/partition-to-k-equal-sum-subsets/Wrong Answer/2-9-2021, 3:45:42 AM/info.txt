{"id":453849517,"lang":"python3","time":"4 months, 3 weeks","timestamp":1612838742,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/453849517/","is_pending":"Not Pending","title":"Partition to K Equal Sum Subsets","memory":"N/A","code":"class Solution:\n    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:\n        n = len(nums)\n        t = (1 << n) - 1\n        sm = sum(nums)\n        if sm % k != 0:\n            return False\n        \n        cache = {}\n        def solve(mask, filled):\n            if filled == (k - 1):\n                return True\n            if (mask, filled) in cache:\n                return False\n            rem = sum([nums[i] for i in range(n) if ((1 << i) & mask) != 0]) % k\n            if rem == 0:\n                rem = k\n            \n            for i in range(n):\n                if ((1 << i) & mask) == 0 or nums[i] > rem:\n                    continue\n                nMask = mask ^ (1 << i)\n                nFilled = (filled + 1) if rem == nums[i] else filled\n                if solve(nMask, nFilled):\n                    return True\n            cache[(mask, filled)] = 1\n            return False\n        \n        return solve(t, 0)\n        ","compare_result":"11001000010101111010011110111111111111111011011000000000000000000000000000000000000000000000000100011111110111111111011111111111101111111111111111111","title_slug":"partition-to-k-equal-sum-subsets"}