// https://leetcode.com/problems/parallel-courses

class Node:
    def __init__(self, k):
        self.val = k
        self.children = []

class Solution:
    def minimumSemesters(self, N: int, relations: List[List[int]]) -> int:
        ids = {x: Node(x) for x in range(1, N + 1)}
        self.id = 0
        
        for x, y in relations:
            ids[x].children.append(ids[y])
        
        def topological(node, visited):
            visited[node.val] = 1
            for child in node.children:
                if child.val not in visited:
                    topological(child, visited)
            visited[node.val] = self.id
            self.id += 1
        
        visited = {}
        [topological(ids[x], visited) for x in range(1, N + 1) if x not in visited]
        for x, y in relations:
            if visited[y] > visited[x]:
                return -1
        
        def dfs(node, seen):
            if node.val in seen:
                return seen[node.val]
            depth = 0
            for child in node.children:
                depth = max(depth, dfs(child, seen))
            seen[node.val] = depth + 1
            return depth + 1
        seen = {}
        depths = [dfs(ids[x], seen) for x in range(1, N + 1)]
        # print(depths)
        return max(depths)