{"id":441029942,"lang":"python3","time":"5 months, 3 weeks","timestamp":1610260421,"status_display":"Accepted","runtime":"284 ms","url":"/submissions/detail/441029942/","is_pending":"Not Pending","title":"Parallel Courses","memory":"17.1 MB","code":"class Node:\n    def __init__(self, k):\n        self.val = k\n        self.children = []\n\nclass Solution:\n    def minimumSemesters(self, N: int, relations: List[List[int]]) -> int:\n        ids = {x: Node(x) for x in range(1, N + 1)}\n        self.id = 0\n        \n        for x, y in relations:\n            ids[x].children.append(ids[y])\n        \n        def topological(node, visited):\n            visited[node.val] = 1\n            for child in node.children:\n                if child.val not in visited:\n                    topological(child, visited)\n            visited[node.val] = self.id\n            self.id += 1\n        \n        visited = {}\n        [topological(ids[x], visited) for x in range(1, N + 1) if x not in visited]\n        for x, y in relations:\n            if visited[y] > visited[x]:\n                return -1\n        \n        def dfs(node, seen):\n            if node.val in seen:\n                return seen[node.val]\n            depth = 0\n            for child in node.children:\n                depth = max(depth, dfs(child, seen))\n            seen[node.val] = depth + 1\n            return depth + 1\n        seen = {}\n        depths = [dfs(ids[x], seen) for x in range(1, N + 1)]\n        # print(depths)\n        return max(depths)","compare_result":"11111111111111111111111111111111111111","title_slug":"parallel-courses"}