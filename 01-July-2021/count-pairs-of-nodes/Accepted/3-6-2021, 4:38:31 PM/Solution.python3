// https://leetcode.com/problems/count-pairs-of-nodes

from collections import defaultdict
import bisect

class Solution:
    def countPairs(self, n: int, edges, queries):
        cnt = {i: 0 for i in range(1, n + 1)}
        adj = [defaultdict(int) for _ in range(n + 1)]
        for a, b in edges:
            cnt[a] += 1
            cnt[b] += 1
            adj[a][b] += 1
            adj[b][a] += 1
        arr = sorted(cnt.values())
        
        def solve(q):
            ans = 0
            for i in range(1, n + 1):
                if cnt[i] > q:
                    ans += n - 1
                    continue
                diff = q - cnt[i] + 1
                greater = n - bisect.bisect_left(arr, diff)
                if cnt[i] >= diff:
                    greater -= 1
                for child in adj[i].keys():
                    total  = cnt[i] + cnt[child]
                    actual = total - adj[i][child]
                    if total > q and actual <= q:
                        greater -= 1
                ans += greater
    #             print(i, greater)
            return ans
        ans = []
        for q in queries:
            ans.append(solve(q) // 2)
        return ans
