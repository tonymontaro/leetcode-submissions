{"id":464274135,"lang":"python3","time":"3 months, 3 weeks","timestamp":1615045111,"status_display":"Accepted","runtime":"6964 ms","url":"/submissions/detail/464274135/","is_pending":"Not Pending","title":"Count Pairs Of Nodes","memory":"62.1 MB","code":"from collections import defaultdict\nimport bisect\n\nclass Solution:\n    def countPairs(self, n: int, edges, queries):\n        cnt = {i: 0 for i in range(1, n + 1)}\n        adj = [defaultdict(int) for _ in range(n + 1)]\n        for a, b in edges:\n            cnt[a] += 1\n            cnt[b] += 1\n            adj[a][b] += 1\n            adj[b][a] += 1\n        arr = sorted(cnt.values())\n        \n        def solve(q):\n            ans = 0\n            for i in range(1, n + 1):\n                if cnt[i] > q:\n                    ans += n - 1\n                    continue\n                diff = q - cnt[i] + 1\n                greater = n - bisect.bisect_left(arr, diff)\n                if cnt[i] >= diff:\n                    greater -= 1\n                for child in adj[i].keys():\n                    total  = cnt[i] + cnt[child]\n                    actual = total - adj[i][child]\n                    if total > q and actual <= q:\n                        greater -= 1\n                ans += greater\n    #             print(i, greater)\n            return ans\n        ans = []\n        for q in queries:\n            ans.append(solve(q) // 2)\n        return ans\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-pairs-of-nodes"}