{"id":444797863,"lang":"python3","time":"5Â months, 1Â week","timestamp":1611015327,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/444797863/","is_pending":"Not Pending","title":"Nested List Weight Sum","memory":"14.5 MB","code":"# \"\"\"\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class NestedInteger:\n#    def __init__(self, value=None):\n#        \"\"\"\n#        If value is not specified, initializes an empty list.\n#        Otherwise initializes a single integer equal to value.\n#        \"\"\"\n#\n#    def isInteger(self):\n#        \"\"\"\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        :rtype bool\n#        \"\"\"\n#\n#    def add(self, elem):\n#        \"\"\"\n#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\n#        :rtype void\n#        \"\"\"\n#\n#    def setInteger(self, value):\n#        \"\"\"\n#        Set this NestedInteger to hold a single integer equal to value.\n#        :rtype void\n#        \"\"\"\n#\n#    def getInteger(self):\n#        \"\"\"\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        :rtype int\n#        \"\"\"\n#\n#    def getList(self):\n#        \"\"\"\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        :rtype List[NestedInteger]\n#        \"\"\"\n\nclass Solution:\n    def depthSum(self, nestedList: List[NestedInteger]) -> int:\n        \n        def solve(arr, depth):\n            ans = 0\n            for item in arr:\n                if item.isInteger():\n                    ans += depth * item.getInteger()\n                else:\n                    ans += solve(item.getList(), depth + 1)\n            return ans\n        \n        return solve(nestedList, 1)","compare_result":"1111111111111111111111111","title_slug":"nested-list-weight-sum"}