{"id":455469659,"lang":"python3","time":"4 months, 2 weeks","timestamp":1613208828,"status_display":"Accepted","runtime":"676 ms","url":"/submissions/detail/455469659/","is_pending":"Not Pending","title":"Shortest Path in Binary Matrix","memory":"15.3 MB","code":"from collections import deque\n\nclass Solution:\n    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        if grid[0][0] == 1 or grid[n-1][n-1] == 1:\n            return -1\n        \n        deq = deque()\n        deq.append((0, 0, 1))\n        dirs = [(i, j) for i in range(-1, 2) for j in range(-1, 2) if not (i == 0 and j == 0)]\n        seen = {(0, 0): 1}\n        \n        while deq:\n            row, col, dist = deq.popleft()\n            if (row, col) == (n-1,n-1):\n                return dist\n            for rAdd, cAdd in dirs:\n                r, c = row + rAdd, col + cAdd\n                if 0 <= r < n and 0 <= c < n and grid[r][c] == 0  and (r, c) not in seen:\n                    seen[(r, c)] = 1\n                    deq.append((r, c, dist + 1))\n        return -1\n        \n                    ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-binary-matrix"}