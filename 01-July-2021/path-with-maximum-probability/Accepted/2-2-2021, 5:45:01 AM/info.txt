{"id":450882218,"lang":"python3","time":"4 months, 4 weeks","timestamp":1612241101,"status_display":"Accepted","runtime":"944 ms","url":"/submissions/detail/450882218/","is_pending":"Not Pending","title":"Path with Maximum Probability","memory":"25.7 MB","code":"from heapq import heappush, heappop\n\nclass Solution:\n    def maxProbability(self, n: int, edges: List[List[int]], succProb: List[float], start: int, end: int) -> float:\n        adj = [[] for _ in range(n + 1)]\n        for i, (a, b) in enumerate(edges):\n            prob = succProb[i]\n            adj[a].append((b, prob))\n            adj[b].append((a, prob))\n        \n        heap = [(-1, start)]\n        seen = {start: 1}\n        while heap:\n            prob, node = heappop(heap)\n            prob = -prob\n            if node == end:\n                return prob\n            \n            for child, p in adj[node]:\n                calc = p*prob\n                if child in seen and seen[child] >= calc:\n                    continue\n                \n                seen[child] = calc\n                heappush(heap, (-calc, child))\n        return 0","compare_result":"1111111111111111","title_slug":"path-with-maximum-probability"}