{"id":403765735,"lang":"java","time":"9Â months","timestamp":1601698641,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/403765735/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"56.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass BSTIterator {\n    Deque<TreeNode> deque = new ArrayDeque<>();\n    public BSTIterator(TreeNode root) {\n        dfs(root);\n    }\n\n    void dfs(TreeNode node) {\n        if (node == null) return;\n        dfs(node.left);\n        deque.addLast(node);\n        dfs(node.right);\n    }\n\n    /**\n     * @return the next smallest number\n     */\n    public int next() {\n        if (deque.isEmpty()) return -1;\n        return deque.pollFirst().val;\n    }\n\n    /**\n     * @return whether we have a next smallest number\n     */\n    public boolean hasNext() {\n        return !deque.isEmpty();\n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator obj = new BSTIterator(root);\n * int param_1 = obj.next();\n * boolean param_2 = obj.hasNext();\n */","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator"}