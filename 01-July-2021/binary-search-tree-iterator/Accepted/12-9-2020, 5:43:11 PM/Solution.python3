// https://leetcode.com/problems/binary-search-tree-iterator

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class BSTIterator:

    def __init__(self, root: TreeNode):
        self.arr = []
        self.add(root)
        
    def add(self, node):
        if not node:
            return
        self.arr.append(node)
        while self.arr[-1].left:
            self.arr.append(self.arr[-1].left)

    def next(self) -> int:
        res = self.arr.pop()
        self.add(res.right)
        return res.val

    def hasNext(self) -> bool:
        return len(self.arr) >= 1


# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()