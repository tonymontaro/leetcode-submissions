{"id":428929887,"lang":"python3","time":"6 months, 3 weeks","timestamp":1607532191,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/428929887/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"20.4 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator:\n\n    def __init__(self, root: TreeNode):\n        self.arr = []\n        self.add(root)\n        \n    def add(self, node):\n        if not node:\n            return\n        self.arr.append(node)\n        while self.arr[-1].left:\n            self.arr.append(self.arr[-1].left)\n\n    def next(self) -> int:\n        res = self.arr.pop()\n        self.add(res.right)\n        return res.val\n\n    def hasNext(self) -> bool:\n        return len(self.arr) >= 1\n\n\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator(root)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator"}