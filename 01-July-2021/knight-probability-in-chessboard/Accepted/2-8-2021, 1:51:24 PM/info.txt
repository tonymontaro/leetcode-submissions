{"id":453611617,"lang":"python3","time":"4 months, 3 weeks","timestamp":1612788684,"status_display":"Accepted","runtime":"200 ms","url":"/submissions/detail/453611617/","is_pending":"Not Pending","title":"Knight Probability in Chessboard","memory":"19.8 MB","code":"class Solution:\n    def knightProbability(self, N: int, K: int, row: int, col: int) -> float:\n        # r, c, rem\n        rlen = clen = N\n        cache = {}\n        dirs = [(-1, -2), (-2, -1), (-2, 1), (-1, 2), (1, -2), (2, -1), (2, 1), (1, 2)]\n        \n        def solve(r, c, moves):\n            if moves == 0:\n                return 1\n            if (r, c, moves) in cache:\n                return cache[(r, c, moves)]\n            \n            ans = 0\n            \n            for rAdd, cAdd in dirs:\n                rr, cc = r + rAdd, c + cAdd\n                if 0 <= rr < rlen and 0 <= cc < rlen:\n                    ans += (1/8 * solve(rr, cc, moves-1))\n            \n            cache[(r, c, moves)] = ans\n            return ans\n        \n        return solve(row, col, K)","compare_result":"111111111111111111111","title_slug":"knight-probability-in-chessboard"}