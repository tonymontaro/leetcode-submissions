{"id":307682141,"lang":"python3","time":"1 year, 4 months","timestamp":1582894419,"status_display":"Accepted","runtime":"204 ms","url":"/submissions/detail/307682141/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"13.8 MB","code":"class Solution:\n    def maximalRectangle(self, grid) -> int:\n        \"\"\"O(col * row) time | O(col) space\"\"\"\n        if not grid: return 0\n        heights = [int(i) for i in grid[0]]\n        total = self.largestRectangleArea(heights)\n        \n        for r in range(1, len(grid)):\n            heights = [heights[c]+1 if grid[r][c] == '1' else 0 for c in range(len(grid[0]))]\n            total = max(total, self.largestRectangleArea(heights))\n        return total\n        \n    def largestRectangleArea(self, arr):\n        \"\"\"O(n) time and space\"\"\"\n        total = 0\n        stack = []\n        for i in range(len(arr)):\n            width_idx = i\n            while stack and stack[-1][0] > arr[i]:\n                val, w_idx = stack.pop()\n                total = max(total, val * (i - w_idx))\n                width_idx = w_idx\n            stack.append((arr[i], width_idx))\n        for val, w_idx in stack:\n            total = max(total, val * (len(arr) - w_idx))\n        return total","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-rectangle"}