// https://leetcode.com/problems/design-hashmap

class Node:
    def __init__(self, key, val):
        self.key   = key
        self.val = val
        self.next = None

class Bucket:
    def __init__(self):
        self.head = None
        self.tail = None
    
    def add(self, key, val):
        node  = self.head
        while node:
            if node.key == key:
                node.val = val
                return
            node = node.next
        
        node = Node(key, val)
        if not self.tail:
            self.tail = node
            self.head = node
        else:
            self.tail.next = node
            self.tail = node
    
    def get(self, key):
        node = self.head
        while node:
            if node.key == key:
                return node.val
            node = node.next
        return -1
    
    def delete(self, key):
        node = self.head
        prev = None
        while node and node.key != key:
            prev = node
            node = node.next
        if not node:
            return
        if not prev:
            self.head = node.next
        else:
            prev.next = node.next
        node.next = None
    
    

class MyHashMap:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.MAX = 10000
        self.arr = [Bucket() for _ in range(self.MAX)]
        

    def put(self, key: int, value: int) -> None:
        """
        value will always be non-negative.
        """
        self.arr[key % self.MAX].add(key, value)
        

    def get(self, key: int) -> int:
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        """
        return self.arr[key % self.MAX].get(key)
        

    def remove(self, key: int) -> None:
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        """
        self.arr[key % self.MAX].delete(key)
        


# Your MyHashMap object will be instantiated and called as such:
# obj = MyHashMap()
# obj.put(key,value)
# param_2 = obj.get(key)
# obj.remove(key)