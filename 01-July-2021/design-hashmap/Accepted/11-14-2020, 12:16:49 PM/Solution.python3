// https://leetcode.com/problems/design-hashmap

class Node:
    def __init__(self, key, val):
        self.key   = key
        self.val = val
        self.next = None

class Bucket:
    def __init__(self):
        self.arr = []
    
    def add(self, key, val):
        for i, (k, v) in enumerate(self.arr):
            if k == key:
                self.arr[i][1] = val
                return
        self.arr.append([key, val])
        

    def get(self, key):
        for i, (k, v) in enumerate(self.arr):
            if k == key:
                return v
        return -1

    def delete(self, key):
        for i, (k, v) in enumerate(self.arr):
            if k == key:
                self.arr.pop(i)
                break


class MyHashMap:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.MAX = 100
        self.arr = [Bucket() for _ in range(self.MAX)]
        

    def put(self, key: int, value: int) -> None:
        """
        value will always be non-negative.
        """
        self.arr[key % self.MAX].add(key, value)
        

    def get(self, key: int) -> int:
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        """
        ans = self.arr[key % self.MAX].get(key)
        return ans
        

    def remove(self, key: int) -> None:
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        """
        self.arr[key % self.MAX].delete(key)
        # print("check", self.arr[key % self.MAX].get(key))
        


# Your MyHashMap object will be instantiated and called as such:
# obj = MyHashMap()
# obj.put(key,value)
# param_2 = obj.get(key)
# obj.remove(key)