{"id":420138679,"lang":"python3","time":"7 months, 2 weeks","timestamp":1605348394,"status_display":"Accepted","runtime":"228 ms","url":"/submissions/detail/420138679/","is_pending":"Not Pending","title":"Design HashMap","memory":"17.3 MB","code":"class Node:\n    def __init__(self, key, val):\n        self.key   = key\n        self.val = val\n        self.next = None\n\nclass Bucket:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n    \n    def add(self, key, val):\n        node  = self.head\n        while node:\n            if node.key == key:\n                node.val = val\n                return\n            node = node.next\n        \n        node = Node(key, val)\n        if not self.tail:\n            self.tail = node\n            self.head = node\n        else:\n            self.tail.next = node\n            self.tail = node\n    \n    def get(self, key):\n        node = self.head\n        while node:\n            if node.key == key:\n                return node.val\n            node = node.next\n        return -1\n    \n    def delete(self, key):\n        node = self.head\n        prev = None\n        while node and node.key != key:\n            prev = node\n            node = node.next\n        if not node:\n            return\n        if not prev:\n            self.head = node.next\n        else:\n            prev.next = node.next\n        if node.next is None:\n            self.tail = prev\n        node.next = None\n    \n    \n\nclass MyHashMap:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.MAX = 1000\n        self.arr = [Bucket() for _ in range(self.MAX)]\n        \n\n    def put(self, key: int, value: int) -> None:\n        \"\"\"\n        value will always be non-negative.\n        \"\"\"\n        self.arr[key % self.MAX].add(key, value)\n        \n\n    def get(self, key: int) -> int:\n        \"\"\"\n        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\n        \"\"\"\n        ans = self.arr[key % self.MAX].get(key)\n        return ans\n        \n\n    def remove(self, key: int) -> None:\n        \"\"\"\n        Removes the mapping of the specified value key if this map contains a mapping for the key\n        \"\"\"\n        self.arr[key % self.MAX].delete(key)\n        # print(\"check\", self.arr[key % self.MAX].get(key))\n        \n\n\n# Your MyHashMap object will be instantiated and called as such:\n# obj = MyHashMap()\n# obj.put(key,value)\n# param_2 = obj.get(key)\n# obj.remove(key)","compare_result":"111111111111111111111111111111111","title_slug":"design-hashmap"}