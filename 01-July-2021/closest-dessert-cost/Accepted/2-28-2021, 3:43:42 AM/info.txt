{"id":461512165,"lang":"python3","time":"4Â months","timestamp":1614480222,"status_display":"Accepted","runtime":"1176 ms","url":"/submissions/detail/461512165/","is_pending":"Not Pending","title":"Closest Dessert Cost","memory":"14.1 MB","code":"from math import inf\n\nclass Solution:\n    def closestCost(self, base: List[int], topping: List[int], target: int) -> int:\n        self.ans = inf\n        n = len(topping)\n        \n        def solve(idx, cost):\n            if idx >= n:\n                a, b = abs(cost - target), abs(self.ans - target)\n                if a < b or (a == b and cost < self.ans):\n                    self.ans = cost\n                return \n            solve(idx + 1, cost)\n            solve(idx + 1, topping[idx] + cost)\n            solve(idx + 1, topping[idx]*2 + cost)\n        for b in base:\n            solve(0, b)\n        return self.ans","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"closest-dessert-cost"}