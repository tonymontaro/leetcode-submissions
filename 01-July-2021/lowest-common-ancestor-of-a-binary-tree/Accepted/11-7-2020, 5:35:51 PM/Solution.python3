// https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        self.ancestor = None
        def dfs(node):
            if not node:
                return 0
            
            count = 1 if node == p or node == q else 0
            count += dfs(node.left)
            count += dfs(node.right)
            
            if count == 2 and self.ancestor is None:
                self.ancestor = node
            return count
        
        dfs(root)
        return self.ancestor