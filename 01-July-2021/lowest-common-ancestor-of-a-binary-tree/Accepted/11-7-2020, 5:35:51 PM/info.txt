{"id":417767390,"lang":"python3","time":"7 months, 3 weeks","timestamp":1604766951,"status_display":"Accepted","runtime":"84 ms","url":"/submissions/detail/417767390/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"27.4 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        self.ancestor = None\n        def dfs(node):\n            if not node:\n                return 0\n            \n            count = 1 if node == p or node == q else 0\n            count += dfs(node.left)\n            count += dfs(node.right)\n            \n            if count == 2 and self.ancestor is None:\n                self.ancestor = node\n            return count\n        \n        dfs(root)\n        return self.ancestor","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree"}