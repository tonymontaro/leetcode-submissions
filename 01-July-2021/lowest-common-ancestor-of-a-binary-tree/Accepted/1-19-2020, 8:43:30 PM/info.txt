{"id":295631213,"lang":"python3","time":"1 year, 5 months","timestamp":1579463010,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/295631213/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"23.3 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    \"\"\"O(n) time | O(d) space | d -> recursive depth, usually logn\"\"\"\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        self.ancestor = None\n        self.helper(root, p.val, q.val)\n        return self.ancestor\n    \n    def helper(self, node, p, q):\n        \n        if not node or self.ancestor is not None:\n            return 0\n        result = 0\n        if node.val in [p, q]:\n            result += 1\n        result += self.helper(node.left, p, q) + self.helper(node.right, p, q)\n        if result == 2 and self.ancestor is None:\n            self.ancestor = node\n        return result","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree"}