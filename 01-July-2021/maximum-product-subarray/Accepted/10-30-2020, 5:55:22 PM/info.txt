{"id":414951168,"lang":"python3","time":"8Â months","timestamp":1604076922,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/414951168/","is_pending":"Not Pending","title":"Maximum Product Subarray","memory":"14.1 MB","code":"from math import inf\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        # O(n) time and O(1) space\n        if not nums:\n            return 0\n        \n        n = len(nums)\n        best = -inf\n        prev = [None, None]\n        for i, num in enumerate(nums):\n            best = max(best, num)\n            if num == 0:\n                prev = [None, None]\n            elif num > 0:\n                prev[0] = prev[0] * num if prev[0] is not None else num\n                best = max(best, prev[0])\n                if prev[1] is not None:\n                    prev[1] *= num\n            else:\n                pos = prev[1] * num if prev[1] is not None else None\n                if pos is not None:\n                    best = max(best, pos)\n                neg = prev[0] * num if prev[0] is not None else num\n                prev = [pos, neg]\n        return best","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-subarray"}