{"id":298167781,"lang":"python3","time":"1 year, 5 months","timestamp":1580227607,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/298167781/","is_pending":"Not Pending","title":"Word Break","memory":"13.8 MB","code":"class Trie:\n    def __init__(self):\n        self.node = {}\n        self.end = '*'\n        self.cache = {}\n    \n    def add(self, word):\n        node = self.node\n        for ch in word:\n            if ch not in node:\n                node[ch] = {}\n            node = node[ch]\n        node[self.end] = True\n    \n    def word_break(self, word, idx, node=None, depth=0):\n        depth += 1\n        if (idx, depth) not in self.cache:\n            node = node or self.node\n            ch = word[idx]\n            if idx >= len(word)-1:\n                self.cache[(idx, depth)] = ch in node and self.end in node[ch]\n            elif ch not in node:\n                self.cache[(idx, depth)] = False\n            elif self.end in node[ch]:\n                self.cache[(idx, depth)] = (\n                    self.word_break(word, idx+1, node[ch], depth)\n                    or self.word_break(word, idx+1, self.node, 0)\n                )\n            else:\n                self.cache[(idx, depth)] = self.word_break(word, idx+1, node[ch], depth)\n        return self.cache[(idx, depth)]\n        \n\nclass Solution:\n    \"\"\"O(s + d) time and space | s->string, d->dictionary\"\"\"\n    def wordBreak(self, s: str, word_dict) -> bool:\n        trie = Trie()\n        [trie.add(word) for word in word_dict]\n        return trie.word_break(s, 0)","compare_result":"111111111111111111111111111111111111","title_slug":"word-break"}