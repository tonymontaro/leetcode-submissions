{"id":451046605,"lang":"python3","time":"4 months, 4 weeks","timestamp":1612274681,"status_display":"Accepted","runtime":"276 ms","url":"/submissions/detail/451046605/","is_pending":"Not Pending","title":"Squirrel Simulation","memory":"16.5 MB","code":"from collections import deque\n\nclass Solution:\n    def minDistance(self, rlen: int, clen: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        nuts = {(a, b): [] for a, b in nuts}\n        dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        \n        def bfs(x, y):\n            uncounted = len(nuts)\n            deq = deque()\n            deq.append((x, y, 0))\n            seen = {}\n            while uncounted > 0:\n                r, c, dist = deq.popleft()\n                if (r, c) in nuts:\n                    uncounted -= 1\n                    nuts[(r, c)].append(dist)\n                for rAdd, cAdd in dirs:\n                    rr, cc = r + rAdd, c + cAdd\n                    if 0 <= rr < rlen and 0 <= cc < clen and (rr, cc) not in seen:\n                        seen[(rr, cc)] = 1\n                        deq.append((rr, cc, dist + 1))\n        \n        bfs(*tree)\n        bfs(*squirrel)\n\n        mn = min(nuts.keys(), key=lambda x: nuts[x][1]-nuts[x][0])\n        ans = 0\n        for (r, c), (a, b) in nuts.items():\n            if (r, c) == mn:\n                ans += a + b\n            else:\n                ans += a*2\n        \n        return ans","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"squirrel-simulation"}