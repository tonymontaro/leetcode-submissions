// https://leetcode.com/problems/minimum-degree-of-a-connected-trio-in-a-graph

class Solution:
    def minTrioDegree(self, n: int, edges: List[List[int]]) -> int:
        adj = [set() for _ in range(n + 1)]
        for a, b in edges:
            adj[a].add(b)
            adj[b].add(a)
        
        def inDegree(a, b, c):
            return len(adj[a]) + len(adj[b]) + len(adj[c]) - 6
        
        ans = inf
        for a in range(1, n + 1):
            for b in adj[a]:
                if b < a:
                    continue
                for c in adj[b]:
                    if c > b and c in adj[a]:
                        ans = min(ans, inDegree(a, b, c))
                        if ans == 0:
                            return ans
        return ans if ans != inf else -1