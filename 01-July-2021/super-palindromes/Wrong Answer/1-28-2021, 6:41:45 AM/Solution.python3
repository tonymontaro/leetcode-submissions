// https://leetcode.com/problems/super-palindromes

class Solution:
    arrr = []
    
    def initSuperPalindromes(self):
        self.arr = []
        def generate(idx, n, arr, num):
            if idx >= n:
                self.arr.append(num)
                return
            if idx > n // 2 or (n % 2 == 0 and idx >= n // 2):
                d = arr[n - idx - 1]
                arr.append(d)
                generate(idx + 1, n, arr, num*10 + d)
                arr.pop()
                return
            for i in range(10):
                arr.append(i)
                generate(idx + 1, n, arr, num*10 + i)
                arr.pop()
        for j in range(1, 9):
            for i in range(1, 10):
                generate(1, j, [i], i)
                
        def isSuper(num):
            num = str(num)
            l, r = 0, len(num) - 1
            while l <= r:
                if num[l] != num[r]:
                    return False
                l += 1
                r -= 1
            return True
        arr = []
        for a in self.arr:
            num = a * a
            if isSuper(num):
                arr.append(num)
        self.arrr[:] = arr

    def superpalindromesInRange(self, left: str, right: str) -> int:
        if not self.arrr:
            self.initSuperPalindromes()
        left, right = int(left), int(right)
        ans = 0
        for num in self.arrr:
            if left <= num <= right:
                ans += 1
        return ans