{"id":454097428,"lang":"python3","time":"4 months, 3 weeks","timestamp":1612891345,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/454097428/","is_pending":"Not Pending","title":"Domino and Tromino Tiling","memory":"14.9 MB","code":"class Solution:\n    cache = {}\n    def numTilings(self, N: int) -> int:\n        mod = 10**9 + 7\n\n        def solve(a, b):\n            if a == 0 and b == 0:\n                return 1\n            if a < 0 or b < 0 or abs(a - b) > 2:\n                return 0\n            if (a, b) in self.cache:\n                return self.cache[(a, b)]\n            ans = 0\n            \n            if a == b:\n                ans = (ans + solve(a-1, b-1)) % mod\n                ans = (ans + solve(a-2, b-2)) % mod\n                ans = (ans + solve(a-1, b-2)) % mod\n                ans = (ans + solve(a-2, b-1)) % mod\n            if b - a == 1:\n                ans = (ans + solve(a-1, b-2)) % mod\n                ans = (ans + solve(a, b-2)) % mod\n            if a - b  == 1:\n                ans = (ans + solve(a-2, b-1)) % mod\n                ans = (ans + solve(a-2, b)) % mod\n            \n            \n            self.cache[(a, b)] = ans\n            return ans\n        \n        a = solve(N, N)\n        # print(cache)\n        return a","compare_result":"111111111111111111111111111111111111111","title_slug":"domino-and-tromino-tiling"}