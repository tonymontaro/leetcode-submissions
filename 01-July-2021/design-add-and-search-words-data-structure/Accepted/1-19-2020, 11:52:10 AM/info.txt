{"id":295543025,"lang":"python3","time":"1 year, 5 months","timestamp":1579431130,"status_display":"Accepted","runtime":"400 ms","url":"/submissions/detail/295543025/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"23.1 MB","code":"class WordDictionary:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = {}\n        self.endCharacter = '*'\n\n    def addWord(self, word):\n        \"\"\"\n        Adds a word into the data structure.\n        \"\"\"\n        node = self.root\n        for ch in word:\n            if ch not in node:\n                node[ch] = {}\n            node = node[ch]\n        node[self.endCharacter] = True\n\n\n    def search(self, word, start=0, node=None):\n        \"\"\"\n        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\n        \"\"\"\n        if node is None:\n            node = self.root\n        if type(node) is bool:\n            return False\n        result = False\n        for i in range(start, len(word)):\n            if word[i] == '.':\n                for ch in node.keys():\n                    result = result or self.search(word, i+1, node[ch])\n                return result\n            elif word[i] not in node:\n                return False\n            node = node[word[i]]\n        if self.endCharacter in node:\n            return True\n        return False\n                \n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)","compare_result":"1111111111111","title_slug":"design-add-and-search-words-data-structure"}