{"id":421980102,"lang":"python3","time":"7 months, 1 week","timestamp":1605786214,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/421980102/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"14.1 MB","code":"from collections import deque\n\nclass Solution:\n    def orangesRotting(self, grid: List[List[int]]) -> int:\n        # O(r * c) time and space\n        \n        queue = deque()\n        rowlen = len(grid)\n        colen = len(grid[0])\n        fresh = 0\n        \n        for r in range(rowlen):\n            for c in range(colen):\n                if grid[r][c] == 1:\n                    fresh += 1\n                elif grid[r][c] == 2:\n                    queue.append((0, r, c))\n        \n        neighbors = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        days = 0\n        while queue:\n            day, row, col = queue.popleft()\n            days = max(day, days)\n            \n            for rAdd, cAdd in neighbors:\n                r, c = rAdd + row, cAdd + col\n                isValid = 0 <= r < rowlen and 0 <= c < colen and grid[r][c] == 1\n                if isValid:\n                    fresh -= 1\n                    grid[r][c] = 2\n                    queue.append((day + 1, r, c))\n\n        return days if fresh == 0 else -1\n        \n            ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotting-oranges"}