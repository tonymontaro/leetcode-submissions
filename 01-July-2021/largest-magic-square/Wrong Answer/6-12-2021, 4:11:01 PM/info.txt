{"id":506848858,"lang":"cpp","time":"2 weeks, 4 days","timestamp":1623510661,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/506848858/","is_pending":"Not Pending","title":"Largest Magic Square","memory":"N/A","code":"#define pi pair<ll, ll>\n#define pii pair<ll, pi>\n#define v vector\n#define ll long long\n\nclass Solution {\npublic:\n    int largestMagicSquare(vector<vector<int>>& grid) {\n        int ans = 1;\n        int rlen = grid.size(), clen = grid[0].size();\n        v<v<int>> rows(51, v<int>(51));\n        v<v<int>> cols(51, v<int>(51));\n        for (int r = 0; r < rlen; r++) {\n            for (int c = 0; c < clen; c++) {\n                rows[c][r + 1] = rows[c][r] + grid[r][c];\n                cols[r][c + 1] = cols[r][c] + grid[r][c];\n            }\n        } \n        for (int i = 2; i < min(rlen, clen) + 1; i++) {\n            for (int r = 0; r < rlen - i + 1; r++) {\n                for (int c = 0; c < clen - i + 1; c++) {\n                    if (validate(grid, rows, cols, r, c, i)) {\n                        ans = i;\n                        break;\n                    }\n                }\n            }\n        } \n        return ans;\n    }\n    bool validate(v<v<int>>& grid, v<v<int>> &rows, v<v<int>> &cols, int row, int col, int n) {\n\n        int df = rows[col][row + n] - rows[col][row];\n        int r1 = 0, r2 = 0;\n        for (int i = 0; i < n; i++) {\n            r1 += grid[row + i][col + i];\n            r2 += grid[row + i][col + n - 1];\n            if (rows[col + i][row + n] - rows[col + i][row] != df) return false;\n            if (cols[row + i][col + n] - cols[row + i][col] != df) return false;\n        } \n        return r1 == df && r2 == df;\n    }\n};\n","compare_result":"1111111111111111111111111111111111111010101111111111111111001111110111","title_slug":"largest-magic-square"}