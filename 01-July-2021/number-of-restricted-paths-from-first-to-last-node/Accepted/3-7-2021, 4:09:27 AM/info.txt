{"id":464510160,"lang":"python3","time":"3 months, 3 weeks","timestamp":1615086567,"status_display":"Accepted","runtime":"3064 ms","url":"/submissions/detail/464510160/","is_pending":"Not Pending","title":"Number of Restricted Paths From First to Last Node","memory":"50.3 MB","code":"from collections import deque, defaultdict\nfrom heapq import heappush, heappop\nfrom functools import lru_cache\n\nclass Solution:\n    def countRestrictedPaths(self, n: int, edges: List[List[int]]) -> int:\n        adj = {i: defaultdict(int) for i in range(1, n + 1)}\n        for a, b, w in edges:\n            adj[a][b] = w\n            adj[b][a] = w\n        \n        hp = []\n        tmp = {n: 0}\n        hp.append((0, n))\n        seen = {}\n        while hp:\n            dist, node = heappop(hp)\n            if node in seen:\n                continue\n            seen[node] = dist\n            for child in adj[node]:\n                d = dist + adj[node][child]\n                if child not in tmp or tmp[child] > d:\n                    heappush(hp, (d, child))\n        mod = 10**9 + 7\n        @lru_cache(None)\n        def solve(node):\n            if node == n:\n                return 1\n            ans = 0\n            for child in adj[node]:\n                if seen[node] > seen[child]:\n                    ans = (solve(child) + ans) % mod\n            return ans\n        for i in range(n, 1, -1):\n            solve(i)\n        return solve(1)\n            ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-restricted-paths-from-first-to-last-node"}