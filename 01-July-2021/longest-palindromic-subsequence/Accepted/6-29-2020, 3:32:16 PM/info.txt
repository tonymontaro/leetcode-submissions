{"id":359837178,"lang":"java","time":"1Â year","timestamp":1593441136,"status_display":"Accepted","runtime":"98 ms","url":"/submissions/detail/359837178/","is_pending":"Not Pending","title":"Longest Palindromic Subsequence","memory":"74.2 MB","code":"class Solution {\n    static Integer[][] dp;\n    static char[] arr;\n    public static int longestPalindromeSubseq(String s) {\n        if (s.equals(\"\")) return 0;\n        arr = s.toCharArray();\n        dp = new Integer[arr.length + 1][arr.length + 1];\n        return solve(0, arr.length-1);\n    }\n\n    static int solve(int start, int end) {\n        if (dp[start][end] == null) {\n            int res = 0;\n            if (start <= end) {\n                int skip = solve(start + 1, end);\n                int include = 1;\n                int endIdx = start;\n                for (int i = end; i > start; i--) {\n                    if (arr[i] == arr[start]) {\n                        endIdx = i;\n                        break;\n                    }\n                }\n                if (endIdx > start) {\n                    include += solve(start + 1, endIdx - 1) + 1;\n                }\n                res = Math.max(include, skip);\n            }\n            dp[start][end] = res;\n        }\n        return dp[start][end];\n    }\n\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-subsequence"}