{"id":502776831,"lang":"cpp","time":"3 weeks, 6 days","timestamp":1622785421,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/502776831/","is_pending":"Not Pending","title":"Matrix Cells in Distance Order","memory":"14.6 MB","code":"class Solution {\npublic:\n    int seen[100][100];\n    vector<vector<int>> allCellsDistOrder(int rows, int cols, int rCenter, int cCenter) {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n        memset(seen, 0, sizeof(seen));\n        vector<vector<int>> ans;\n        ans.reserve(rows * cols);\n        deque<pair<int, int>> dq;\n        dq.push_back({rCenter, cCenter});\n        seen[rCenter][cCenter] = 1;\n        vector<pair<int, int>> dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        while (!dq.empty()) {\n            auto x = dq.front();\n            dq.pop_front();\n            ans.push_back({x.first, x.second});\n            for (auto [rAdd, cAdd]: dirs) {\n                int r = x.first + rAdd, c = x.second + cAdd;\n                if (r < 0 || r >= rows || c < 0 || c >= cols || seen[r][c]) continue;\n                seen[r][c] = 1;\n                dq.push_back({r, c});\n            }\n        }\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"matrix-cells-in-distance-order"}