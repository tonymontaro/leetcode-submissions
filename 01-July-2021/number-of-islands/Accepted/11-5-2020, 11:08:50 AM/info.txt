{"id":417036258,"lang":"python3","time":"7 months, 3 weeks","timestamp":1604570930,"status_display":"Accepted","runtime":"148 ms","url":"/submissions/detail/417036258/","is_pending":"Not Pending","title":"Number of Islands","memory":"18.6 MB","code":"class Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        # O(n*m) time and space\n        neighbors = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        seen = {}\n        rowlen = len(grid)\n        colen = len(grid[0])\n        islands = 0\n        for r in range(rowlen):\n            for c in range(colen):\n                if (r, c) in seen or grid[r][c] == \"0\":\n                    continue\n                islands += 1\n                stack = [(r, c)]\n                seen[(r, c)] = True\n                while stack:\n                    node = stack.pop()\n                    for nRow, nCol in neighbors:\n                        row, col = node[0] + nRow, node[1] + nCol\n                        isValid = 0 <= row < rowlen and 0 <= col < colen and grid[row][col] == \"1\"\n                        isValid = isValid and (row, col) not in seen\n                        if isValid:\n                            seen[(row, col)] = True\n                            stack.append((row, col))\n        return islands","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"number-of-islands"}