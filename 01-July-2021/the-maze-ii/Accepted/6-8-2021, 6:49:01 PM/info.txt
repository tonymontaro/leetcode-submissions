{"id":505032875,"lang":"cpp","time":"3 weeks, 1 day","timestamp":1623174541,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/505032875/","is_pending":"Not Pending","title":"The Maze II","memory":"19.9 MB","code":"#define umap unordered_map\n#define uset unordered_set\n#define ll long long\n#define pi pair<ll, ll>\n#define pii pair<ll, pi>\n#define v vector\n\nclass Solution {\npublic:\n    int shortestDistance(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {\n        int rlen = maze.size(), clen = maze[0].size();\n        v<v<int>> seen(rlen, v<int>(clen, -1));\n        priority_queue<pii, v<pii>, greater<>> pq;\n        pq.push({0, {start[0], start[1]}});\n        seen[start[0]][start[1]] = 1;\n        v<pi> dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        while (!pq.empty()) {\n            auto node = pq.top();\n            pq.pop();\n            int dist = node.first, row = node.second.first, col = node.second.second;\n            if (row == destination[0] && col == destination[1]) return dist;\n            for (auto [rAdd, cAdd]: dirs) {\n                int r = row + rAdd, c = col + cAdd;\n                if (r < 0 || r >= rlen || c < 0 || c >= clen || maze[r][c] != 0) continue;\n                while (r >= 0 && c >= 0 && r < rlen && c < clen && maze[r][c] == 0) {\n                    r += rAdd; c += cAdd;\n                }\n                r -= rAdd; c -= cAdd;\n                int dst = dist + abs(row - r) + abs(col - c);\n                if (seen[r][c] != -1 && dst >= seen[r][c]) continue;\n                seen[r][c] = dst;\n                pq.push({dst, {r, c}});\n            }\n        }\n        return -1;\n    }\n};\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"the-maze-ii"}