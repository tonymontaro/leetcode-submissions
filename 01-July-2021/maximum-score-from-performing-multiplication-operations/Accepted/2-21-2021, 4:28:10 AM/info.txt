{"id":458635245,"lang":"java","time":"4 months, 1 week","timestamp":1613878090,"status_display":"Accepted","runtime":"203 ms","url":"/submissions/detail/458635245/","is_pending":"Not Pending","title":"Maximum Score from Performing Multiplication Operations","memory":"87.1 MB","code":"class Solution {\n    Long[][] cache;\n    int n;\n    int m;\n    long[] nums;\n    long[] mult;\n    public int maximumScore(int[] numss, int[] multipliers) {\n        m = multipliers.length;\n        n = numss.length;\n        nums = new long[n];\n        for (int i = 0; i < n; i++) nums[i] = numss[i];\n        mult = new long[m];\n        for (int i = 0; i < m; i++) mult[i] = multipliers[i];  \n                \n        cache = new Long[m][m];\n        return (int) solve(0, n - 1);\n    }\n    \n    \n    public long solve(int l, int r) {\n        int rr = n - r - 1;\n        int idx = n - (r - l + 1);\n        if (idx >= m) return 0;\n        if (cache[l][rr] != null) {\n            return cache[l][rr]; \n        }\n        long left = mult[idx] * nums[l] + solve(l + 1, r);\n        long right = mult[idx] * nums[r] + solve(l, r - 1);\n        long ans = Math.max(left, right);\n        cache[l][rr] = ans; \n        return ans;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-score-from-performing-multiplication-operations"}