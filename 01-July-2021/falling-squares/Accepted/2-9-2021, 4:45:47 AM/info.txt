{"id":453870535,"lang":"python3","time":"4 months, 3 weeks","timestamp":1612842347,"status_display":"Accepted","runtime":"548 ms","url":"/submissions/detail/453870535/","is_pending":"Not Pending","title":"Falling Squares","memory":"15.4 MB","code":"import bisect\n#Input: [[1, 2], [2, 3], [6, 1]]\n# Output: [2, 5, 5]\nclass Solution:\n    def fallingSquares(self, arr: List[List[int]]) -> List[int]:\n        unique = set()\n        for a, b in arr:\n            unique.add(a)\n            unique.add(a + b - 1)\n        mp = {x: i for i, x in enumerate(sorted(unique))}\n        n = len(mp)\n        ar = [0] * n\n        sg = SegmentTree(0, n-1, ar)\n        res = []\n        mx = 0\n        # print(mp)\n        # {1: 0, 2: 1, 4: 2, 6: 3}\n        \n        # sg.update(0, 1, 2)\n        # print(sg.rangeQuery(1, 2))\n        for a, b in arr:\n            x, y = mp[a], mp[a+b-1]\n            prevH = sg.rangeQuery(x, y)\n            # print(a, b, prevH)\n            # print(x, y)\n            h = prevH + b\n            mx = max(mx, h)\n            res.append(mx)\n            sg.update(x, y, h)\n        return res\n        \n\n        \n\nclass SegmentTree:\n    def __init__(self, left, right, arr):\n        self.left = left\n        self.right = right\n        self.h = 0\n\n        if left == right:\n            self.h = arr[left]\n        else:\n            mid = (left + right) // 2\n            self.leftChild = SegmentTree(left, mid, arr)\n            self.rightChild = SegmentTree(mid + 1, right, arr)\n            self.reCalculate()\n\n    def reCalculate(self):\n        if self.left != self.right:\n            self.h = max(self.leftChild.h, self.rightChild.h)\n    \n    def rangeQuery(self, left, right):\n        if left > self.right or right < self.left:\n            return 0\n        if self.left >= left and self.right <= right:\n            return self.h\n        return max(self.leftChild.rangeQuery(left, right), self.rightChild.rangeQuery(left, right))\n    \n    def update(self, left, right, h):\n        if left > self.right or right < self.left:\n            return\n        if self.left == self.right:\n            self.h = h\n        else:\n            self.leftChild.update(left, right, h)\n            self.rightChild.update(left, right, h)\n            self.reCalculate()","compare_result":"11111111111111111111111111111111111111111111","title_slug":"falling-squares"}