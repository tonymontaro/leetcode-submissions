{"id":276291182,"lang":"python","time":"1 year, 7 months","timestamp":1572986477,"status_display":"Accepted","runtime":"180 ms","url":"/submissions/detail/276291182/","is_pending":"Not Pending","title":"Maximum Binary Tree","memory":"12.5 MB","code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def constructMaximumBinaryTree(self, nums):\n        max_item, i = get_max_item(nums)\n        node = TreeNode(max_item)\n        maxBinTreeHelper(node, nums[:i], 'left')\n        maxBinTreeHelper(node, nums[i+1:], 'right')\n        return node\n\ndef get_max_item(nums):\n    max_item = max(nums)\n    return max_item, nums.index(max_item)\n\ndef maxBinTreeHelper(parent, nums, direction):\n    if not nums:\n        return\n    max_item, i = get_max_item(nums)\n    node = TreeNode(max_item)\n    setattr(parent, direction, node)\n    maxBinTreeHelper(node, nums[:i], 'left')\n    maxBinTreeHelper(node, nums[i+1:], 'right')","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-binary-tree"}