{"id":458623445,"lang":"python3","time":"4 months, 1 week","timestamp":1613876750,"status_display":"Accepted","runtime":"6172 ms","url":"/submissions/detail/458623445/","is_pending":"Not Pending","title":"Maximize Palindrome Length From Subsequences","memory":"788.4 MB","code":"from functools import lru_cache\n\nclass Solution:\n    def longestPalindrome(self, w1: str, w2: str) -> int:\n        bs = {}\n        for i, c in enumerate(w2):\n            bs[c] = i\n        found = False\n        for c in set(w1):\n            if c in bs:\n                found = True\n                break\n        if not found:\n            return 0\n        \n        w = w1 + w2\n        \n        @lru_cache(None)\n        def solve(x, y):\n            if x == y:\n                return 1\n            if x > y:\n                return 0\n\n            ans = solve(x + 1, y)\n            if w[x] == w[y]:\n                ans = max(ans, 2 + solve(x + 1, y - 1))\n            ans = max(ans, solve(x, y - 1))\n            return ans\n        \n        ans = 0\n        for i, c in enumerate(w1):\n            if c not in bs:\n                continue\n            right = len(w) - (len(w2) - bs[c]) - 1\n            ans = max(ans, 2 + solve(i + 1, right))\n        return ans\n            ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximize-palindrome-length-from-subsequences"}