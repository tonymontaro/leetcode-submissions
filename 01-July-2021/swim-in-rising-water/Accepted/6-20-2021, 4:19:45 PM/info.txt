{"id":510671951,"lang":"cpp","time":"1 week, 3 days","timestamp":1624202385,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/510671951/","is_pending":"Not Pending","title":"Swim in Rising Water","memory":"8.9 MB","code":"#define pi pair<ll, ll>\n#define pii pair<ll, pi>\n#define v vector\n#define ll long long\n\nclass Solution {\npublic:\n    int swimInWater(vector<vector<int>>& grid) {\n        int n = grid.size();\n        priority_queue<pii, v<pii>, greater<>> pq;\n        int seen[51][51];\n        memset(seen, 0, sizeof(seen));\n        seen[0][0] = 1;\n        pq.push({grid[0][0], {0, 0}});\n        vector<pi> dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        while (!pq.empty()) {\n            auto node = pq.top(); pq.pop();\n            int h = node.first, row = node.second.first, col = node.second.second;\n            if (row == n-1 && col == n-1) return h;\n            for (auto [rAdd, cAdd]: dirs) {\n                int r = row + rAdd, c = col + cAdd;\n                if (r < 0 || r >= n || c < 0 || c >= n || seen[r][c]) continue;\n                seen[r][c] = 1;\n                pq.push({max(grid[r][c], h), {r, c}});\n            }\n        }\n        return 0;\n    }\n};","compare_result":"11111111111111111111111111111111111111111","title_slug":"swim-in-rising-water"}