{"id":417760341,"lang":"python3","time":"7 months, 3 weeks","timestamp":1604765287,"status_display":"Accepted","runtime":"148 ms","url":"/submissions/detail/417760341/","is_pending":"Not Pending","title":"Surrounded Regions","memory":"15.2 MB","code":"class Solution:\n    def solve(self, grid: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        O(n * m) time and space using mult-source bfs\n        \"\"\"\n        if not grid: return\n        seen = {}\n        stack = []\n        rowlen = len(grid)\n        colen = len(grid[0])\n\n        def add(r, c):\n            if r < 0 or c < 0 or r >= rowlen or c >= colen or grid[r][c] == \"X\" or (r, c) in seen:\n                return\n            stack.append((r, c))\n            seen[(r, c)] = True\n\n        for r in range(rowlen):\n            if grid[r][0] == \"O\":\n                add(r, 0)\n            if grid[r][colen - 1] == \"O\":\n                add(r, colen - 1)\n        for c in range(colen):\n            if grid[0][c] == \"O\":\n                add(0, c)\n            if grid[rowlen-1][c] == \"O\":\n                add(rowlen-1, c)\n        directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n        while stack:\n            row, col = stack.pop()\n            for d in directions:\n                add(row + d[0], col + d[1])\n        for r in range(rowlen):\n            for c in range(colen):\n                if grid[r][c] == \"O\" and (r, c) not in seen:\n                    grid[r][c] = \"X\"\n                ","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"surrounded-regions"}