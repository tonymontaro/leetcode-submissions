// https://leetcode.com/problems/design-underground-system

class UndergroundSystem:

    def __init__(self):
        self.travel = {}
        self.checkins = {}

    def checkIn(self, id: int, stationName: str, t: int) -> None:
        self.checkins[id] = (stationName, t)

    def checkOut(self, id: int, stationName: str, t: int) -> None:
        prevStation, prevTime = self.checkins[id]
        time = t - prevTime
        travel = (prevStation, stationName)
        if travel not in self.travel:
            self.travel[travel] = {"count": 0, "time": 0}
        self.travel[travel]["count"] += 1
        self.travel[travel]["time"] += time

    def getAverageTime(self, startStation: str, endStation: str) -> float:
        travel = (startStation, endStation)
        return self.travel[travel]["time"] / self.travel[travel]["count"]


# Your UndergroundSystem object will be instantiated and called as such:
# obj = UndergroundSystem()
# obj.checkIn(id,stationName,t)
# obj.checkOut(id,stationName,t)
# param_3 = obj.getAverageTime(startStation,endStation)