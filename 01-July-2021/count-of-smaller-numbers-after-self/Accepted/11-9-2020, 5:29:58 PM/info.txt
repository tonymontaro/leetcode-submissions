{"id":418500150,"lang":"python3","time":"7 months, 3 weeks","timestamp":1604939398,"status_display":"Accepted","runtime":"120 ms","url":"/submissions/detail/418500150/","is_pending":"Not Pending","title":"Count of Smaller Numbers After Self","memory":"17.5 MB","code":"class Solution:\n    def countSmaller(self, nums: List[int]) -> List[int]:\n        # O(nlogn) time | O(max(nums)) space\n        \n        # compression\n        arr = sorted(set(nums))\n        compressed = {num: i + 1 for i, num in enumerate(arr)}\n        \n        fenwick = FenwickTree(len(compressed))\n        n = len(nums)\n        result = []\n        for i in range(n - 1, -1, -1):\n            idx = compressed[nums[i]]\n            result.append(fenwick.getSum(idx - 1))\n            fenwick.update(idx, 1)\n        return result[::-1]\n        \nclass FenwickTree:\n    \"\"\"One indexed FenwickTree (Binary Indexed Tree)\"\"\"\n    def __init__(self, n, arr=[]):\n        self.tree = [0] * (n + 1)\n        self.n = n\n        if arr:\n            for i in range(1, n + 1):\n                self.tree[i] += arr[i - 1]\n                parent = i + (i & -i)\n                if (parent <= n):\n                    self.tree[parent] += self.tree[i]\n    \n    def getSum(self, idx):\n        total = 0\n        while idx > 0:\n            total += self.tree[idx]\n            idx = idx - (idx & -idx)\n        return total\n    \n    def rangeSum(self, a, b):\n        # a - b inclusive: b > a \n        return self.getSum(b) - self.getSum(a - 1)\n    \n    def update(self, idx, valueToAdd):\n        while idx <= self.n:\n            self.tree[idx] += valueToAdd\n            idx = idx + (idx & -idx)","compare_result":"1111111111111111","title_slug":"count-of-smaller-numbers-after-self"}