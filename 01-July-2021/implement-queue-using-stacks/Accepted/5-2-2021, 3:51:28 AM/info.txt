{"id":487680572,"lang":"cpp","time":"2Â months","timestamp":1619923888,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/487680572/","is_pending":"Not Pending","title":"Implement Queue using Stacks","memory":"7 MB","code":"class MyQueue {\npublic:\n    /** Initialize your data structure here. */\n    stack<int> sin;\n    stack<int> sout;\n    MyQueue() {\n        \n    }\n    \n    /** Push element x to the back of queue. */\n    void push(int x) {\n        sin.push(x);\n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    int pop() {\n        balance();\n        int num = sout.top();\n        sout.pop();\n        return num;\n    }\n    \n    /** Get the front element. */\n    int peek() {\n        balance();\n        return sout.top();\n    }\n    void balance() {\n        if (sout.empty()) {\n            while (!sin.empty()) {\n                sout.push(sin.top());\n                sin.pop();\n            }\n        }\n    }\n    /** Returns whether the queue is empty. */\n    bool empty() {\n        return sin.empty() && sout.empty();\n    }\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */","compare_result":"11111111111111111111","title_slug":"implement-queue-using-stacks"}