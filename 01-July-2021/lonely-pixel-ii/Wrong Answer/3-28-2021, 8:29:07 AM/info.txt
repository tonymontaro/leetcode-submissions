{"id":473363910,"lang":"cpp","time":"3Â months","timestamp":1616916547,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/473363910/","is_pending":"Not Pending","title":"Lonely Pixel II","memory":"N/A","code":"class Solution {\npublic:\n    int findBlackPixel(vector<vector<char>>& grid, int k) {\n        int rlen = grid.size(), clen = grid[0].size();\n        map<int, bitset<200>> row;\n        map<int, bitset<200>> col;\n        for (int r = 0; r < rlen; r++) {\n            for (int c = 0; c < clen; c++) {\n                if (grid[r][c] == 'B') {\n                    row[r][c] = true;\n                    col[c][r] = true;\n                }\n            }\n        }\n        int ans = 0;\n        for (int c = 0; c < clen; c++) {\n            if (col[c].count() != k) continue;\n            bool valid = true;\n            int cnt = 0;\n            int prev = 0;\n            for (int r = 0; r < rlen; r++) {\n                if (grid[r][c] != 'B') continue;\n                if (row[r].count() != k) {\n                    valid = false;\n                    break;\n                }\n                cnt++;\n                if (cnt == 1) {\n                    prev = r;\n                    continue;\n                }\n                if (row[r][c] != row[prev][c]) {\n                    valid = false;\n                    break;\n                }\n            }\n            if (valid) {\n//                print2(c, cnt)\n                ans += cnt;\n            }\n        }\n        return ans;\n    }\n};\n","compare_result":"1111111111111111111111111111111111111111111111110110101111011111110111111111111111111111111111111111111111111111111111","title_slug":"lonely-pixel-ii"}