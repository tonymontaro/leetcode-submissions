{"id":303343844,"lang":"python3","time":"1 year, 4 months","timestamp":1581726154,"status_display":"Accepted","runtime":"172 ms","url":"/submissions/detail/303343844/","is_pending":"Not Pending","title":"Sudoku Solver","memory":"12.8 MB","code":"from collections import defaultdict\n\nclass Solution:\n    def solveSudoku(self, grid) -> None:\n        rows = {i: defaultdict(int) for i in range(9)}\n        cols = {i: defaultdict(int) for i in range(9)}\n        threes = [[defaultdict(int) for _ in range(3)] for _ in range(3)]\n        def add(row, col, num):\n            rows[row][num] += 1\n            cols[col][num] += 1\n            threes[row//3][col//3][num] += 1\n        def remove(row, col, num):\n            rows[row][num] -= 1\n            cols[col][num] -= 1\n            threes[row//3][col//3][num] -= 1\n        for row in range(len(grid)):\n            for col in range(len(grid)):\n                if grid[row][col] != '.':\n                    num = grid[row][col]\n                    add(row, col, int(num))\n\n        def get_next_coord(row, col):\n            if col < len(grid[0])-1:\n                col += 1\n            else:\n                row += 1\n                col = 0\n            return row, col\n        def solve(row, col):\n            if row >= len(grid):\n                return True\n            next_row, next_col = get_next_coord(row, col)\n            if grid[row][col] != '.':\n                return solve(next_row, next_col)\n            for i in range(1, 10):\n                is_valid = rows[row][i] < 1 and cols[col][i] < 1 and threes[row//3][col//3][i] < 1\n                if is_valid:\n                    add(row, col, i)\n                    result = solve(next_row, next_col)\n                    if not result:\n                        remove(row, col, i)\n                    else:\n                        grid[row][col] = str(i)\n                        return True\n            return False\n        solve(0, 0)\n        return grid","compare_result":"111111","title_slug":"sudoku-solver"}