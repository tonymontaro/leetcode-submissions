// https://leetcode.com/problems/champagne-tower

class Solution:
    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:
        tower = [[0] * i for i in range(1, query_row + 2)]
        tower[0][0] = poured
        for (r, rowItems) in enumerate(tower):
            if (r >= query_row): continue
            for (c, value) in enumerate(rowItems):
                if value <= 1: continue
                diff = value - 1
                tower[r + 1][c] += diff / 2
                tower[r + 1][c + 1] += diff / 2

        return min(1, tower[query_row][query_glass])
