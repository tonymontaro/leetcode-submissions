{"id":406532648,"lang":"java","time":"8 months, 3 weeks","timestamp":1602241954,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/406532648/","is_pending":"Not Pending","title":"Serialize and Deserialize BST","memory":"40.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n        // Encodes a tree to a single string.\n        public String serialize(TreeNode root) {\n            StringBuilder rs = new StringBuilder();\n            serializeHelper(root, rs);\n            rs.deleteCharAt(rs.length() - 1);\n            return rs.toString();\n        }\n\n        void serializeHelper(TreeNode node, StringBuilder rs) {\n            if (node == null) {\n                rs.append('n').append(\",\");\n                return;\n            }\n            rs.append(node.val).append(\",\");\n            serializeHelper(node.left, rs);\n            serializeHelper(node.right, rs);\n        }\n\n        // Decodes your encoded data to tree.\n        int idx;\n        public TreeNode deserialize(String data) {\n            String[] dat = data.split(\",\");\n            idx = 0;\n            return deserializeHelper(dat);\n        }\n\n        TreeNode deserializeHelper(String[] data) {\n            String ch = data[idx++];\n            if (ch.equals(\"n\")) return null;\n            TreeNode node = new TreeNode(Integer.parseInt(ch));\n            node.left = deserializeHelper(data);\n            node.right = deserializeHelper(data);\n            return node;\n        }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// String tree = ser.serialize(root);\n// TreeNode ans = deser.deserialize(tree);\n// return ans;","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-bst"}