{"id":453643749,"lang":"python3","time":"4 months, 3 weeks","timestamp":1612796794,"status_display":"Accepted","runtime":"260 ms","url":"/submissions/detail/453643749/","is_pending":"Not Pending","title":"Number of Distinct Islands","memory":"18.2 MB","code":"class Solution:\n    def numDistinctIslands(self, grid: List[List[int]]) -> int:\n        if not grid or not grid[0]:\n            return 0\n        cache = {}\n        seen = {}\n        rlen, clen = len(grid), len(grid[0])\n        dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        \n        def dfs(r, c, rr, cc, arr):\n            if r < 0 or r >= rlen or c < 0 or c >= clen or grid[r][c] == 0 or (r, c) in seen:\n                return arr\n            arr.append((rr, cc))\n            seen[(r, c)] = 1\n            for rAdd, cAdd in dirs:\n                dfs(r + rAdd, c + cAdd, rr + rAdd, cc + cAdd, arr)\n            return arr\n        \n        for r in range(rlen):\n            for c in range(clen):\n                if grid[r][c] == 1 and (r, c) not in seen:\n                    aa = sorted(dfs(r, c, 0, 0, []))\n                    cache[str(aa)] = 1\n\n        return len(cache)\n        ","compare_resulttitle_slug":"number-of-distinct-islands"}