{"id":449222128,"lang":"python3","time":"5Â months","timestamp":1611896385,"status_display":"Accepted","runtime":"144 ms","url":"/submissions/detail/449222128/","is_pending":"Not Pending","title":"Frog Position After T Seconds","memory":"14.6 MB","code":"class Solution:\n    def frogPosition(self, n: int, edges: List[List[int]], t: int, target: int) -> float:\n        tree = {i:[] for i in range(1, n+1)}\n        tt = {i:[] for i in range(1, n+1)}\n        for a, b in edges:\n            tt[a].append(b)\n            tt[b].append(a)\n        seen = {1: 1}\n        stack = [1]\n        while stack:\n            node = stack.pop()\n            for child in tt[node]:\n                if child not in seen:\n                    tree[node].append(child)\n                    seen[child] = 1\n                    stack.append(child)\n\n        self.ans = 0\n        def dfs(node, prob, depth):\n            if node == target:\n                if t == depth or (not tree[node] and depth < t):\n                    self.ans = prob\n                return\n    \n            if depth > t or not tree[node]:\n                return\n            prob = prob * (1 / len(tree[node]))\n            for child in tree[node]:\n                dfs(child, prob, depth + 1)\n        \n        dfs(1, 1, 0)\n        return self.ans","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"frog-position-after-t-seconds"}