{"id":441023526,"lang":"python3","time":"5 months, 3 weeks","timestamp":1610259239,"status_display":"Accepted","runtime":"688 ms","url":"/submissions/detail/441023526/","is_pending":"Not Pending","title":"Connecting Cities With Minimum Cost","memory":"20.1 MB","code":"class Solution:\n    def minimumCost(self, n: int, connections: List[List[int]]) -> int:\n        # find the minimum spanning tree. O(nlogn) time | O(n) space\n        union = UnionFind(n)\n        connections.sort(key=lambda x: x[2])\n        total = 0\n        for x, y, cost in connections:\n            x, y = x - 1, y - 1\n            if union.connected(x, y):\n                continue\n            union.unify(x, y)\n            total += cost\n        return total if union.groups == 1 else -1\n        \n        \n        \n    \nclass UnionFind:\n    \"\"\"\n    UnionFind or DisjoinSet data-structure with Path compression. Zero indexed.\n    Initialize:\n        UnionFind(n)\n    Methods:\n        unify(p, q)        # unify p and q\n        connected(p, q)    # is p connected to q (return bool)\n        find(p)            # find the parent of q\n        getSize(p)         # return the group size of p\n    \"\"\"\n    def __init__(self, n):\n        self.size = n\n        self.groups = n\n        self.sizes = [0] * n\n        self.parents = [0] * n\n        \n        for i in range(n):\n            self.parents[i] = i\n            self.sizes[i] = 1\n    def find(self, p):\n        root = p\n        while (root != self.parents[root]):\n            root = self.parents[root]\n        # path compression\n        while (p != root):\n            p, self.parents[p] = self.parents[p], root\n        return root\n    def getSize(self, p):\n        return self.sizes[self.find(p)]\n    def connected(self, p, q):\n        return self.find(p) == self.find(q)\n    def unify(self, p, q):\n        root1 = self.find(p)\n        root2 = self.find(q)\n        if root1 == root2:\n            return\n        if self.sizes[root1] < self.sizes[root2]:\n            self.parents[root1] = root2\n            self.sizes[root2] += self.sizes[root1]\n        else:\n            self.parents[root2] = root1\n            self.sizes[root1] += self.sizes[root2]\n        self.groups -= 1","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"connecting-cities-with-minimum-cost"}