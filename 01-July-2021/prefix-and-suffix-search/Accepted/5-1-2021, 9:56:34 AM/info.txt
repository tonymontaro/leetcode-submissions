{"id":487345132,"lang":"cpp","time":"2Â months","timestamp":1619859394,"status_display":"Accepted","runtime":"424 ms","url":"/submissions/detail/487345132/","is_pending":"Not Pending","title":"Prefix and Suffix Search","memory":"158.3 MB","code":"string delim = \" \";\n#define print(x) cout << x << endl\n#define print2(x, y) cout << x << delim << y << endl\n\n#define v vector\n\nclass TrieNode {\npublic:\n    map<char, TrieNode> children;\n    int wordIdx = -1;\n};\n\nclass WordFilter {\npublic:\n    TrieNode root;\n    WordFilter(vector<string>& wordList) {\n        int wordIdx = -1;\n        for (auto word: wordList) {\n            wordIdx++;\n            v<string> words;\n            string suffixPrefix = \"#\" + word;\n            for (int i = word.size() - 1; i >= 0; --i) {\n                suffixPrefix = word[i] + suffixPrefix;\n                words.push_back(suffixPrefix);\n            }\n            for (auto w: words) {\n                auto *node = &root;\n                for (int i = 0; i < w.size(); i++) {\n                    if (node->children.find(w[i]) == node->children.end()) {\n                        node->children[w[i]] = TrieNode();\n                    }\n                    node = &node->children[w[i]];\n                    node->wordIdx = wordIdx;\n                }\n            }\n        }\n    }\n\n    int f(string prefix, string suffix) {\n        string word = suffix + \"#\" + prefix;\n        auto *node = &root;\n        for (int i = 0; i < word.size(); i++) {\n            if (node->children.find(word[i]) == node->children.end()) return -1;\n            node = &node->children[word[i]];\n        } \n        return node->wordIdx;\n    }\n};\n","compare_result":"111111111","title_slug":"prefix-and-suffix-search"}