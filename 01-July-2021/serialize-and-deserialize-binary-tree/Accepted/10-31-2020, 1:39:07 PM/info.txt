{"id":415200959,"lang":"python3","time":"8Â months","timestamp":1604147947,"status_display":"Accepted","runtime":"120 ms","url":"/submissions/detail/415200959/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"18.8 MB","code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        result = []\n        def traverse(node):\n            if node is None:\n                result.append(\"n,\")\n                return\n            result.append(str(node.val) + \",\")\n            traverse(node.left)\n            traverse(node.right)\n        traverse(root)\n        return \"\".join(result)\n        \n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        data = data.split(\",\")\n        self.idx = 0\n        def traverse():\n            cha = data[self.idx]\n            self.idx += 1\n            if cha == \"n\":\n                return None\n            node = TreeNode(int(cha))\n            node.left = traverse()\n            node.right = traverse()\n            return node\n        \n        return traverse()\n            \n        \n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# ans = deser.deserialize(ser.serialize(root))","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-binary-tree"}