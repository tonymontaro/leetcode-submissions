// https://leetcode.com/problems/serialize-and-deserialize-binary-tree

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        result = []
        def traverse(node):
            if node is None:
                result.append("n,")
                return
            result.append(str(node.val) + ",")
            traverse(node.left)
            traverse(node.right)
        traverse(root)
        return "".join(result)
        

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        data = data.split(",")
        self.idx = 0
        def traverse():
            cha = data[self.idx]
            self.idx += 1
            if cha == "n":
                return None
            node = TreeNode(int(cha))
            node.left = traverse()
            node.right = traverse()
            return node
        
        return traverse()
            
        

# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))