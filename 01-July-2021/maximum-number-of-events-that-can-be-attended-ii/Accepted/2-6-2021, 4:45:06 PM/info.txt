{"id":452777795,"lang":"python3","time":"4 months, 3 weeks","timestamp":1612626306,"status_display":"Accepted","runtime":"1860 ms","url":"/submissions/detail/452777795/","is_pending":"Not Pending","title":"Maximum Number of Events That Can Be Attended II","memory":"172.5 MB","code":"from heapq import heappop, heappush\n\nclass Solution:\n    def maxValue(self, events: List[List[int]], kTotal: int) -> int:\n        # start, end, value\n        events = [(end, start, value) for start, end, value in events]\n        events.sort()\n        n = len(events)\n        cache = {}\n        \n        \n        def solve(idx, k):\n            if idx < 0 or k == 0:\n                return 0\n            if (idx, k) in cache:\n                return cache[(idx, k)]\n            # skip\n            skip = solve(idx - 1, k)\n            \n            # include\n            include = events[idx][2]\n            end, start, value = events[idx]\n            nxt = -1\n            lo = 0\n            hi = idx - 1\n            while lo <= hi:\n                mid = (lo + hi) // 2\n                ee, ss, _ = events[mid]\n                if start > ee:\n                    nxt = mid\n                    lo = mid + 1\n                else:\n                    hi = mid - 1\n            if nxt >= 0:\n                include += solve(nxt, k - 1)\n            \n            res = max(skip, include)\n            cache[(idx, k)] = res\n            return res\n        \n        return solve(n - 1, kTotal)\n        \n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-events-that-can-be-attended-ii"}