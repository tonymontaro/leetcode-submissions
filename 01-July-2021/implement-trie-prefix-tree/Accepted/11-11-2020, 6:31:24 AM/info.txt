{"id":419075536,"lang":"python3","time":"7 months, 3 weeks","timestamp":1605072684,"status_display":"Accepted","runtime":"120 ms","url":"/submissions/detail/419075536/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"27.3 MB","code":"class Trie:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = {}\n        \n\n    def insert(self, word: str) -> None:\n        \"\"\"\n        Inserts a word into the trie.\n        \"\"\"\n        node = self.root\n        for cha in word:\n            if cha not in node:\n                node[cha] = {}\n            node = node[cha]\n        node[\"*\"] = 1\n\n    def search(self, word: str) -> bool:\n        \"\"\"\n        Returns if the word is in the trie.\n        \"\"\"\n        node = self.root\n        for cha in word:\n            if cha not in node:\n                return False\n            node = node[cha]\n        return \"*\" in node\n        \n\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        \"\"\"\n        node = self.root\n        for cha in prefix:\n            if cha not in node:\n                return False\n            node = node[cha]\n        return True\n        \n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree"}