{"id":489539460,"lang":"cpp","time":"1 month, 3 weeks","timestamp":1620285614,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/489539460/","is_pending":"Not Pending","title":"Construct Binary Tree from String","memory":"28.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n#define umap unordered_map\n\nclass Solution {\npublic:\n    TreeNode* str2tree(string s) {\n        if (s.length() == 0) return nullptr;\n        vector<int> stack;\n        umap<int, int> mp;\n        for (int i = 0; i < s.length(); i++) {\n            if (s[i] == '(')\n                stack.push_back(i);\n            else if (s[i] == ')') {\n                mp[stack[stack.size() - 1]] = i;\n                stack.pop_back();\n            }\n        }\n\n        return solve(0, s.length() - 1, s, mp);\n    }\n\n    TreeNode* solve(int l, int r, string &s, umap<int, int> &mp) {\n\n        int sign = 1;\n        if (s[l] == '-') {\n            sign = -1;\n            l++;\n        }\n        int num = 0;\n        while (isdigit(s[l])) {\n            num = num * 10 + (s[l] - '0');\n            l++;\n        }\n        num = num * sign;\n        TreeNode* node = new TreeNode(num);\n        if (l < r)\n            node->left = solve(l + 1, mp[l] - 1, s, mp);\n        else\n            return node;\n        int secondL = mp[l] + 1;\n        if (secondL < r)\n            node->right = solve(secondL + 1, mp[secondL] - 1, s, mp);\n        \n        return node;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-string"}