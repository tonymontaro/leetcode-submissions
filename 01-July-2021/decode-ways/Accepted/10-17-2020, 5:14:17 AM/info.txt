{"id":409685839,"lang":"python3","time":"8 months, 2 weeks","timestamp":1602908057,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/409685839/","is_pending":"Not Pending","title":"Decode Ways","memory":"14.2 MB","code":"from string import ascii_lowercase\n\nclass Solution:\n    def numDecodings(self, s: str) -> int:\n        if (len(s) <= 0 or s[0] == '0'): return 0\n        self.mapping = {str(num) : ch  for ch, num in zip(ascii_lowercase, range(1, 27))}\n        self.dp = {}\n        return self.decode(0, s)\n        \n    def decode(self, idx, seq):\n        # O(n) time and space using dynamic programming\n        n = len(seq)\n        if (idx >= n): return 1\n        if idx not in self.dp:\n            ans = 0\n            if seq[idx] in self.mapping:\n                ans += self.decode(idx + 1, seq)\n            if (idx < n - 1 and seq[idx:idx + 2] in self.mapping):\n                ans += self.decode(idx + 2, seq)\n            self.dp[idx] = ans\n        return self.dp[idx]","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"decode-ways"}