{"id":445062044,"lang":"python3","time":"5 months, 1 week","timestamp":1611068216,"status_display":"Accepted","runtime":"1924 ms","url":"/submissions/detail/445062044/","is_pending":"Not Pending","title":"Concatenated Words","memory":"160.9 MB","code":"class Solution:\n    def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:\n        trie = {}\n        words = sorted(set(words), key=lambda x: len(x))\n        ans = set()\n        \n        def addWord(word):\n            node = trie\n            for i, cha in enumerate(word):\n                if cha not in node:\n                    node[cha] = {}\n                if \"*\" in node and check(i, word):\n                    ans.add(word)\n                node = node[cha]\n            node['*'] = 1\n        \n        seen = {}\n        def check(idx, word):\n            # print(idx, word)\n            if (idx, word) in seen:\n                return seen[(idx, word)]\n            if idx >= len(word):\n                return False\n            node = trie\n            broke = -1\n            for i in range(idx, len(word)):\n                cha = word[i]\n                if cha not in node:\n                    broke = i\n                    break\n                node = node[cha]\n                if '*' in node and check(i + 1, word):\n                    seen[(idx, word)] = True\n                    return True\n            # print(idx, word, \"*\" in node)\n            seen[(idx, word)] = broke == -1 and '*' in node\n            return seen[(idx, word)]\n        \n        for word in words:\n            addWord(word)\n        # print(trie)\n        return list(ans)\n                    ","compare_result":"111111111111111111111111111111111111111111111","title_slug":"concatenated-words"}