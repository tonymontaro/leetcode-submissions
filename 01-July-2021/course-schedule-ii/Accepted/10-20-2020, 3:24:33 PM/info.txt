{"id":411068504,"lang":"python3","time":"8 months, 1 week","timestamp":1603203873,"status_display":"Accepted","runtime":"92 ms","url":"/submissions/detail/411068504/","is_pending":"Not Pending","title":"Course Schedule II","memory":"16.4 MB","code":"from collections import defaultdict\n\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        # O(n) time | O(1) time minus recursive call stack \n        self.idx = 0\n        self.topologicalSorting = {}\n        self.adj = defaultdict(list)\n        self.seen = set()\n        for a, b in prerequisites:\n            self.adj[a].append(b)\n        for i in range(numCourses):\n            self.dfs(i)\n        for a, b in prerequisites:\n            if self.topologicalSorting[b] > self.topologicalSorting[a]:\n                return []\n\n        invert = {b: a for a, b in self.topologicalSorting.items()}\n        res = [invert[i] for i in range(numCourses)]\n        return res\n    \n    def dfs(self, node):\n        if node in self.seen:\n            return\n        self.seen.add(node)\n        for child in self.adj[node]:\n            self.dfs(child)\n        self.topologicalSorting[node] = self.idx\n        self.idx += 1","compare_result":"11111111111111111111111111111111111111111111","title_slug":"course-schedule-ii"}