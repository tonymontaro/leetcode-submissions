{"id":507663552,"lang":"cpp","time":"2 weeks, 3 days","timestamp":1623651827,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/507663552/","is_pending":"Not Pending","title":"Palindrome Pairs","memory":"N/A","code":"class Trie {\npublic:\n    struct Trie* c[300];\n    vector<int> ends;\n    Trie() {\n        for (auto & i : c) i = nullptr;\n    }\n};\n\n\nclass Solution {\npublic:\n    vector<vector<int>> palindromePairs(vector<string>& words) {\n        vector<vector<bool>> forward;\n        vector<vector<bool>> backward;\n        Trie *root = new Trie;\n        Trie *rootB = new Trie;\n        for (int idx = 0; idx < words.size(); ++idx) {\n            string word = words[idx];\n            int n = word.size();\n            vector<bool> forw(n);\n            vector<bool> backw(n);\n            Trie* node = root;\n            Trie* nodeB = rootB;\n            for (int i = 0; i < n; i++) {\n                char c = word[n - i - 1];\n                forw[i] = isPal(i + 1, n - 1, word);\n                backw[i] = isPal(0, i - 1, word);\n                if (!node->c[c]) node->c[c] = new Trie();\n                node = node->c[c];\n                c = word[i];\n                if (!nodeB->c[c]) nodeB->c[c] = new Trie();\n                nodeB = nodeB->c[c];\n            }\n            node->ends.push_back(idx);\n            nodeB->ends.push_back(idx);\n            forward.push_back(forw);\n            backward.push_back(backw);\n        }\n\n\n        set<pair<int, int>> ans;\n        for (int idx = 0; idx < words.size(); ++idx) {\n            string word = words[idx];\n            if (word.empty()) {\n                for (int i = 0; i < words.size(); i++) {\n                    if (i == idx || !isPal(0, words[i].size()-1, words[i])) continue;\n                    ans.insert({i, idx});\n                    ans.insert({idx, i});\n                }\n                continue;\n            }\n            int n = word.size();\n            Trie* node = root;\n            for (int i = 0; i < n; i++) {\n                char c = word[i];\n                if (!node->c[c]) break;\n                node = node->c[c];\n                if (!forward[idx][i]) continue;\n                for (auto secondIdx: node->ends) if (secondIdx != idx) ans.insert({idx, secondIdx});\n            }\n            node = rootB;\n            for (int i = n - 1; i >= 0; --i) {\n                char c = word[i];\n                if (!node->c[c]) break;\n                node = node->c[c];\n\n                if (!backward[idx][i]) continue;\n                for (auto firstIdx: node->ends) if (firstIdx != idx) ans.insert({firstIdx, idx});\n            }\n        }\n        vector<vector<int>> res;\n        for (auto& x: ans) res.push_back({x.first, x.second});\n        return res;\n    }\n\n    bool isPal(int l, int r, string& s) {\n        if (l >= r) return true;\n        while (l <= r) {\n            if (s[l] != s[r]) return false;\n            l++; r--;\n        }\n        return true;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000","title_slug":"palindrome-pairs"}