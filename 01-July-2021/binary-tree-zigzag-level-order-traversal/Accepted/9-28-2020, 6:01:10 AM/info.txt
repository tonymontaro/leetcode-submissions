{"id":401678199,"lang":"java","time":"9Â months","timestamp":1601269270,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/401678199/","is_pending":"Not Pending","title":"Binary Tree Zigzag Level Order Traversal","memory":"39.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (root == null) return res;\n        List<TreeNode> cur = new ArrayList<>();\n        cur.add(root);\n        int dir = 0;\n        while (!cur.isEmpty()) {\n            List<TreeNode> newCur = new ArrayList<>();\n            List<Integer> resArr = new ArrayList<>();\n            for (int i = cur.size() - 1; i >= 0; i--) {\n                resArr.add(cur.get(cur.size() - i - 1).val);\n                TreeNode node = cur.get(i);\n                if (dir == 0) {\n                    if (node.right != null) newCur.add(node.right);\n                    if (node.left != null) newCur.add(node.left);\n                } else {\n                    if (node.left != null) newCur.add(node.left); \n                    if (node.right != null) newCur.add(node.right);\n                }\n            }\n            res.add(resArr);\n            cur = newCur;\n\n            dir = (dir + 1) % 2;\n        }\n        return res;\n    }\n}","compare_result":"111111111111111111111111111111111","title_slug":"binary-tree-zigzag-level-order-traversal"}