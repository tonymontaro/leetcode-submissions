{"id":414209280,"lang":"python3","time":"8Â months","timestamp":1603904060,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/414209280/","is_pending":"Not Pending","title":"Evaluate Division","memory":"14 MB","code":"class Solution:\n    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:\n        # O(q * n) time | O(n) space\n        adj = {}\n        for i, eq in enumerate(equations):\n            a, b = eq\n            for key in [a, b]:\n                if key not in adj:\n                    adj[key] = {}\n            adj[a][b] = values[i]\n            adj[b][a] = 1/values[i]\n        \n        def dfs(node, target, mult, seen):\n            seen[node] = True\n            if target in adj[node]:\n                return adj[node][target] * mult\n            for child in adj[node]:\n                if child not in seen:\n                    rs = dfs(child, target, mult * adj[node][child], seen)\n                    if rs is not None:\n                        return rs\n\n            return None\n        result = []\n        for a, b in queries:\n            if a not in adj or b not in adj:\n                result.append(-1)\n            elif a == b:\n                result.append(1)\n            else:\n                rs = dfs(a, b, 1, {})\n                if rs is None:\n                    rs = -1\n                result.append(rs)\n        return result","compare_result":"1111111111111111111111","title_slug":"evaluate-division"}