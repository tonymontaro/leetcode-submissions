{"id":414648968,"lang":"python3","time":"8Â months","timestamp":1604001927,"status_display":"Accepted","runtime":"388 ms","url":"/submissions/detail/414648968/","is_pending":"Not Pending","title":"Word Squares","memory":"21.4 MB","code":"from collections import defaultdict\n\nclass Solution:\n    def wordSquares(self, words: List[str]) -> List[List[str]]:\n        if not words:\n            return []\n        sq = len(words[0])\n        prefixs = defaultdict(list)\n        prefixs[\"\"] = words\n        for word in words:\n            for i in range(1, len(word)):\n                prf = word[:i]\n                prefixs[prf].append(word)\n        result = []\n\n        def getPrefix(items, prefixIdx):\n            return \"\".join([w[prefixIdx] for w in items])\n\n        def search(items, prefixIdx):\n            if len(items) == sq:\n                result.append(list(items))\n                return\n            prefix = getPrefix(items, prefixIdx)\n            for w in prefixs[prefix]:\n                items.append(w)\n                search(items, prefixIdx + 1)\n                items.pop()\n\n        search([], 0)\n        return result","compare_result":"1111111111111111","title_slug":"word-squares"}