{"id":418128219,"lang":"python3","time":"7 months, 3 weeks","timestamp":1604852885,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/418128219/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"N/A","code":"from sortedcontainers import SortedList\n\nclass MedianFinder:\n\n    def __init__(self):\n        self.arr = SortedList()\n        self.count = {}\n        self.total = 0\n\n    def addNum(self, num: int) -> None:\n        self.total += 1\n        if num not in self.count:\n            self.count[num] = 0\n            self.arr.add(num)\n        self.count[num] += 1\n        \n    def findMedian(self) -> float:\n        if self.total == 0:\n            return 0\n        def find(start, seen, target):\n            for i in range(start, len(self.arr)):\n                num = self.arr[i]\n                seen += self.count[num]\n                if seen > target:\n                    return (i, seen)\n\n        a = b = self.total // 2\n        if self.total % 2 == 0:\n            a -= 1\n        idx, sm = find(0, 0, a)\n        first = self.arr[idx]\n\n        idx, sm = find(idx, sm - self.count[first], b)\n        second = self.arr[idx]\n        return (first + second) / 2\n\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder()\n# obj.addNum(num)\n# param_2 = obj.findMedian()","compare_result":"111111111111111100","title_slug":"find-median-from-data-stream"}