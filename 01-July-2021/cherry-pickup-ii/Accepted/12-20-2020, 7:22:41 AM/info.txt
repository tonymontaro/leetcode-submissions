{"id":432523836,"lang":"python3","time":"6 months, 1 week","timestamp":1608445361,"status_display":"Accepted","runtime":"1400 ms","url":"/submissions/detail/432523836/","is_pending":"Not Pending","title":"Cherry Pickup II","memory":"21.8 MB","code":"from itertools import product\n\nclass Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n        rlen = len(grid)\n        clen = len(grid[0])\n        dp = [[[-1 for _ in range(clen)] for _ in range(clen)] for _ in range(rlen)]\n        dirs = list(product([1,0,-1], [1,0,-1]))\n\n        \n        def solve(a, b, row):\n            if not (row < rlen and 0 <= a < clen and 0 <= b < clen):\n                return 0\n            if dp[row][a][b] != -1:\n                return dp[row][a][b]\n            \n            aVal = grid[row][a]\n            bVal = grid[row][b] if a != b else 0\n            best = 0\n            for aMove, bMove in dirs:\n                res = aVal + bVal + solve(a + aMove, b + bMove, row + 1)\n                best = max(best, res)\n            dp[row][a][b] = best\n            return best\n        \n        return solve(0, clen - 1, 0)\n                   ","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"cherry-pickup-ii"}