{"id":407340292,"lang":"java","time":"8 months, 3 weeks","timestamp":1602419641,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/407340292/","is_pending":"Not Pending","title":"Remove Duplicate Letters","memory":"38.8 MB","code":"class Solution {\n    public String removeDuplicateLetters(String s) {\n        HashMap<Character, Integer> cnt = counts(s);\n        Stack<Character> stack = new Stack<>();\n        HashSet<Character> selected = new HashSet<>();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            cnt.merge(ch, -1, Integer::sum);\n            if (selected.contains(ch)) continue;\n            while (!stack.isEmpty() && ch < stack.peek() && cnt.get(stack.peek()) > 0) {\n                char c = stack.pop();\n                selected.remove(c);\n            }\n            stack.add(ch);\n            selected.add(ch);\n        }\n//        out.println(stack);\n        StringBuilder rs = new StringBuilder();\n        for (char ch : stack) {\n            rs.append(ch);\n        }\n        return rs.toString();\n    }\n    static HashMap<Character, Integer> counts(String word) {\n        HashMap<Character, Integer> counts = new HashMap<>();\n        for (int i = 0; i < word.length(); i++) counts.merge(word.charAt(i), 1, Integer::sum);\n        return counts;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-duplicate-letters"}