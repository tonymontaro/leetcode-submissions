// https://leetcode.com/problems/numbers-with-repeated-digits

from collections import defaultdict

class Solution:
    cache = {}
    def numDupDigitsAtMostN(self, num: int) -> int:
        
        def get(digits, a, b):
            if digits < 2:
                return 0
            if (digits, a, b) in self.cache:
                return self.cache[(digits, a, b)]

            prev = 9
            for _ in range(digits - 1):
                a *= prev
                prev -= 1
                b *= 10
            self.cache[(digits, a, b)] = b - a
            return b - a
        
        def getSeen(digits, seen):
            prev = 10 - sum([seen[x] > 0 for x in range(10)])
            # if (digits, prev) in self.cache:
            #     return self.cache[(digits, prev)]
            a = b = 1
            for _ in range(digits - 1):
                a *= prev
                prev -= 1
                b *= 10
            self.cache[(digits, prev)] = b - a
            # print(digits, prev, b - a)
            return b - a
            
        
        nstr = str(num)
        n = len(nstr)
        ans = 0
        for i in range(2, n):
            ans += get(i, 9, 9)
        
        digit = int(nstr[0])
        ans += (digit - 1) * get(n, 1, 1)
        seen = defaultdict(int)
        seen[digit] += 1
        # print(ans, '===')
        for i in range(1, n):
            digit = int(nstr[i])
            for j in range(digit):
                if seen[j] > 0:
                    # print(10 ** (n - i - 1))
                    ans += 10 ** (n - i - 1)
                else:
                    seen[j] += 1
                    ans += getSeen(n - i, seen)
                    seen[j] -= 1
            seen[digit] += 1

        if len(set(nstr)) < n:
            ans += 1
        return ans
            
        