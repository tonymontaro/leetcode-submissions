{"id":404373719,"lang":"java","time":"8 months, 4 weeks","timestamp":1601817067,"status_display":"Accepted","runtime":"169 ms","url":"/submissions/detail/404373719/","is_pending":"Not Pending","title":"Find Servers That Handled Most Number of Requests","memory":"57.9 MB","code":"class Solution {\n    public List<Integer> busiestServers(int k, int[] arrival, int[] load) {\n        TreeSet<Tuple> available = new TreeSet<>();\n        Tuple[] nodes = new Tuple[k];\n        for (int i = 0; i < k; i++) {\n            Tuple node = new Tuple(0, i, 0);\n            available.add(node);\n            nodes[i] = node;\n        }\n        HashMap<Integer, Integer> count = new HashMap<>();\n        int mx = 0;\n        TreeSet<Tuple> occupied = new TreeSet<>();\n        for (int i = 0; i < arrival.length; i++) {\n            int time = arrival[i] + load[i];\n//            out.println(occupied);\n//            out.pp(time);\n            while (!occupied.isEmpty() && arrival[i] >= occupied.first().a) {\n                Tuple nn = occupied.pollFirst();\n                nodes[nn.b].c = 0;\n                available.add(nodes[nn.b]);\n            }\n\n            Tuple node = nodes[i % k];\n            if (node.c == 1 && available.isEmpty()) continue;\n            if (node.c == 1) {\n                node = available.ceiling(node);\n                if (node == null)\n                    node = available.first();\n            }\n            available.remove(node);\n            count.merge(node.b, 1, Integer::sum);\n            mx = Math.max(mx, count.get(node.b));\n\n            Tuple busyNode = new Tuple(time, node.b, 1);\n            nodes[node.b].c = 1;\n            occupied.add(busyNode);\n//            out.println(\"============\");\n        }\n//        out.println(count);\n        List<Integer> res = new ArrayList<>();\n        for (int key: count.keySet()) if (count.get(key) == mx) res.add(key);\n        return res;\n    }\n\n    static class Tuple implements Comparable<Tuple> {\n        int a;\n        int b;\n        int c;\n        public Tuple(int a, int b) {\n            this.a = a;\n            this.b = b;\n            this.c = 0;\n        }\n        public Tuple(int a, int b, int c) {\n            this.a = a;\n            this.b = b;\n            this.c = c;\n        }\n        public int getA() { return a; }\n        public int getB() { return b; }\n        public int getC() { return c; }\n        public int compareTo(Tuple other) {\n            if (this.a == other.a) {\n                if (this.b == other.b) return Long.compare(this.c, other.c);\n                return Long.compare(this.b, other.b);\n            }\n            return Long.compare(this.a, other.a);\n        }\n        @Override\n        public int hashCode() { return Arrays.deepHashCode(new Integer[]{a, b, c}); }\n        @Override\n        public boolean equals(Object o) {\n            if (!(o instanceof Tuple)) return false;\n            Tuple pairo = (Tuple) o;\n            return (this.a == pairo.a && this.b == pairo.b && this.c == pairo.c);\n        }\n        @Override\n        public String toString() { return String.format(\"(%d %d %d)  \", this.a, this.b, this.c); }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-servers-that-handled-most-number-of-requests"}