{"id":414676848,"lang":"python3","time":"8Â months","timestamp":1604008194,"status_display":"Accepted","runtime":"292 ms","url":"/submissions/detail/414676848/","is_pending":"Not Pending","title":"Word Search II","memory":"28.4 MB","code":"class Solution:\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n        if not board or not words or not board[0]:\n            return []\n        rowlen = len(board)\n        colen = len(board[0])\n        dirs = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        result = set()\n\n        def search(row, col, node, seen):\n            cha = board[row][col]\n            if \"*\" in node[cha]:\n                result.add(node[cha][\"*\"])\n            seen[(row, col)] = True\n\n            for nRow, nCol in dirs:\n                r, c = row + nRow, col + nCol\n                isValid = 0 <= r < rowlen and 0 <= c < colen and (r, c) not in seen\n                isValid = isValid and board[r][c] in node[cha]\n                if isValid:\n                    search(r, c, node[cha], seen)\n            seen.pop((row, col))\n            return False\n        \n        root = {}\n        def process():\n            for r in range(rowlen):\n                for c in range(colen):\n                    if board[r][c] in root:\n                        search(r, c, root, {})\n                        if len(result) == len(words):\n                            return\n\n        def addToTrie(word):\n            node = root\n            for cha in word:\n                if cha not in node:\n                    node[cha] = {}\n                node = node[cha]\n            node[\"*\"] = word\n\n        for word in words:\n            addToTrie(word)\n        process()\n        return sorted(result)\n        \n            ","compare_result":"111111111111111111111111111111111111","title_slug":"word-search-ii"}