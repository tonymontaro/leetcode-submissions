// https://leetcode.com/problems/word-search-ii

class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        if not board or not words or not board[0]:
            return []
        rowlen = len(board)
        colen = len(board[0])
        dirs = [(1, 0), (-1, 0), (0, 1), (0, -1)]
        result = []

        def search(row, col, idx, word, seen):
            if idx + 1 >= len(word):
                result.append(word)
                return True
            seen[(row, col)] = True
            idx += 1
            for nRow, nCol in dirs:
                r, c = row + nRow, col + nCol
                isValid = 0 <= r < rowlen and 0 <= c < colen and (r, c) not in seen
                isValid = isValid and word[idx] == board[r][c]
                if isValid and search(r, c, idx, word, seen):
                    return True
            seen.pop((row, col))
            return False
        
        def process(word):
            for r in range(rowlen):
                for c in range(colen):
                    if word[0] == board[r][c]:
                        if search(r, c, 0, word, {}):
                            return
        for word in words:
            process(word)
        return result
        
            