{"id":414668146,"lang":"python3","time":"8Â months","timestamp":1604006194,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/414668146/","is_pending":"Not Pending","title":"Word Search II","memory":"N/A","code":"class Solution:\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n        if not board or not words or not board[0]:\n            return []\n        mod = 10**9 + 7\n        uniqueLen = 26\n\n        def calculateHash(word):\n            rs = 0\n            for cha in word:\n                rs = (rs * uniqueLen + (ord(cha) - ord('a') + 1)) % mod\n            return rs\n\n        wordHashes = {calculateHash(word): word for word in words}\n        result = []\n        rowlen = len(board)\n        colen = len(board[0])\n        \n        dirs = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        def search(row, col, rs, seen):\n            seen[board[row][col]] = True\n            rs = (rs * uniqueLen + (ord(board[row][col]) - ord(\"a\") + 1)) % mod\n            if rs in wordHashes:\n                result.append(wordHashes[rs])\n            for nRow, nCol in dirs:\n                r, c = nRow + row, nCol + col\n                isValid = 0 <= r < rowlen and 0 <= c < colen and board[r][c] not in seen\n                if isValid:\n                    search(r, c, rs, seen)\n            seen.pop(board[row][col])\n\n        for r in range(rowlen):\n            for c in range(colen):\n                search(r, c, 0, {})\n        return result","compare_result":"111110011111111111111111110000000000","title_slug":"word-search-ii"}