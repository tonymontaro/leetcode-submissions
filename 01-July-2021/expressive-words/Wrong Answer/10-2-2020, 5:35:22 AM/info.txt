{"id":403376373,"lang":"java","time":"9Â months","timestamp":1601613322,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/403376373/","is_pending":"Not Pending","title":"Expressive Words","memory":"N/A","code":"class Solution {\n    public int expressiveWords(String S, String[] words) {\n        HashMap<Character, Integer> count = counts(S);\n        int ans = 0;\n        for (String word : words) {\n            if (isStretchy(count, counts(word))) ans++;\n        }\n        return ans;\n    }\n\n    boolean isStretchy(HashMap<Character, Integer> count, HashMap<Character, Integer> wCount) {\n        if (count.size() != wCount.size()) return false;\n        for (char ch : count.keySet()) {\n            int cnt = count.get(ch);\n            if (cnt >= 3) cnt = 1;\n            if (wCount.getOrDefault(ch, 0) != cnt) return false;\n        }\n        return true;\n    }\n    static HashMap<Character, Integer> counts(String word) {\n        HashMap<Character, Integer> counts = new HashMap<>();\n        for (int i = 0; i < word.length(); i++) counts.merge(word.charAt(i), 1, Integer::sum);\n        return counts;\n    }\n}","compare_result":"1001111111110000001001101110000000","title_slug":"expressive-words"}