{"id":425667606,"lang":"python3","time":"7Â months","timestamp":1606724581,"status_display":"Accepted","runtime":"136 ms","url":"/submissions/detail/425667606/","is_pending":"Not Pending","title":"4Sum","memory":"18.8 MB","code":"from collections import defaultdict\n\nclass Solution:\n    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:\n        # O(n^2) time and space\n        nums.sort()\n        seen = defaultdict(list)\n        result = set()\n        n = len(nums)\n        \n        for (i, num) in enumerate(nums):\n            \n            for j in range(i + 1, n):\n                diff = target - (num + nums[j])\n                if diff in seen:\n                    pair2 = [num, nums[j]]\n                    for pair in seen[diff]:\n                        result.add(tuple(pair + pair2))\n            \n            for j in range(0, i):\n                seen[num + nums[j]].append([nums[j], num])\n        return result","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"4sum"}