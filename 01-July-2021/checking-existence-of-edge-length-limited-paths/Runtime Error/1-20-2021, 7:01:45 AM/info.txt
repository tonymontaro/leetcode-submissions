{"id":445355294,"lang":"python3","time":"5Â months, 1Â week","timestamp":1611122505,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/445355294/","is_pending":"Not Pending","title":"Checking Existence of Edge Length Limited Paths","memory":"N/A","code":"from heapq import heappush, heappop\n\nclass Solution:\n    def distanceLimitedPathsExist(self, n: int, edgeList: List[List[int]], queries: List[List[int]]) -> List[bool]:\n        edges = {}\n        for a, b, dist in edgeList:\n            if a not in edges:\n                edges[a] = {}\n            if b not in edges:\n                edges[b] = {}\n            \n            if b in edges[a]:\n                edges[a][b] = min(edges[a][b], dist)\n            else:\n                edges[a][b] = dist\n            \n            if a in edges[b]:\n                edges[b][a] = min(edges[b][a], dist)\n            else:\n                edges[b][a] = dist\n        \n        ans = []\n        \n        def find(a, b, limit):\n            res = False\n            heap = [(0, a)]\n            seen = {a: 1}\n            while heap:\n                mxEdge, node = heappop(heap)\n                for child in edges[node]:\n                    if child == b and edges[node][child] < limit:\n                        return True\n                    if child not in seen and edges[node][child] < limit:\n                        seen[child] = 1\n                        heappush(heap, (max(mxEdge, edges[node][child]), child))\n            return False\n    \n        for a, b, limit in queries:\n            ans.append(find(a, b, limit))\n        return ans\n            ","compare_result":"11110000000000000000000","title_slug":"checking-existence-of-edge-length-limited-paths"}