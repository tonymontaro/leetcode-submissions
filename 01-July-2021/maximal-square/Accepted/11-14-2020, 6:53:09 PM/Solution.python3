// https://leetcode.com/problems/maximal-square

class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        # O(m * n) time | O(m) space
        if not matrix or not matrix[0]:
            return 0

        def getSquare(arr):
            # O(n) time and space
            stack = []
            ans = 0
            for i, height in enumerate(arr):
                idx = i
                while stack and height <= stack[-1][1]:
                    idx, h = stack.pop()
                    ans = max(ans, min(h, i - idx))
                stack.append((idx, height))
            n = len(arr)
            while stack:
                idx, h = stack.pop()
                ans = max(ans, min(h, n - idx))
            return ans * ans
        
        ans = 0
        rowlen = len(matrix)
        colen = len(matrix[0])
        prev = [0] * colen
        
        for r in range(rowlen):
            dp = [0] * colen
            for c in range(colen):
                dp[c] = 0 if matrix[r][c] == "0" else prev[c] + 1
            sq = getSquare(dp)
            ans = max(ans, sq)
            prev = dp
        return ans