{"id":420224992,"lang":"python3","time":"7 months, 2 weeks","timestamp":1605376389,"status_display":"Accepted","runtime":"184 ms","url":"/submissions/detail/420224992/","is_pending":"Not Pending","title":"Maximal Square","memory":"15.4 MB","code":"class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        # O(m * n) time | O(m) space\n        if not matrix or not matrix[0]:\n            return 0\n\n        def getSquare(arr):\n            # O(n) time and space\n            stack = []\n            ans = 0\n            for i, height in enumerate(arr):\n                idx = i\n                while stack and height <= stack[-1][1]:\n                    idx, h = stack.pop()\n                    ans = max(ans, min(h, i - idx))\n                stack.append((idx, height))\n            n = len(arr)\n            while stack:\n                idx, h = stack.pop()\n                ans = max(ans, min(h, n - idx))\n            return ans * ans\n        \n        ans = 0\n        rowlen = len(matrix)\n        colen = len(matrix[0])\n        prev = [0] * colen\n        \n        for r in range(rowlen):\n            dp = [0] * colen\n            for c in range(colen):\n                dp[c] = 0 if matrix[r][c] == \"0\" else prev[c] + 1\n            sq = getSquare(dp)\n            ans = max(ans, sq)\n            prev = dp\n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-square"}