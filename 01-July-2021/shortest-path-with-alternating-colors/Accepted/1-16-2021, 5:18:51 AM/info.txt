{"id":443529157,"lang":"python3","time":"5 months, 2 weeks","timestamp":1610770731,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/443529157/","is_pending":"Not Pending","title":"Shortest Path with Alternating Colors","memory":"14.3 MB","code":"from collections import deque\n\nclass Solution:\n    def shortestAlternatingPaths(self, n: int, red_edges: List[List[int]], blue_edges: List[List[int]]) -> List[int]:\n        children = [[] for _ in range(n)]\n        for a, b in blue_edges:\n            children[a].append((b, 'b'))\n        for a, b in red_edges:\n            children[a].append((b, 'r'))\n        \n        seen = {}\n        deq = deque()\n        deq.append((0, 'n', 0))\n        result = [-1 for _ in range(n)]\n        while deq:\n            node, prev, dist = deq.popleft()\n            if result[node] == -1:\n                result[node] = dist\n            if (node, prev) in seen:\n                continue\n            seen[(node, prev)] = 1\n            for child, color in children[node]:\n                if color != prev:\n                    deq.append((child, color, dist + 1))\n        return result","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-with-alternating-colors"}