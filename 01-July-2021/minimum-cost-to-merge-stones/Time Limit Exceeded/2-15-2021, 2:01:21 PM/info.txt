{"id":456330319,"lang":"python3","time":"4Â months, 2Â weeks","timestamp":1613394081,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/456330319/","is_pending":"Not Pending","title":"Minimum Cost to Merge Stones","memory":"N/A","code":"from math import inf\n\nclass Solution:\n    def mergeStones(self, stones: List[int], k: int) -> int:\n\n        if k != 2 and len(stones) % (k - 1) != 1:\n            return -1\n\n        cache = {}\n        def solve(lo, hi, rem):\n            if lo == hi:\n                return 0 if rem in [1, k] else inf\n            count = hi - lo + 1\n            sm = sum(stones[lo:hi+1]) # todo: use prefix array\n            if count == k and rem in [1, k]:\n                return sm\n            if rem > count:\n                return inf\n            if count < k:\n                return 0 if count == rem else inf\n\n            if rem == 1:\n                rem = k\n            ans = inf\n            idx = lo\n            while idx < hi:\n                mergeToOne = solve(lo, idx, 1)\n                other = solve(idx + 1, hi, rem - 1)\n                ans = min(ans, mergeToOne + other)\n                idx += k - 1\n           \n            if rem == k:\n                ans += sm\n                cache[(lo, hi, 1)] = ans\n                cache[(lo, hi, k)] = ans\n            else:\n                cache[(lo, hi, rem)] = ans\n            return ans\n\n        res = solve(0, len(stones)-1, k)\n        # print(cache)\n        return res if res != inf else -1\n","compare_result":"11111111111111111111111111111111111111111111110000000000000000000000000000000000000","title_slug":"minimum-cost-to-merge-stones"}