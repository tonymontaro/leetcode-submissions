{"id":417949232,"lang":"python3","time":"7 months, 3 weeks","timestamp":1604807408,"status_display":"Accepted","runtime":"4500 ms","url":"/submissions/detail/417949232/","is_pending":"Not Pending","title":"Create Sorted Array through Instructions","memory":"37 MB","code":"from collections import defaultdict\n\nclass Solution:\n    def createSortedArray(self, arr: List[int]) -> int:\n        MOD = 10**9 + 7\n        mx = max(arr)\n        fenwick = FenwickTree(mx)\n        count = defaultdict(int)\n        total = 0\n        ans = 0\n        for num in arr:\n            less = fenwick.getSum(num - 1)\n            cnt = count[num]\n            higher = total - cnt - less\n            # print(less, higher)\n            ans = (ans + min(less, higher)) % MOD\n            fenwick.update(num, 1)\n            count[num] += 1\n            total += 1\n        return ans\n            \n        \n        \nclass FenwickTree:\n    \"\"\"One indexed FenwickTree (Binary Indexed Tree)\"\"\"\n    def __init__(self, n, arr=[]):\n        self.tree = [0] * (n + 1)\n        self.n = n\n        if arr:\n            for i in range(1, n + 1):\n                self.tree[i] += arr[i - 1]\n                parent = i + (i & -i)\n                if (parent <= n):\n                    self.tree[parent] += self.tree[i]\n    \n    def getSum(self, idx):\n        total = 0\n        while idx > 0:\n            total += self.tree[idx]\n            idx = idx - (idx & -idx)\n        return total\n    \n    def rangeSum(self, a, b):\n        # a - b inclusive: b > a \n        return self.getSum(b) - self.getSum(a - 1)\n    \n    def update(self, idx, valueToAdd):\n        while idx <= self.n:\n            self.tree[idx] += valueToAdd\n            idx = idx + (idx & -idx)","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"create-sorted-array-through-instructions"}