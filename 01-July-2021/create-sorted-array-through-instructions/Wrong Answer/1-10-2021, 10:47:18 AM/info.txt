{"id":441091287,"lang":"python3","time":"5 months, 3 weeks","timestamp":1610272038,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/441091287/","is_pending":"Not Pending","title":"Create Sorted Array through Instructions","memory":"N/A","code":"class Solution:\n    def createSortedArray(self, instructions: List[int]) -> int:\n        mx = max(instructions) + 1\n        fenwick = FenwickTree(mx)\n        \n        ans = 0\n        prev = None\n        count = 0\n        calc = 0\n        for i, num in enumerate(instructions):\n            if prev is not None and num != prev:\n                fenwick.update(prev, count)\n                low, high = fenwick.getSum(num - 1), fenwick.rangeSum(num + 1, mx)\n                calc = min(low, high)\n                count = 0\n            ans += calc\n            count += 1\n            prev = num\n        return ans\n    \n    \n    \nclass FenwickTree:\n    \"\"\"One indexed FenwickTree (Binary Indexed Tree)\"\"\"\n    def __init__(self, n, arr=[]):\n        self.tree = [0] * (n + 1)\n        self.n = n\n        if arr:\n            for i in range(1, n + 1):\n                self.tree[i] += arr[i - 1]\n                parent = i + (i & -i)\n                if (parent <= n):\n                    self.tree[parent] += self.tree[i]\n    \n    def getSum(self, idx):\n        total = 0\n        while idx > 0:\n            total += self.tree[idx]\n            idx = idx - (idx & -idx)\n        return total\n    \n    def rangeSum(self, a, b):\n        # a - b inclusive: b > a \n        return self.getSum(b) - self.getSum(a - 1)\n    \n    def update(self, idx, valueToAdd):\n        while idx <= self.n:\n            self.tree[idx] += valueToAdd\n            idx = idx + (idx & -idx)","compare_result":"11111111111111111111111111111111111111111111111111111111011100000","title_slug":"create-sorted-array-through-instructions"}