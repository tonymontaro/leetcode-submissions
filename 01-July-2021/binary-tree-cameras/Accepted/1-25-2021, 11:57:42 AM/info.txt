{"id":447597744,"lang":"python3","time":"5Â months","timestamp":1611572262,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/447597744/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"14.6 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom math import inf\n\nclass Solution:\n    def minCameraCover(self, root: TreeNode) -> int:\n        \n        def solve(node):\n            # -> uncovered, covered(no camera), camera\n            if not node:\n                return 0, 0, inf\n            left = solve(node.left)\n            right = solve(node.right)\n            \n            uncovered = min(left[1:]) + min(right[1:])\n            covered = min(\n                left[2] + min(right[1:]),\n                right[2] + min(left[1:])\n            )\n            camera = 1 + min(right) + min(left)\n            # print(uncovered, covered, camera)\n            return uncovered, covered, camera\n        \n        return min(solve(root)[1:])","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-cameras"}