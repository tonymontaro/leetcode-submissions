{"id":493911336,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1621159771,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/493911336/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"24.9 MB","code":"#define pi pair<int, int>\n#define v vector\n\nint minArr(vector<int>& arr){\n    int ans = arr[0];\n    for (int i = 1; i < arr.size(); i++) ans = min(ans, arr[i]);\n    return ans;\n}\n\nclass Solution {\npublic:\n    int minCameraCover(TreeNode* root) {\n        auto res = solve(root);\n        return min(res[0], res[1]);\n    }\n    v<int> solve(TreeNode* node) {\n        if (!node->left && !node->right) return {1, 1, 0};\n        if (!node->right) {\n            auto left = solve(node->left);\n            return {1 + minArr(left), left[0], min(left[0], left[1])};\n        }\n        if (!node->left) {\n            auto right = solve(node->right);\n            return {1 + minArr(right), right[0], min(right[0], right[1])};\n        }\n        auto left = solve(node->left); auto right = solve(node->right);\n        int cam = 1 + minArr(left) + minArr(right);\n        int mnLeft = min(left[0], left[1]), mnRight = min(right[0], right[1]);\n        int cover = min((left[0] + mnRight), (right[0] + mnLeft));\n        int noCover = mnLeft + mnRight;\n        return {cam, cover, noCover};\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-cameras"}