{"id":429843669,"lang":"python3","time":"6 months, 2 weeks","timestamp":1607777339,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/429843669/","is_pending":"Not Pending","title":"Smallest Subtree with all the Deepest Nodes","memory":"14.4 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def subtreeWithAllDeepest(self, root: TreeNode) -> TreeNode:\n        # O(n) time | O(h) space\n        self.d = 0\n        def setDeepest(node, d):\n            if not node:\n                return\n            self.d = max(self.d, d)\n            setDeepest(node.left, d + 1)\n            setDeepest(node.right, d + 1)\n        \n        self.p = {}\n        def solve(node, d):\n            if not node:\n                return 0\n            if d == self.d:\n                res = 1\n            else:\n                res = solve(node.left, d + 1) + solve(node.right, d + 1)\n            if res not in self.p:\n                self.p[res] = node\n            return res\n        \n        setDeepest(root, 1)\n        solve(root, 1)\n        return self.p[max(self.p.keys())]","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-subtree-with-all-the-deepest-nodes"}