{"id":408241466,"lang":"python3","time":"8 months, 2 weeks","timestamp":1602598325,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/408241466/","is_pending":"Not Pending","title":"Guess the Word","memory":"14.1 MB","code":"from collections import defaultdict\nimport random\n# \"\"\"\n# This is Master's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n# class Master:\n#     def guess(self, word: str) -> int:\n\nclass Solution:\n    def findSecretWord(self, wordlist: List[str], master: 'Master') -> None:\n        # O(n^2) time and space\n        matches = defaultdict(int)\n        n = len(wordlist)\n        for i in range(n):\n            w1 = wordlist[i]\n            for j in range(i + 1, n):\n                w2 = wordlist[j]\n                if (self.match(w1, w2) > 0):\n                    matches[w1] += 1\n                    matches[w2] += 1\n        wordlist.sort(key=lambda x: matches[x], reverse=True)\n        \n        for i in range(10):\n            word = wordlist[0]\n            guess = max(0, master.guess(word))\n            # print(word, guess)\n            if (guess == 6):\n                return word\n            wordlist = [w for w in wordlist if self.match(word, w) == guess]\n            print(wordlist)\n            \n        \n    def match(self, w1, w2):\n        return sum(a == b for a, b in zip(w1, w2))\n        ","compare_result":"111111","title_slug":"guess-the-word"}