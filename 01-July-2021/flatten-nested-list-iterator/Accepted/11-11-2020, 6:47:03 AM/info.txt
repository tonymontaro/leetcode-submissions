{"id":419080453,"lang":"python3","time":"7 months, 3 weeks","timestamp":1605073623,"status_display":"Accepted","runtime":"68 ms","url":"/submissions/detail/419080453/","is_pending":"Not Pending","title":"Flatten Nested List Iterator","memory":"17.7 MB","code":"# \"\"\"\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class NestedInteger:\n#    def isInteger(self) -> bool:\n#        \"\"\"\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        \"\"\"\n#\n#    def getInteger(self) -> int:\n#        \"\"\"\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        \"\"\"\n#\n#    def getList(self) -> [NestedInteger]:\n#        \"\"\"\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        \"\"\"\n\nclass NestedIterator:\n    def __init__(self, nestedList: [NestedInteger]):\n        self.stack = []\n        for i in range(len(nestedList) - 1, -1, -1):\n            self.stack.append(nestedList[i])\n        self.setTop()\n        \n    def setTop(self) -> None:\n        if not self.stack or self.stack[-1].isInteger():\n            return\n        nestedList = self.stack.pop().getList()\n        for i in range(len(nestedList) - 1, -1, -1):\n            self.stack.append(nestedList[i])\n        self.setTop()\n    \n    def next(self) -> int:\n        val = self.stack.pop()\n        self.setTop()\n        return val\n    \n    def hasNext(self) -> bool:\n         return len(self.stack) > 0\n\n# Your NestedIterator object will be instantiated and called as such:\n# i, v = NestedIterator(nestedList), []\n# while i.hasNext(): v.append(i.next())","compare_result":"11111111111111111111111111111111111111111111","title_slug":"flatten-nested-list-iterator"}