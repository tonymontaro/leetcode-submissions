{"id":401410607,"lang":"java","time":"9Â months","timestamp":1601218441,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/401410607/","is_pending":"Not Pending","title":"Flatten Nested List Iterator","memory":"41.8 MB","code":"/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * public interface NestedInteger {\n *\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\n *     public boolean isInteger();\n *\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a nested list\n *     public Integer getInteger();\n *\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\n *     // Return null if this NestedInteger holds a single integer\n *     public List<NestedInteger> getList();\n * }\n */\npublic class NestedIterator implements Iterator<Integer> {\n     \n    Stack<NestedInteger> stack;\n    public NestedIterator(List<NestedInteger> nestedList) {\n        stack = new Stack<>();\n        addToStack(nestedList);\n    }\n\n    void addToStack(List<NestedInteger> nestedList) {\n        int sz = nestedList.size();\n        for (int i = sz - 1; i >= 0; i--) stack.add(nestedList.get(i));\n    }\n\n    @Override\n    public Integer next() {\n        return stack.pop().getInteger();\n    }\n\n    @Override\n    public boolean hasNext() {\n        while (stack.size() > 0 && !stack.peek().isInteger()) {\n            addToStack(stack.pop().getList());\n        }\n        return stack.size() > 0;\n    }\n} \n/**\n * Your NestedIterator object will be instantiated and called as such:\n * NestedIterator i = new NestedIterator(nestedList);\n * while (i.hasNext()) v[f()] = i.next();\n */","compare_result":"11111111111111111111111111111111111111111111","title_slug":"flatten-nested-list-iterator"}