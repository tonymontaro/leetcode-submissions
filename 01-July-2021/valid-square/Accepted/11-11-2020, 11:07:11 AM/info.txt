{"id":419147714,"lang":"python3","time":"7 months, 3 weeks","timestamp":1605089231,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/419147714/","is_pending":"Not Pending","title":"Valid Square","memory":"14.1 MB","code":"from collections import defaultdict\n\nclass Solution:\n    def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:\n        def getDist(x, y):\n            dist = []\n            for x2, y2 in [p1, p2, p3, p4]:\n                if (x, y) != (x2, y2):\n                    a, b = x2 - x, y2 - y\n                    dist.append((a*a + b*b))\n            return tuple(sorted(dist))\n        cache = defaultdict(int)\n        for x, y in [p1, p2, p3, p4]:\n            key = getDist(x, y)\n            if len(key) != 3:\n                return False\n            cache[key] += 1\n        if len(cache) != 1:\n            return False\n        a, b, c = list(cache.keys())[0]\n        return a == b and c == a + b\n            ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-square"}