{"id":443934423,"lang":"python3","time":"5 months, 2 weeks","timestamp":1610853924,"status_display":"Accepted","runtime":"1492 ms","url":"/submissions/detail/443934423/","is_pending":"Not Pending","title":"Largest Submatrix With Rearrangements","memory":"37.6 MB","code":"class Solution:\n    def largestSubmatrix(self, matrix: List[List[int]]) -> int:\n        rlen, clen = len(matrix), len(matrix[0])\n        \n        dp = [0] * clen\n        ans = 0\n        for row in matrix:\n            for col, num in enumerate(row):\n                if num == 0:\n                    dp[col] = 0\n                else:\n                    dp[col] += 1\n            ans = max(ans, self.largestRectangleArea(sorted(dp)))\n        return ans\n        \n    def largestRectangleArea(self, heights: List[int]) -> int:\n        # O(n) time and space\n        stack = []\n        n = len(heights)\n        ans = 0\n        for i, height in enumerate(heights):\n            idx = i\n            while stack and stack[-1][1] >= height:\n                idx, h = stack.pop()\n                ans = max(ans, h * (i - idx))\n            stack.append((idx, height))\n        while stack:\n            idx, h = stack.pop()\n            ans = max(ans, h * (n - idx))\n        return ans","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"largest-submatrix-with-rearrangements"}