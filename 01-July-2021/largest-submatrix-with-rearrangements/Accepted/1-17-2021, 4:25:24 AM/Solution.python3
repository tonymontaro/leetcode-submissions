// https://leetcode.com/problems/largest-submatrix-with-rearrangements

class Solution:
    def largestSubmatrix(self, matrix: List[List[int]]) -> int:
        rlen, clen = len(matrix), len(matrix[0])
        
        dp = [0] * clen
        ans = 0
        for row in matrix:
            for col, num in enumerate(row):
                if num == 0:
                    dp[col] = 0
                else:
                    dp[col] += 1
            ans = max(ans, self.largestRectangleArea(sorted(dp)))
        return ans
        
    def largestRectangleArea(self, heights: List[int]) -> int:
        # O(n) time and space
        stack = []
        n = len(heights)
        ans = 0
        for i, height in enumerate(heights):
            idx = i
            while stack and stack[-1][1] >= height:
                idx, h = stack.pop()
                ans = max(ans, h * (i - idx))
            stack.append((idx, height))
        while stack:
            idx, h = stack.pop()
            ans = max(ans, h * (n - idx))
        return ans