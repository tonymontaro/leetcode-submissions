// https://leetcode.com/problems/palindrome-partitioning-iv

class Solution:
    def checkPartitioning(self, s: str) -> bool:
        n = len(s)

        def isPalindrome(l, r):
            while l <= r:
                if s[l] != s[r]:
                    return False
                l += 1
                r -= 1
            return True
        
        left = {}
        for i in range(n - 2):
            if isPalindrome(0, i):
                left[(0, i)] = 1
        
        right = {}
        for i in range(2, n):
            if isPalindrome(i, n-1):
                right[(i, n-1)] = 1
        
        for i in range(1, n-1):
            r = l = i
            while l > 0 and r < n - 1 and s[l] == s[r]:
                if (0, l - 1) in left and (r + 1, n - 1) in right:
                    return True
                l -= 1
                r += 1

            l = i - 1
            r = i
            while l > 0 and r < n - 1 and s[l] == s[r]:
                if (0, l - 1) in left and (r + 1, n - 1) in right:
                    return True
                l -= 1
                r += 1
        
        return False