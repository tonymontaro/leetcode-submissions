{"id":459957763,"lang":"python3","time":"4 months, 1 week","timestamp":1614138071,"status_display":"Accepted","runtime":"132 ms","url":"/submissions/detail/459957763/","is_pending":"Not Pending","title":"Most Stones Removed with Same Row or Column","memory":"15.2 MB","code":"class Solution:\n    def removeStones(self, stones: List[List[int]]) -> int:\n        n = len(stones)\n        uf = UnionFind(n)\n        cols = {}\n        rows = {}\n        for i, (r, c) in enumerate(stones):\n            if r in rows:\n                uf.unify(i, rows[r])\n            if c in cols:\n                uf.unify(i, cols[c])\n            cols[c] = i\n            rows[r] = i\n        return n - uf.groups\n    \n    \nclass UnionFind:\n    \"\"\"\n    UnionFind or DisjoinSet data-structure with Path compression. Zero indexed.\n    Initialize:\n        UnionFind(n)\n    Methods:\n        unify(p, q)        # unify p and q\n        connected(p, q)    # is p connected to q (return bool)\n        find(p)            # find the parent of q\n        getSize(p)         # return the group size of p\n    \"\"\"\n    def __init__(self, n):\n        self.size = n\n        self.groups = n\n        self.sizes = [0] * n\n        self.parents = [0] * n\n        \n        for i in range(n):\n            self.parents[i] = i\n            self.sizes[i] = 1\n    def find(self, p):\n        root = p\n        while (root != self.parents[root]):\n            root = self.parents[root]\n        # path compression\n        while (p != root):\n            p, self.parents[p] = self.parents[p], root\n        return root\n    def getSize(self, p):\n        return self.sizes[self.find(p)]\n    def connected(self, p, q):\n        return self.find(p) == self.find(q)\n    def unify(self, p, q):\n        root1 = self.find(p)\n        root2 = self.find(q)\n        if root1 == root2:\n            return\n        if self.sizes[root1] < self.sizes[root2]:\n            self.parents[root1] = root2\n            self.sizes[root2] += self.sizes[root1]\n        else:\n            self.parents[root2] = root1\n            self.sizes[root1] += self.sizes[root2]\n        self.groups -= 1","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"most-stones-removed-with-same-row-or-column"}