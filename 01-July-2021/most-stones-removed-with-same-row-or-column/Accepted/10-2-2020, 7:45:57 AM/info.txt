{"id":403423766,"lang":"java","time":"9Â months","timestamp":1601621157,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/403423766/","is_pending":"Not Pending","title":"Most Stones Removed with Same Row or Column","memory":"39 MB","code":"class Solution {\n    public int removeStones(int[][] stones) {\n        int n = stones.length;\n        UnionFind disjoint = new UnionFind(n);\n        HashMap<Integer, Integer> colGroup = new HashMap<>();\n        HashMap<Integer, Integer> rowGroup = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            int[] s = stones[i];\n            if (colGroup.containsKey(s[0])) disjoint.unify(i, colGroup.get(s[0]));\n            else colGroup.put(s[0], i);\n\n            if (rowGroup.containsKey(s[1])) disjoint.unify(i, rowGroup.get(s[1]));\n            else rowGroup.put(s[1], i);\n        }\n        HashSet<Integer> seen = new HashSet<>();\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            int parent = disjoint.find(i);\n            if (seen.contains(parent)) continue;\n            ans += disjoint.getSize(parent) - 1;\n            seen.add(parent);\n        }\n\n        return ans;\n    }\n\n    public class UnionFind {\n\n        private final int size;\n        private int groups;\n        private final int[] sizes;\n        private final int[] parents;\n\n        public int getSize() {\n            return size;\n        }\n\n        public int getGroups() {\n            return groups;\n        }\n\n        public int getSize(int p) {\n            return sizes[find(p)];\n        }\n\n        public UnionFind(int n) {\n            this.size = this.groups = n;\n            sizes = new int[n];\n            parents = new int[n];\n\n            for (int i = 0; i < n; i++) {\n                parents[i] = i;\n                sizes[i] = 1;\n            }\n        }\n\n        public int find(int p) {\n            int root = p;\n            while (root != parents[root]) root = parents[root];\n\n            while (p != root) {\n                int temp = parents[p];\n                parents[p] = root;\n                p = temp;\n            }\n            return root;\n        }\n\n        public boolean connected(int p, int q) {\n            return find(p) == find(q);\n        }\n\n        public void unify(int p, int q) {\n            int root1 = find(p);\n            int root2 = find(q);\n            if (root1 == root2) return;\n\n            if (sizes[root1] < sizes[root2]) {\n                parents[root1] = root2;\n                sizes[root2] += sizes[root1];\n            } else {\n                parents[root2] = root1;\n                sizes[root1] += sizes[root2];\n            }\n            groups--;\n        }\n\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"most-stones-removed-with-same-row-or-column"}