{"id":419443385,"lang":"python3","time":"7 months, 3 weeks","timestamp":1605158034,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/419443385/","is_pending":"Not Pending","title":"All Nodes Distance K in Binary Tree","memory":"14.3 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def distanceK(self, root: TreeNode, target: TreeNode, k: int) -> List[int]:\n        if k == 0:\n            return [target.val]\n        \n        result = []\n        def dfs(node):\n            if not node:\n                return\n            if node is target:\n                search(node.left, 1)\n                search(node.right, 1)\n                return 1\n            \n            left = dfs(node.left)\n            if left is not None:\n                if left == k:\n                    result.append(node.val)\n                search(node.right, left + 1)\n                return left + 1\n            right = dfs(node.right)\n            if right is not None:\n                if right == k:\n                    result.append(node.val)\n                search(node.left, right + 1)\n                return right + 1\n            return None\n        \n        def search(node, depth):\n            if not node:\n                return\n            if depth > k:\n                return\n            if depth == k:\n                result.append(node.val)\n            search(node.left, depth + 1)\n            search(node.right, depth + 1)\n        \n        dfs(root)\n        return result","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"all-nodes-distance-k-in-binary-tree"}