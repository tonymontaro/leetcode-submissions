{"id":441933081,"lang":"python3","time":"5 months, 2 weeks","timestamp":1610433279,"status_display":"Accepted","runtime":"960 ms","url":"/submissions/detail/441933081/","is_pending":"Not Pending","title":"Minimum Operations to Make a Subsequence","memory":"38.5 MB","code":"import bisect\n\nclass Solution:\n    def minOperations(self, target: List[int], arr: List[int]) -> int:\n        # O(nlogn) time | O(n) space\n        lis = []\n        order = {num: i for i, num in enumerate(target)}\n        for num in arr:\n            if num not in order:\n                continue\n            orderId = order[num]\n            idx = bisect.bisect_left(lis, orderId)\n            if idx >= len(lis):\n                lis.append(orderId)\n            else:\n                lis[idx] = orderId\n\n        return len(target) - len(lis)","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-operations-to-make-a-subsequence"}