{"id":414843747,"lang":"python3","time":"8Â months","timestamp":1604044466,"status_display":"Accepted","runtime":"1712 ms","url":"/submissions/detail/414843747/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"14.5 MB","code":"from collections import defaultdict\n\nclass Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:\n        # O(n^2) time | O(n) space\n        if not nums:\n            return 0\n        cache = defaultdict(int)\n        n = len(nums)\n        longestIncreasing = [0] * n\n        for i in range(n):\n            longest = 1\n            localCache = defaultdict(int)\n            localCache[1] += 1\n            for j in range(0, i):\n                if nums[i] > nums[j]:\n                    prevLongest, count = longestIncreasing[j]\n                    localCache[prevLongest + 1] += count\n                    longest = max(longest, prevLongest + 1)\n            longestIncreasing[i] = (longest, localCache[longest])\n            cache[longest] += localCache[longest]\n            # print(longestIncreasing)\n        return cache[max(cache.keys())]","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-longest-increasing-subsequence"}