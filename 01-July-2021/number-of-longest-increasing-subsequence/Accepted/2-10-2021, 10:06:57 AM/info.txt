{"id":454386862,"lang":"python3","time":"4 months, 2 weeks","timestamp":1612948017,"status_display":"Accepted","runtime":"1644 ms","url":"/submissions/detail/454386862/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"14.7 MB","code":"from collections import defaultdict\n\nclass Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:\n        # O(n^2) time | O(n) space\n        lis = []\n        cache = defaultdict(int)\n        for i, num in enumerate(nums):\n            ans = 1\n            count = defaultdict(int)\n            count[1] = 1\n            for j in range(0, i):\n                if num > nums[j]:\n                    a, c = lis[j]\n                    count[1 + a] += c\n                    ans = max(ans, 1 + a)\n            cache[ans] += count[ans]\n            lis.append((ans, count[ans]))\n        # print(lis)\n        # print(cache)\n        return cache[max(cache.keys())]\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-longest-increasing-subsequence"}