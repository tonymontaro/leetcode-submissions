{"id":414840103,"lang":"python3","time":"8Â months","timestamp":1604043552,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/414840103/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"N/A","code":"from collections import defaultdict\n\nclass Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:\n        # O(n^2) time | O(n) space\n        cache = defaultdict(int)\n        n = len(nums)\n        cache[1] = n\n        longestIncreasing = [0] * n\n        for i in range(n):\n            longest = 1\n            for j in range(0, i):\n                if nums[i] > nums[j]:\n                    prevLongest = longestIncreasing[j] + 1\n                    cache[prevLongest] += 1\n                    longest = max(longest, prevLongest)\n            longestIncreasing[i] = longest\n        return cache[max(cache.keys())]","compare_result":"110111111111111111111101111101110011010111000010010011000011001110000010111111110111111111011101001000000001000000000000000000010000000000000000000000000000000000000010101000000000000000000000000111111110111111101010110011101","title_slug":"number-of-longest-increasing-subsequence"}