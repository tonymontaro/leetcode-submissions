{"id":454384250,"lang":"python3","time":"4 months, 2 weeks","timestamp":1612947340,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/454384250/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"N/A","code":"from collections import defaultdict\n\nclass Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:\n        # O(n^2) time | O(n) space\n        lis = []\n        cache = defaultdict(int)\n        cache[1] = len(nums)\n        for i, num in enumerate(nums):\n            ans = 1\n            for j in range(0, i):\n                if num > nums[j]:\n                    ans = max(lis[j] + 1, ans)\n                    cache[lis[j] + 1] += 1\n            lis.append(ans)\n\n        return cache[max(cache.keys())]","compare_result":"1101111111111111111110111110111001010101110000100100110000110011100000011111110111111111011101001000000001000000000000000000010000000000000000000000000000000000000010101000000000000000000000000111111110111111101010110011101","title_slug":"number-of-longest-increasing-subsequence"}