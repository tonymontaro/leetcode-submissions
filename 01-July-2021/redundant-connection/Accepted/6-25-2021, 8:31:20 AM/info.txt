{"id":512916984,"lang":"cpp","time":"5 days, 23 hours","timestamp":1624606280,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/512916984/","is_pending":"Not Pending","title":"Redundant Connection","memory":"8.6 MB","code":"class UnionFind {\n    /*\n    UnionFind or DisjoinSet data-structure with Path compression. Zero indexed.\n    Initialize:\n            UnionFind(n)\n            Methods:\n    unify(p, q)        # unify p and q\n    connected(p, q)    # is p connected to q (return bool)\n    find(p)            # find the parent of q\n    getSize(p)         # return the group size of p\n    */\nprivate:\n    int size = 0;\n    int* sizes;\n    int* parents;\npublic:\n    int groups;\n    UnionFind(int n) {\n        size = n;\n        groups = n;\n        sizes = new int[size];\n        parents = new int[size];\n        for(int i=0; i < size; i++) {\n            parents[i] = i;\n            sizes[i] = 1;\n        }\n    }\n    ~UnionFind() {\n        delete [] sizes;\n        delete [] parents;\n    }\n\n    int find(int p) {\n        assert(p >= 0 && p < size);\n        int root = p;\n        while (root != parents[root])\n            root = parents[root];\n\n        // path compression\n        while (p != root) {\n            int tmp = parents[p];\n            parents[p] = root;\n            p = tmp;\n        }\n        return root;\n    }\n    int getSize(int p) {\n        return sizes[find(p)];\n    }\n\n    bool connected(int p, int q){\n        return find(p) == find(q);\n    }\n    bool unify(int p, int q) {\n        assert(p >= 0 && p < size);\n        assert(q >= 0 && q < size);\n        int root1 = find(p);\n        int root2 = find(q);\n        if (root1 == root2) return false;\n        if (sizes[root1] < sizes[root2]){\n            parents[root1] = root2;\n            sizes[root2] += sizes[root1];\n        } else {\n            parents[root2] = root1;\n            sizes[root1] += sizes[root2];\n        }\n        groups -= 1;\n        return true;\n    }\n    vector<vector<int>> getChildren() {\n        vector<vector<int>> rs(size);\n        for (int i = 0; i < size; i++) {\n            rs[find(i)].push_back(i);\n        }\n        return rs;\n    }\n    void print_sets() {\n        for(int i=0; i < size; i++) cout << find(i) << \" \";\n        cout << endl;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> findRedundantConnection(vector<vector<int>>& edges) {\n        UnionFind uf(edges.size() + 1);\n        for (auto &edge: edges) {\n            int a = edge[0], b = edge[1];\n            if (!uf.unify(a, b)) return {a, b};\n        }\n        return {0, 0};\n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection"}