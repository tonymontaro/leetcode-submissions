{"id":457778877,"lang":"python3","time":"4 months, 1 week","timestamp":1613697412,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/457778877/","is_pending":"Not Pending","title":"Redundant Connection","memory":"15.1 MB","code":"from collections import defaultdict\nclass Solution:\n    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges)\n        adj = defaultdict(set)\n        for a, b in edges:\n            adj[a].add(b)\n            adj[b].add(a)\n        \n        def notCycle(node, seen, prev):\n            if 'cycle' in seen or node in seen:\n                return\n            seen[node] = 1\n            for child in adj[node]:\n                if child == prev:\n                    continue\n                if child in seen:\n                    seen['cycle'] = 1\n                    return\n                notCycle(child, seen, node)\n        \n        for a, b in edges[::-1]:\n            adj[a].remove(b)\n            adj[b].remove(a)\n            seen = {}\n            for i in range(1, n + 1):\n                notCycle(i, seen, -1)\n            # print(seen)\n            if 'cycle' not in seen:\n                return [a, b]\n            adj[a].add(b)\n            adj[b].add(a)","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection"}