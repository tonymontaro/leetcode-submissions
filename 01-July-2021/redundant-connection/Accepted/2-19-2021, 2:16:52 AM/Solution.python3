// https://leetcode.com/problems/redundant-connection

from collections import defaultdict
class Solution:
    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:
        n = len(edges)
        adj = defaultdict(set)
        for a, b in edges:
            adj[a].add(b)
            adj[b].add(a)
        
        def notCycle(node, seen, prev):
            if 'cycle' in seen or node in seen:
                return
            seen[node] = 1
            for child in adj[node]:
                if child == prev:
                    continue
                if child in seen:
                    seen['cycle'] = 1
                    return
                notCycle(child, seen, node)
        
        for a, b in edges[::-1]:
            adj[a].remove(b)
            adj[b].remove(a)
            seen = {}
            for i in range(1, n + 1):
                notCycle(i, seen, -1)
            # print(seen)
            if 'cycle' not in seen:
                return [a, b]
            adj[a].add(b)
            adj[b].add(a)