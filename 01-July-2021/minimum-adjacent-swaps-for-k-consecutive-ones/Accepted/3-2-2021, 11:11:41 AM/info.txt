{"id":462525205,"lang":"python3","time":"4Â months","timestamp":1614679901,"status_display":"Accepted","runtime":"1380 ms","url":"/submissions/detail/462525205/","is_pending":"Not Pending","title":"Minimum Adjacent Swaps for K Consecutive Ones","memory":"36.5 MB","code":"from math import inf\n\nclass Solution:\n    def minMoves(self, nums: List[int], k: int) -> int:\n        if k == 1: return 0\n        half = k // 2\n        arr = [i for i, num in enumerate(nums) if num == 1]\n        n = len(arr)\n        presum = {-1: 0}\n        for i in range(n):\n            presum[i] = arr[i] + presum[i - 1]\n\n        best = inf\n        for lo in range(n - k + 1):\n            hi = lo + k - 1\n            mid = lo + half\n            left = presum[mid - 1] - presum[lo - 1]\n            right = presum[hi] - presum[mid] + (arr[mid] if k % 2 == 0 else 0)\n            rs = right - left\n            best = min(best, rs)\n        \n        hf = (k - 1) // 2\n        return best - ((hf * (hf + 1)) + (hf + 1 if k % 2 == 0 else 0))\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-adjacent-swaps-for-k-consecutive-ones"}