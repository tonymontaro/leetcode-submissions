{"id":400005286,"lang":"java","time":"9 months, 1 week","timestamp":1600928201,"status_display":"Accepted","runtime":"41 ms","url":"/submissions/detail/400005286/","is_pending":"Not Pending","title":"Network Delay Time","memory":"43.9 MB","code":"import java.io.*;\nimport java.util.*;\n\nclass Solution {\n    public int networkDelayTime(int[][] times, int n, int k) {\n        HashMap<Integer, TreeSet<Tuple>> nodes = new HashMap<>();\n        for (int i = 1; i < n + 1; i++) nodes.put(i, new TreeSet<>());\n        for (int[] time : times) {\n            int a = time[0], b = time[1], w = time[2];\n            nodes.get(a).add(new Tuple(w, b));\n        }\n        boolean[] visited = new boolean[n + 1];\n        TreeSet<Tuple> set = new TreeSet<>();\n        set.add(new Tuple(0, k));\n        int ans = 0;\n        while (!set.isEmpty()) {\n            Tuple node = set.pollFirst();\n            if (visited[node.b]) continue;\n            int w = node.a;\n            ans = Math.max(ans, w);\n            int idx = node.b;\n            visited[idx] = true;\n            for (Tuple child : nodes.get(idx)) {\n                if (!visited[child.b]) {\n                    set.add(new Tuple(w + child.a, child.b));\n                }\n            }\n        }\n        for (int i = 1; i < n + 1; i++) if (!visited[i]) return -1;\n\n        return ans;\n    }\n    \nstatic class Tuple implements Comparable<Tuple> {\n    int a;\n    int b;\n    int c;\n    public Tuple(int a, int b) {\n        this.a = a;\n        this.b = b;\n        this.c = 0;\n    }\n    public Tuple(int a, int b, int c) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n    }\n    public int getA() { return a; }\n    public int getB() { return b; }\n    public int getC() { return c; }\n    public int compareTo(Tuple other) {\n        if (this.a == other.a) {\n            if (this.b == other.b) return Long.compare(this.c, other.c);\n            return Long.compare(this.b, other.b);\n        }\n        return Long.compare(this.a, other.a);\n    }\n    @Override\n    public int hashCode() { return Arrays.deepHashCode(new Integer[]{a, b, c}); }\n    @Override\n    public boolean equals(Object o) {\n        if (!(o instanceof Tuple)) return false;\n        Tuple pairo = (Tuple) o;\n        return (this.a == pairo.a && this.b == pairo.b && this.c == pairo.c);\n    }\n    @Override\n    public String toString() { return String.format(\"(%d %d %d)  \", this.a, this.b, this.c); }\n}\n}","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"network-delay-time"}