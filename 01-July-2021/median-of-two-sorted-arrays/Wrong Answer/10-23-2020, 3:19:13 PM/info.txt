{"id":412265820,"lang":"python3","time":"8Â months, 1Â week","timestamp":1603462753,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/412265820/","is_pending":"Not Pending","title":"Median of Two Sorted Arrays","memory":"N/A","code":"class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        # O(log(m + n)) time and space\n        def getLower(b, idx, num):\n            # return (size, lower)\n            if idx >= len(b) or b[idx] > num:\n                return (0, 0)\n            elif b[idx] < num and (idx + 1 < len(b) and b[idx + 1] < num):\n                return (idx + 2, 0)\n            return (idx + 1, b[idx])\n\n        def search(a, b):\n            n, m = len(a), len(b)\n            \n            half = (n + m)//2\n            # print(half)\n            lo = 0\n            hi = n - 1\n            while lo <= hi:\n                mid = (lo + hi) // 2\n                numBelow = mid\n                lower = None\n                if mid > 0:\n                    lower = a[mid - 1]\n                if mid < half:\n                    remaining = half - mid\n                    size, lower2 = getLower(b, remaining - 1, a[mid])\n                    if size > 0:\n                        numBelow += size\n                        lower = max(lower, lower2) if lower is not None else lower2\n                # print(mid, a[mid], numBelow, lower)\n                if numBelow == half:\n                    if (n + m) % 2 == 1:\n                        return a[mid]\n                    return (a[mid] + lower) / 2.0\n                elif numBelow > half:\n                    hi = mid - 1\n                else:\n                    lo = mid + 1 \n            return None\n        ans = search(nums1, nums2)\n        if ans is None:\n            ans = search(nums2, nums1)\n        return ans\n        \n        \n        ","compare_resulttitle_slug":"median-of-two-sorted-arrays"}