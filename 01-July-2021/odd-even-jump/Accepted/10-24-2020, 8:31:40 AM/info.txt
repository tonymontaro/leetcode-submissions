{"id":412517827,"lang":"java","time":"8 months, 1 week","timestamp":1603524700,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/412517827/","is_pending":"Not Pending","title":"Odd Even Jump","memory":"48.6 MB","code":"class Solution {\n    // O(nlogn) time | O(n) space\n    public int oddEvenJumps(int[] arr) {\n        int n = arr.length;\n        int[][] dp = new int[n][2];\n        dp[n - 1] = new int[]{1, 1};\n        int ans = 1;\n        TreeSet<Tuple> seen = new TreeSet<>();\n        TreeSet<Tuple> negSeen = new TreeSet<>();\n        seen.add(new Tuple(arr[n - 1], n - 1));\n        negSeen.add(new Tuple(arr[n - 1], -(n - 1)));\n\n        for (int i = n - 2; i >= 0; i--) {\n            int num = arr[i];\n            Tuple pos = new Tuple(num, i);\n            Tuple neg = new Tuple(num, -i);\n            Tuple higher = seen.ceiling(pos);\n            Tuple lower = negSeen.floor(neg);\n//            out.pp(i, num, higher, lower);\n            int high = higher == null ? 0 : dp[higher.b][1];\n            int low = lower == null ? 0 : dp[-lower.b][0];\n            ans += high;\n            dp[i] = new int[]{high, low};\n            seen.add(pos);\n            negSeen.add(neg);\n        }\n//        out.println(dp);\n\n        return ans;\n    }\n    static class Tuple implements Comparable<Tuple> {\n        int a;\n        int b;\n        int c;\n        public Tuple(int a, int b) {\n            this.a = a;\n            this.b = b;\n            this.c = 0;\n        }\n        public Tuple(int a, int b, int c) {\n            this.a = a;\n            this.b = b;\n            this.c = c;\n        }\n        public int getA() { return a; }\n        public int getB() { return b; }\n        public int getC() { return c; }\n        public int compareTo(Tuple other) {\n            if (this.a == other.a) {\n                if (this.b == other.b) return Long.compare(this.c, other.c);\n                return Long.compare(this.b, other.b);\n            }\n            return Long.compare(this.a, other.a);\n        }\n        @Override\n        public int hashCode() { return Arrays.deepHashCode(new Integer[]{a, b, c}); }\n        @Override\n        public boolean equals(Object o) {\n            if (!(o instanceof Tuple)) return false;\n            Tuple pairo = (Tuple) o;\n            return (this.a == pairo.a && this.b == pairo.b && this.c == pairo.c);\n        }\n        @Override\n        public String toString() { return String.format(\"(%d %d %d)  \", this.a, this.b, this.c); }\n    }\n\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"odd-even-jump"}