{"id":417722459,"lang":"python3","time":"7 months, 3 weeks","timestamp":1604755020,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/417722459/","is_pending":"Not Pending","title":"Game of Life","memory":"14 MB","code":"class Solution:\n    def gameOfLife(self, grid: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        O(n*m) time | O(1) space\n        \"\"\"\n        if not grid or not grid[0]:\n            return grid\n        directions = [(x, y) for x in range(-1, 2) for y in range(-1, 2) if (x, y) != (0, 0)]\n        rowlen = len(grid)\n        colen = len(grid[0])\n        \n        def isAlive(r, c):\n            if 0 <= r < rowlen and 0 <= c < colen and grid[r][c] in [1, -1]:\n                return 1\n            return 0\n        \n        for r in range(rowlen):\n            for c in range(colen):\n                alive = sum([isAlive(r + x, c + y) for x, y in directions])\n                if grid[r][c] == 1 and (alive < 2 or alive > 3):\n                    grid[r][c] = -1\n                if grid[r][c] == 0 and (alive == 3):\n                    grid[r][c] = 2\n        \n        mapping = {1: 1, 2: 1, 0: 0, -1: 0}\n        for r in range(rowlen):\n            for c in range(colen):\n                grid[r][c] = mapping[grid[r][c]]\n        \n        return grid\n        ","compare_result":"11111111111111111111111","title_slug":"game-of-life"}