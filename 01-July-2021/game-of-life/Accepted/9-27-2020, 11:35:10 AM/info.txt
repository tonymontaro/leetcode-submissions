{"id":401351860,"lang":"java","time":"9Â months","timestamp":1601202910,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/401351860/","is_pending":"Not Pending","title":"Game of Life","memory":"37.2 MB","code":"class Solution {\n    int[][] board;\n    int rowlen;\n    int colen;\n    int[][] adjacentGridsAll = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};\n    public void gameOfLife(int[][] board) {\n        // O(n) time | O(1) space\n        if (board.length < 1) return;\n        this.board = board;\n        rowlen = board.length;\n        colen = board[0].length;\n\n        for (int r = 0; r < rowlen; r++) {\n            for (int c = 0; c < colen; c++) {\n                int adjacentAlive = 0;\n                for (int[] ad : adjacentGridsAll) {\n                    int row = r + ad[0];\n                    int col = c + ad[1];\n                    adjacentAlive += isInArea(row, col);\n                }\n                int val = board[r][c];\n                if (val == 0 && adjacentAlive == 3) board[r][c] = 3;\n                else if (val == 1 && (adjacentAlive < 2 || adjacentAlive > 3))\n                    board[r][c] = 4;\n            }\n        }\n        for (int r = 0; r < rowlen; r++) {\n            for (int c = 0; c < colen; c++) {\n                int val = board[r][c];\n                if (val == 3) board[r][c] = 1;\n                else if (val == 4) board[r][c] = 0;\n            }\n        }\n    }\n    int isInArea(int r, int c){\n        if(r<0) return 0;\n        if(c<0) return 0;\n        if(r>=rowlen) return 0;\n        if(c>=colen) return 0;\n        return (board[r][c] == 1 || board[r][c] == 4) ? 1 : 0;\n    }\n\n}","compare_result":"11111111111111111111111","title_slug":"game-of-life"}