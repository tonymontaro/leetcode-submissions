{"id":295778168,"lang":"python3","time":"1 year, 5 months","timestamp":1579496883,"status_display":"Accepted","runtime":"116 ms","url":"/submissions/detail/295778168/","is_pending":"Not Pending","title":"Course Schedule","memory":"15 MB","code":"class Node:\n    def __init__(self, val):\n        self.val = val\n        self.children = []\n        self.in_progress = False\n        self.visited = False\n    def __repr__(self):\n        return f'Node: {self.val}, {self.in_progress}'\n\nclass Solution:\n    def canFinish(self, numCourses: int, prerequisites: \"list[list[int]]\") -> bool:\n        if not prerequisites or not prerequisites[0] or numCourses <= 0:\n            return True\n        nodes = []\n        node_set = {}\n        for a, b in prerequisites:\n            if a not in node_set: \n                node_set[a] = Node(a)\n                nodes.append(node_set[a])\n            if b not in node_set:\n                node_set[b] = Node(b)\n                nodes.append(node_set[b])\n            node_set[a].children.append(node_set[b])\n        for node in nodes:\n            if not node.visited and not self.explore(node):\n                return False\n        return True\n\n    def explore(self, node):\n        if node.in_progress:\n            return False\n        node.visited = True\n        node.in_progress = True\n        result = True\n        for child in node.children:\n            result = result and self.explore(child)\n        node.in_progress = False\n        return result","compare_result":"111111111111111111111111111111111111111111","title_slug":"course-schedule"}