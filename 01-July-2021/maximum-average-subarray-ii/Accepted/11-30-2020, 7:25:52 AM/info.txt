{"id":425635332,"lang":"python3","time":"7Â months","timestamp":1606717552,"status_display":"Accepted","runtime":"2020 ms","url":"/submissions/detail/425635332/","is_pending":"Not Pending","title":"Maximum Average Subarray II","memory":"15.4 MB","code":"class Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        # O(nlogn) time | O(n) space\n        n = len(nums)\n        def isValid(mid):\n            total = 0\n            cm = [0]\n            for i in range(k):\n                total += (nums[i] - mid)\n                cm.append(total)\n            if total >= 0:\n                return True\n            mn = 0\n            for i in range(k, n):\n                total += nums[i] - mid\n                mn = min(mn, cm[i - k + 1])\n                cm.append(total)\n                if total - mn >= 0:\n                    return True\n            return False\n        \n        limit = 10**-5\n        lo = min(nums)\n        hi = max(nums)\n        ans = lo\n        while (hi - lo > limit):\n            mid = (lo + hi) / 2\n            if isValid(mid):\n                ans = mid\n                lo = mid\n            else:\n                hi = mid\n        return ans","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-average-subarray-ii"}