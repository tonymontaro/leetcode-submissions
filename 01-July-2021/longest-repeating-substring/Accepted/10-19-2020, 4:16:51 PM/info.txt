{"id":410670450,"lang":"python3","time":"8 months, 2 weeks","timestamp":1603120611,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/410670450/","is_pending":"Not Pending","title":"Longest Repeating Substring","memory":"14.2 MB","code":"class Solution:\n    def longestRepeatingSubstring(self, s: str) -> int:\n        # O(nlogn) time | O(n) space\n        nums = [ord(c) - ord('a') + 1 for c in s]\n        mod = 2**24\n        numUnique = 26\n        \n        lo = 1\n        hi = len(nums) - 1\n        ans = 0\n        while lo <= hi:\n            mid = (lo + hi) // 2\n            isValid = rabinKarp(nums, numUnique, mid, mod)\n            if isValid:\n                ans = mid\n                lo = mid + 1\n            else:\n                hi = mid - 1\n        return ans\n        \n\n\ndef rabinKarp(nums, numUnique, ln, mod):\n    n = len(nums)\n    hsh = 0\n    for i in range(ln):\n        hsh = (hsh * numUnique + nums[i]) % mod\n\n    seen = set()\n    seen.add(hsh)\n    mult = pow(numUnique, ln - 1, mod)\n    for i in range(ln, n):\n        remove = nums[i - ln]\n        hsh = (hsh - remove * mult + mod) % mod\n        hsh = (hsh * numUnique + nums[i]) % mod\n        if hsh in seen:\n            return True\n        seen.add(hsh)\n    return False\n","compare_result":"1111111111111111111111","title_slug":"longest-repeating-substring"}